# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepositoryInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edition': 'str',
        'id': 'str',
        'license': 'LicenseInfo',
        'modules': 'list[ModuleInfo]',
        'status': 'StatusInfo',
        'version': 'VersionInfo'
    }

    attribute_map = {
        'edition': 'edition',
        'id': 'id',
        'license': 'license',
        'modules': 'modules',
        'status': 'status',
        'version': 'version'
    }

    def __init__(self, edition=None, id=None, license=None, modules=None, status=None, version=None):  # noqa: E501
        """RepositoryInfo - a model defined in Swagger"""  # noqa: E501
        self._edition = None
        self._id = None
        self._license = None
        self._modules = None
        self._status = None
        self._version = None
        self.discriminator = None
        self.edition = edition
        self.id = id
        if license is not None:
            self.license = license
        if modules is not None:
            self.modules = modules
        self.status = status
        self.version = version

    @property
    def edition(self):
        """Gets the edition of this RepositoryInfo.  # noqa: E501


        :return: The edition of this RepositoryInfo.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this RepositoryInfo.


        :param edition: The edition of this RepositoryInfo.  # noqa: E501
        :type: str
        """
        if edition is None:
            raise ValueError("Invalid value for `edition`, must not be `None`")  # noqa: E501

        self._edition = edition

    @property
    def id(self):
        """Gets the id of this RepositoryInfo.  # noqa: E501


        :return: The id of this RepositoryInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryInfo.


        :param id: The id of this RepositoryInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def license(self):
        """Gets the license of this RepositoryInfo.  # noqa: E501


        :return: The license of this RepositoryInfo.  # noqa: E501
        :rtype: LicenseInfo
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this RepositoryInfo.


        :param license: The license of this RepositoryInfo.  # noqa: E501
        :type: LicenseInfo
        """

        self._license = license

    @property
    def modules(self):
        """Gets the modules of this RepositoryInfo.  # noqa: E501


        :return: The modules of this RepositoryInfo.  # noqa: E501
        :rtype: list[ModuleInfo]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this RepositoryInfo.


        :param modules: The modules of this RepositoryInfo.  # noqa: E501
        :type: list[ModuleInfo]
        """

        self._modules = modules

    @property
    def status(self):
        """Gets the status of this RepositoryInfo.  # noqa: E501


        :return: The status of this RepositoryInfo.  # noqa: E501
        :rtype: StatusInfo
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepositoryInfo.


        :param status: The status of this RepositoryInfo.  # noqa: E501
        :type: StatusInfo
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def version(self):
        """Gets the version of this RepositoryInfo.  # noqa: E501


        :return: The version of this RepositoryInfo.  # noqa: E501
        :rtype: VersionInfo
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RepositoryInfo.


        :param version: The version of this RepositoryInfo.  # noqa: E501
        :type: VersionInfo
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
