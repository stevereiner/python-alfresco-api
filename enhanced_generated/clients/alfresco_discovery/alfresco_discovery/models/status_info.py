# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_audit_enabled': 'bool',
        'is_quick_share_enabled': 'bool',
        'is_read_only': 'bool',
        'is_thumbnail_generation_enabled': 'bool'
    }

    attribute_map = {
        'is_audit_enabled': 'isAuditEnabled',
        'is_quick_share_enabled': 'isQuickShareEnabled',
        'is_read_only': 'isReadOnly',
        'is_thumbnail_generation_enabled': 'isThumbnailGenerationEnabled'
    }

    def __init__(self, is_audit_enabled=None, is_quick_share_enabled=None, is_read_only=False, is_thumbnail_generation_enabled=None):  # noqa: E501
        """StatusInfo - a model defined in Swagger"""  # noqa: E501
        self._is_audit_enabled = None
        self._is_quick_share_enabled = None
        self._is_read_only = None
        self._is_thumbnail_generation_enabled = None
        self.discriminator = None
        self.is_audit_enabled = is_audit_enabled
        self.is_quick_share_enabled = is_quick_share_enabled
        self.is_read_only = is_read_only
        self.is_thumbnail_generation_enabled = is_thumbnail_generation_enabled

    @property
    def is_audit_enabled(self):
        """Gets the is_audit_enabled of this StatusInfo.  # noqa: E501


        :return: The is_audit_enabled of this StatusInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_audit_enabled

    @is_audit_enabled.setter
    def is_audit_enabled(self, is_audit_enabled):
        """Sets the is_audit_enabled of this StatusInfo.


        :param is_audit_enabled: The is_audit_enabled of this StatusInfo.  # noqa: E501
        :type: bool
        """
        if is_audit_enabled is None:
            raise ValueError("Invalid value for `is_audit_enabled`, must not be `None`")  # noqa: E501

        self._is_audit_enabled = is_audit_enabled

    @property
    def is_quick_share_enabled(self):
        """Gets the is_quick_share_enabled of this StatusInfo.  # noqa: E501


        :return: The is_quick_share_enabled of this StatusInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_quick_share_enabled

    @is_quick_share_enabled.setter
    def is_quick_share_enabled(self, is_quick_share_enabled):
        """Sets the is_quick_share_enabled of this StatusInfo.


        :param is_quick_share_enabled: The is_quick_share_enabled of this StatusInfo.  # noqa: E501
        :type: bool
        """
        if is_quick_share_enabled is None:
            raise ValueError("Invalid value for `is_quick_share_enabled`, must not be `None`")  # noqa: E501

        self._is_quick_share_enabled = is_quick_share_enabled

    @property
    def is_read_only(self):
        """Gets the is_read_only of this StatusInfo.  # noqa: E501


        :return: The is_read_only of this StatusInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this StatusInfo.


        :param is_read_only: The is_read_only of this StatusInfo.  # noqa: E501
        :type: bool
        """
        if is_read_only is None:
            raise ValueError("Invalid value for `is_read_only`, must not be `None`")  # noqa: E501

        self._is_read_only = is_read_only

    @property
    def is_thumbnail_generation_enabled(self):
        """Gets the is_thumbnail_generation_enabled of this StatusInfo.  # noqa: E501


        :return: The is_thumbnail_generation_enabled of this StatusInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_thumbnail_generation_enabled

    @is_thumbnail_generation_enabled.setter
    def is_thumbnail_generation_enabled(self, is_thumbnail_generation_enabled):
        """Sets the is_thumbnail_generation_enabled of this StatusInfo.


        :param is_thumbnail_generation_enabled: The is_thumbnail_generation_enabled of this StatusInfo.  # noqa: E501
        :type: bool
        """
        if is_thumbnail_generation_enabled is None:
            raise ValueError("Invalid value for `is_thumbnail_generation_enabled`, must not be `None`")  # noqa: E501

        self._is_thumbnail_generation_enabled = is_thumbnail_generation_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
