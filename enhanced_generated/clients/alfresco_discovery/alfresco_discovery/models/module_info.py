# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModuleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'install_date': 'datetime',
        'install_state': 'str',
        'title': 'str',
        'version': 'str',
        'version_max': 'str',
        'version_min': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'install_date': 'installDate',
        'install_state': 'installState',
        'title': 'title',
        'version': 'version',
        'version_max': 'versionMax',
        'version_min': 'versionMin'
    }

    def __init__(self, description=None, id=None, install_date=None, install_state=None, title=None, version=None, version_max=None, version_min=None):  # noqa: E501
        """ModuleInfo - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._install_date = None
        self._install_state = None
        self._title = None
        self._version = None
        self._version_max = None
        self._version_min = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if install_date is not None:
            self.install_date = install_date
        if install_state is not None:
            self.install_state = install_state
        if title is not None:
            self.title = title
        if version is not None:
            self.version = version
        if version_max is not None:
            self.version_max = version_max
        if version_min is not None:
            self.version_min = version_min

    @property
    def description(self):
        """Gets the description of this ModuleInfo.  # noqa: E501


        :return: The description of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleInfo.


        :param description: The description of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ModuleInfo.  # noqa: E501


        :return: The id of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModuleInfo.


        :param id: The id of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def install_date(self):
        """Gets the install_date of this ModuleInfo.  # noqa: E501


        :return: The install_date of this ModuleInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this ModuleInfo.


        :param install_date: The install_date of this ModuleInfo.  # noqa: E501
        :type: datetime
        """

        self._install_date = install_date

    @property
    def install_state(self):
        """Gets the install_state of this ModuleInfo.  # noqa: E501


        :return: The install_state of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._install_state

    @install_state.setter
    def install_state(self, install_state):
        """Sets the install_state of this ModuleInfo.


        :param install_state: The install_state of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._install_state = install_state

    @property
    def title(self):
        """Gets the title of this ModuleInfo.  # noqa: E501


        :return: The title of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModuleInfo.


        :param title: The title of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this ModuleInfo.  # noqa: E501


        :return: The version of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModuleInfo.


        :param version: The version of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_max(self):
        """Gets the version_max of this ModuleInfo.  # noqa: E501


        :return: The version_max of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_max

    @version_max.setter
    def version_max(self, version_max):
        """Sets the version_max of this ModuleInfo.


        :param version_max: The version_max of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._version_max = version_max

    @property
    def version_min(self):
        """Gets the version_min of this ModuleInfo.  # noqa: E501


        :return: The version_min of this ModuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_min

    @version_min.setter
    def version_min(self, version_min):
        """Sets the version_min of this ModuleInfo.


        :param version_min: The version_min of this ModuleInfo.  # noqa: E501
        :type: str
        """

        self._version_min = version_min

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
