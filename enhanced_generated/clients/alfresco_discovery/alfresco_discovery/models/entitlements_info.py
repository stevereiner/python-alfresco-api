# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntitlementsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_cluster_enabled': 'bool',
        'is_cryptodoc_enabled': 'bool',
        'max_docs': 'int',
        'max_users': 'int'
    }

    attribute_map = {
        'is_cluster_enabled': 'isClusterEnabled',
        'is_cryptodoc_enabled': 'isCryptodocEnabled',
        'max_docs': 'maxDocs',
        'max_users': 'maxUsers'
    }

    def __init__(self, is_cluster_enabled=False, is_cryptodoc_enabled=False, max_docs=None, max_users=None):  # noqa: E501
        """EntitlementsInfo - a model defined in Swagger"""  # noqa: E501
        self._is_cluster_enabled = None
        self._is_cryptodoc_enabled = None
        self._max_docs = None
        self._max_users = None
        self.discriminator = None
        if is_cluster_enabled is not None:
            self.is_cluster_enabled = is_cluster_enabled
        if is_cryptodoc_enabled is not None:
            self.is_cryptodoc_enabled = is_cryptodoc_enabled
        if max_docs is not None:
            self.max_docs = max_docs
        if max_users is not None:
            self.max_users = max_users

    @property
    def is_cluster_enabled(self):
        """Gets the is_cluster_enabled of this EntitlementsInfo.  # noqa: E501


        :return: The is_cluster_enabled of this EntitlementsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_cluster_enabled

    @is_cluster_enabled.setter
    def is_cluster_enabled(self, is_cluster_enabled):
        """Sets the is_cluster_enabled of this EntitlementsInfo.


        :param is_cluster_enabled: The is_cluster_enabled of this EntitlementsInfo.  # noqa: E501
        :type: bool
        """

        self._is_cluster_enabled = is_cluster_enabled

    @property
    def is_cryptodoc_enabled(self):
        """Gets the is_cryptodoc_enabled of this EntitlementsInfo.  # noqa: E501


        :return: The is_cryptodoc_enabled of this EntitlementsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_cryptodoc_enabled

    @is_cryptodoc_enabled.setter
    def is_cryptodoc_enabled(self, is_cryptodoc_enabled):
        """Sets the is_cryptodoc_enabled of this EntitlementsInfo.


        :param is_cryptodoc_enabled: The is_cryptodoc_enabled of this EntitlementsInfo.  # noqa: E501
        :type: bool
        """

        self._is_cryptodoc_enabled = is_cryptodoc_enabled

    @property
    def max_docs(self):
        """Gets the max_docs of this EntitlementsInfo.  # noqa: E501


        :return: The max_docs of this EntitlementsInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_docs

    @max_docs.setter
    def max_docs(self, max_docs):
        """Sets the max_docs of this EntitlementsInfo.


        :param max_docs: The max_docs of this EntitlementsInfo.  # noqa: E501
        :type: int
        """

        self._max_docs = max_docs

    @property
    def max_users(self):
        """Gets the max_users of this EntitlementsInfo.  # noqa: E501


        :return: The max_users of this EntitlementsInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this EntitlementsInfo.


        :param max_users: The max_users of this EntitlementsInfo.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitlementsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitlementsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
