# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenseInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entitlements': 'EntitlementsInfo',
        'expires_at': 'datetime',
        'holder': 'str',
        'issued_at': 'datetime',
        'mode': 'str',
        'remaining_days': 'int'
    }

    attribute_map = {
        'entitlements': 'entitlements',
        'expires_at': 'expiresAt',
        'holder': 'holder',
        'issued_at': 'issuedAt',
        'mode': 'mode',
        'remaining_days': 'remainingDays'
    }

    def __init__(self, entitlements=None, expires_at=None, holder=None, issued_at=None, mode=None, remaining_days=None):  # noqa: E501
        """LicenseInfo - a model defined in Swagger"""  # noqa: E501
        self._entitlements = None
        self._expires_at = None
        self._holder = None
        self._issued_at = None
        self._mode = None
        self._remaining_days = None
        self.discriminator = None
        if entitlements is not None:
            self.entitlements = entitlements
        self.expires_at = expires_at
        self.holder = holder
        self.issued_at = issued_at
        self.mode = mode
        self.remaining_days = remaining_days

    @property
    def entitlements(self):
        """Gets the entitlements of this LicenseInfo.  # noqa: E501


        :return: The entitlements of this LicenseInfo.  # noqa: E501
        :rtype: EntitlementsInfo
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this LicenseInfo.


        :param entitlements: The entitlements of this LicenseInfo.  # noqa: E501
        :type: EntitlementsInfo
        """

        self._entitlements = entitlements

    @property
    def expires_at(self):
        """Gets the expires_at of this LicenseInfo.  # noqa: E501


        :return: The expires_at of this LicenseInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this LicenseInfo.


        :param expires_at: The expires_at of this LicenseInfo.  # noqa: E501
        :type: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def holder(self):
        """Gets the holder of this LicenseInfo.  # noqa: E501


        :return: The holder of this LicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this LicenseInfo.


        :param holder: The holder of this LicenseInfo.  # noqa: E501
        :type: str
        """
        if holder is None:
            raise ValueError("Invalid value for `holder`, must not be `None`")  # noqa: E501

        self._holder = holder

    @property
    def issued_at(self):
        """Gets the issued_at of this LicenseInfo.  # noqa: E501


        :return: The issued_at of this LicenseInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this LicenseInfo.


        :param issued_at: The issued_at of this LicenseInfo.  # noqa: E501
        :type: datetime
        """
        if issued_at is None:
            raise ValueError("Invalid value for `issued_at`, must not be `None`")  # noqa: E501

        self._issued_at = issued_at

    @property
    def mode(self):
        """Gets the mode of this LicenseInfo.  # noqa: E501


        :return: The mode of this LicenseInfo.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this LicenseInfo.


        :param mode: The mode of this LicenseInfo.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def remaining_days(self):
        """Gets the remaining_days of this LicenseInfo.  # noqa: E501


        :return: The remaining_days of this LicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._remaining_days

    @remaining_days.setter
    def remaining_days(self, remaining_days):
        """Sets the remaining_days of this LicenseInfo.


        :param remaining_days: The remaining_days of this LicenseInfo.  # noqa: E501
        :type: int
        """
        if remaining_days is None:
            raise ValueError("Invalid value for `remaining_days`, must not be `None`")  # noqa: E501

        self._remaining_days = remaining_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
