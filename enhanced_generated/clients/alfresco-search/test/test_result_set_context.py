# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_search_client.models.result_set_context import ResultSetContext

class TestResultSetContext(unittest.TestCase):
    """ResultSetContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultSetContext:
        """Test ResultSetContext
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultSetContext`
        """
        model = ResultSetContext()
        if include_optional:
            return ResultSetContext(
                consistency = alfresco_search_client.models.response_consistency.ResponseConsistency(
                    last_tx_id = 56, ),
                facet_queries = [
                    alfresco_search_client.models.result_set_context_facet_queries_inner.ResultSetContext_facetQueries_inner(
                        count = 56, 
                        filter_query = '', 
                        label = '', )
                    ],
                facets = [
                    alfresco_search_client.models.generic_facet_response.GenericFacetResponse(
                        buckets = [
                            alfresco_search_client.models.generic_bucket.GenericBucket(
                                bucket_info = alfresco_search_client.models.generic_bucket_bucket_info.GenericBucket_bucketInfo(
                                    end = '', 
                                    end_inclusive = True, 
                                    start = '', 
                                    start_inclusive = True, ), 
                                display = alfresco_search_client.models.display.display(), 
                                facets = [
                                    None
                                    ], 
                                filter_query = '', 
                                label = '', 
                                metrics = [
                                    alfresco_search_client.models.generic_metric.GenericMetric(
                                        type = '', 
                                        value = alfresco_search_client.models.value.value(), )
                                    ], )
                            ], 
                        label = '', 
                        type = '', )
                    ],
                facets_fields = [
                    alfresco_search_client.models.result_buckets.ResultBuckets(
                        buckets = [
                            alfresco_search_client.models.result_buckets_buckets_inner.ResultBuckets_buckets_inner(
                                count = 56, 
                                display = alfresco_search_client.models.display.display(), 
                                filter_query = '', 
                                label = '', )
                            ], 
                        label = '', )
                    ],
                request = alfresco_search_client.models.search_request.SearchRequest(
                    defaults = alfresco_search_client.models.request_defaults.RequestDefaults(
                        default_fts_field_operator = 'AND', 
                        default_fts_operator = 'AND', 
                        default_field_name = 'TEXT', 
                        namespace = 'cm', 
                        text_attributes = [
                            'cm:content'
                            ], ), 
                    facet_fields = alfresco_search_client.models.request_facet_fields.RequestFacetFields(
                        facets = [
                            alfresco_search_client.models.request_facet_field.RequestFacetField(
                                exclude_filters = [
                                    ''
                                    ], 
                                facet_enum_cache_min_df = 56, 
                                field = '', 
                                label = '', 
                                limit = 56, 
                                method = 'ENUM', 
                                mincount = 56, 
                                missing = True, 
                                offset = 56, 
                                prefix = '', 
                                sort = 'COUNT', )
                            ], ), 
                    facet_intervals = alfresco_search_client.models.request_facet_intervals.RequestFacetIntervals(
                        intervals = [
                            alfresco_search_client.models.request_facet_intervals_intervals_inner.RequestFacetIntervals_intervals_inner(
                                field = '', 
                                label = '', 
                                sets = [
                                    alfresco_search_client.models.request_facet_set.RequestFacetSet(
                                        end = '', 
                                        end_inclusive = True, 
                                        label = '', 
                                        start = '', 
                                        start_inclusive = True, )
                                    ], )
                            ], 
                        sets = [
                            alfresco_search_client.models.request_facet_set.RequestFacetSet(
                                end = '', 
                                end_inclusive = True, 
                                label = '', 
                                start = '', 
                                start_inclusive = True, )
                            ], ), 
                    facet_queries = [
                        alfresco_search_client.models.request_facet_queries_inner.RequestFacetQueries_inner(
                            label = '', 
                            query = '', )
                        ], 
                    fields = [
                        ''
                        ], 
                    filter_queries = [
                        alfresco_search_client.models.request_filter_queries_inner.RequestFilterQueries_inner(
                            query = '', 
                            tags = [
                                ''
                                ], )
                        ], 
                    highlight = alfresco_search_client.models.request_highlight.RequestHighlight(
                        fragment_size = 56, 
                        max_analyzed_chars = 56, 
                        merge_contiguous = True, 
                        postfix = '', 
                        prefix = '', 
                        snippet_count = 56, 
                        use_phrase_highlighter = True, ), 
                    include = [
                        'allowableOperations'
                        ], 
                    include_request = True, 
                    limits = alfresco_search_client.models.request_limits.RequestLimits(
                        permission_evaluation_count = 56, 
                        permission_evaluation_time = 56, ), 
                    localization = alfresco_search_client.models.request_localization.RequestLocalization(
                        locales = [
                            ''
                            ], 
                        timezone = '', ), 
                    paging = alfresco_search_client.models.request_pagination.RequestPagination(
                        max_items = 1, 
                        skip_count = 0, ), 
                    pivots = [
                        {"key":"MyKey","pivots":[{"key":"AnotherKey","pivots":[]}]}
                        ], 
                    query = alfresco_search_client.models.request_query.RequestQuery(
                        language = 'afts', 
                        query = '', 
                        user_query = '', ), 
                    ranges = [
                        alfresco_search_client.models.request_range.RequestRange(
                            end = '', 
                            field = '', 
                            gap = '', 
                            hardend = True, 
                            label = '', 
                            other = [
                                ''
                                ], 
                            start = '', )
                        ], 
                    scope = alfresco_search_client.models.request_scope.RequestScope(
                        locations = 'nodes', ), 
                    sort = [
                        alfresco_search_client.models.request_sort_definition_inner.RequestSortDefinition_inner(
                            ascending = True, 
                            field = '', 
                            type = 'FIELD', )
                        ], 
                    spellcheck = alfresco_search_client.models.request_spellcheck.RequestSpellcheck(), 
                    stats = [
                        alfresco_search_client.models.request_stats.RequestStats(
                            cardinality = True, 
                            cardinality_accuracy = 1.337, 
                            count_distinct = True, 
                            count_values = True, 
                            distinct_values = True, 
                            field = '', 
                            label = '', 
                            max = True, 
                            mean = True, 
                            min = True, 
                            missing = True, 
                            percentiles = [
                                1.337
                                ], 
                            stddev = True, 
                            sum = True, 
                            sum_of_squares = True, )
                        ], 
                    templates = [
                        alfresco_search_client.models.request_templates_inner.RequestTemplates_inner(
                            name = '', 
                            template = '', )
                        ], ),
                spellcheck = [
                    alfresco_search_client.models.result_set_context_spellcheck_inner.ResultSetContext_spellcheck_inner(
                        suggestion = [
                            ''
                            ], 
                        type = 'searchInsteadFor', )
                    ]
            )
        else:
            return ResultSetContext(
        )
        """

    def testResultSetContext(self):
        """Test ResultSetContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
