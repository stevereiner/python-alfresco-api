# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_search_client.models.result_node import ResultNode

class TestResultNode(unittest.TestCase):
    """ResultNode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultNode:
        """Test ResultNode
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultNode`
        """
        model = ResultNode()
        if include_optional:
            return ResultNode(
                allowable_operations = [
                    ''
                    ],
                aspect_names = [
                    ''
                    ],
                content = alfresco_search_client.models.content_info.ContentInfo(
                    encoding = '', 
                    mime_type = '', 
                    mime_type_group = '', 
                    mime_type_name = '', 
                    size_in_bytes = 56, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_user = alfresco_search_client.models.user_info.UserInfo(
                    display_name = '', 
                    id = '', ),
                id = '',
                is_file = True,
                is_folder = True,
                is_link = True,
                is_locked = True,
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_by_user = alfresco_search_client.models.user_info.UserInfo(
                    display_name = '', 
                    id = '', ),
                name = '?x!u\'K}qz^sEC)lJ*=-jQ+\'6`%cClu,k\'!\'su[.',
                node_type = '',
                parent_id = '',
                path = alfresco_search_client.models.path_info.PathInfo(
                    elements = [
                        alfresco_search_client.models.path_element.PathElement(
                            id = '', 
                            name = '', )
                        ], 
                    is_complete = True, 
                    name = '', ),
                properties = alfresco_search_client.models.properties.properties(),
                archived_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                archived_by_user = alfresco_search_client.models.user_info.UserInfo(
                    display_name = '', 
                    id = '', ),
                search = alfresco_search_client.models.search_entry.SearchEntry(
                    highlight = [
                        alfresco_search_client.models.search_entry_highlight_inner.SearchEntry_highlight_inner(
                            field = '', 
                            snippets = [
                                ''
                                ], )
                        ], 
                    score = 1.337, ),
                version_comment = '',
                version_label = ''
            )
        else:
            return ResultNode(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by_user = alfresco_search_client.models.user_info.UserInfo(
                    display_name = '', 
                    id = '', ),
                id = '',
                is_file = True,
                is_folder = True,
                modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                modified_by_user = alfresco_search_client.models.user_info.UserInfo(
                    display_name = '', 
                    id = '', ),
                name = '?x!u\'K}qz^sEC)lJ*=-jQ+\'6`%cClu,k\'!\'su[.',
                node_type = '',
        )
        """

    def testResultNode(self):
        """Test ResultNode"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
