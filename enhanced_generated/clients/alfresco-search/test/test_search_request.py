# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_search_client.models.search_request import SearchRequest

class TestSearchRequest(unittest.TestCase):
    """SearchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchRequest:
        """Test SearchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchRequest`
        """
        model = SearchRequest()
        if include_optional:
            return SearchRequest(
                defaults = alfresco_search_client.models.request_defaults.RequestDefaults(
                    default_fts_field_operator = 'AND', 
                    default_fts_operator = 'AND', 
                    default_field_name = 'TEXT', 
                    namespace = 'cm', 
                    text_attributes = [
                        'cm:content'
                        ], ),
                facet_fields = alfresco_search_client.models.request_facet_fields.RequestFacetFields(
                    facets = [
                        alfresco_search_client.models.request_facet_field.RequestFacetField(
                            exclude_filters = [
                                ''
                                ], 
                            facet_enum_cache_min_df = 56, 
                            field = '', 
                            label = '', 
                            limit = 56, 
                            method = 'ENUM', 
                            mincount = 56, 
                            missing = True, 
                            offset = 56, 
                            prefix = '', 
                            sort = 'COUNT', )
                        ], ),
                facet_intervals = alfresco_search_client.models.request_facet_intervals.RequestFacetIntervals(
                    intervals = [
                        alfresco_search_client.models.request_facet_intervals_intervals_inner.RequestFacetIntervals_intervals_inner(
                            field = '', 
                            label = '', 
                            sets = [
                                alfresco_search_client.models.request_facet_set.RequestFacetSet(
                                    end = '', 
                                    end_inclusive = True, 
                                    label = '', 
                                    start = '', 
                                    start_inclusive = True, )
                                ], )
                        ], 
                    sets = [
                        alfresco_search_client.models.request_facet_set.RequestFacetSet(
                            end = '', 
                            end_inclusive = True, 
                            label = '', 
                            start = '', 
                            start_inclusive = True, )
                        ], ),
                facet_queries = [
                    alfresco_search_client.models.request_facet_queries_inner.RequestFacetQueries_inner(
                        label = '', 
                        query = '', )
                    ],
                fields = [
                    ''
                    ],
                filter_queries = [
                    alfresco_search_client.models.request_filter_queries_inner.RequestFilterQueries_inner(
                        query = '', 
                        tags = [
                            ''
                            ], )
                    ],
                highlight = alfresco_search_client.models.request_highlight.RequestHighlight(
                    fields = [
                        alfresco_search_client.models.request_highlight_fields_inner.RequestHighlight_fields_inner(
                            field = '', 
                            fragment_size = 56, 
                            merge_contiguous = True, 
                            postfix = '', 
                            prefix = '', 
                            snippet_count = 56, )
                        ], 
                    fragment_size = 56, 
                    max_analyzed_chars = 56, 
                    merge_contiguous = True, 
                    postfix = '', 
                    prefix = '', 
                    snippet_count = 56, 
                    use_phrase_highlighter = True, ),
                include = [
                    'allowableOperations'
                    ],
                include_request = True,
                limits = alfresco_search_client.models.request_limits.RequestLimits(
                    permission_evaluation_count = 56, 
                    permission_evaluation_time = 56, ),
                localization = alfresco_search_client.models.request_localization.RequestLocalization(
                    locales = [
                        ''
                        ], 
                    timezone = '', ),
                paging = alfresco_search_client.models.request_pagination.RequestPagination(
                    max_items = 1, 
                    skip_count = 0, ),
                pivots = [
                    {"key":"MyKey","pivots":[{"key":"AnotherKey","pivots":[]}]}
                    ],
                query = alfresco_search_client.models.request_query.RequestQuery(
                    language = 'afts', 
                    query = '', 
                    user_query = '', ),
                ranges = [
                    alfresco_search_client.models.request_range.RequestRange(
                        end = '', 
                        exclude_filters = [
                            ''
                            ], 
                        field = '', 
                        gap = '', 
                        hardend = True, 
                        include = [
                            ''
                            ], 
                        label = '', 
                        other = [
                            ''
                            ], 
                        start = '', )
                    ],
                scope = alfresco_search_client.models.request_scope.RequestScope(
                    locations = 'nodes', ),
                sort = [
                    alfresco_search_client.models.request_sort_definition_inner.RequestSortDefinition_inner(
                        ascending = True, 
                        field = '', 
                        type = 'FIELD', )
                    ],
                spellcheck = alfresco_search_client.models.request_spellcheck.RequestSpellcheck(
                    query = '', ),
                stats = [
                    alfresco_search_client.models.request_stats.RequestStats(
                        cardinality = True, 
                        cardinality_accuracy = 1.337, 
                        count_distinct = True, 
                        count_values = True, 
                        distinct_values = True, 
                        exclude_filters = [
                            ''
                            ], 
                        field = '', 
                        label = '', 
                        max = True, 
                        mean = True, 
                        min = True, 
                        missing = True, 
                        percentiles = [
                            1.337
                            ], 
                        stddev = True, 
                        sum = True, 
                        sum_of_squares = True, )
                    ],
                templates = [
                    alfresco_search_client.models.request_templates_inner.RequestTemplates_inner(
                        name = '', 
                        template = '', )
                    ]
            )
        else:
            return SearchRequest(
                query = alfresco_search_client.models.request_query.RequestQuery(
                    language = 'afts', 
                    query = '', 
                    user_query = '', ),
        )
        """

    def testSearchRequest(self):
        """Test SearchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
