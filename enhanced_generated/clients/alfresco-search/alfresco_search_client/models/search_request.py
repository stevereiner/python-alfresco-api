# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_search_client.models.request_defaults import RequestDefaults
from alfresco_search_client.models.request_facet_fields import RequestFacetFields
from alfresco_search_client.models.request_facet_intervals import RequestFacetIntervals
from alfresco_search_client.models.request_facet_queries_inner import RequestFacetQueriesInner
from alfresco_search_client.models.request_filter_queries_inner import RequestFilterQueriesInner
from alfresco_search_client.models.request_highlight import RequestHighlight
from alfresco_search_client.models.request_limits import RequestLimits
from alfresco_search_client.models.request_localization import RequestLocalization
from alfresco_search_client.models.request_pagination import RequestPagination
from alfresco_search_client.models.request_pivot import RequestPivot
from alfresco_search_client.models.request_query import RequestQuery
from alfresco_search_client.models.request_range import RequestRange
from alfresco_search_client.models.request_scope import RequestScope
from alfresco_search_client.models.request_sort_definition_inner import RequestSortDefinitionInner
from alfresco_search_client.models.request_spellcheck import RequestSpellcheck
from alfresco_search_client.models.request_stats import RequestStats
from alfresco_search_client.models.request_templates_inner import RequestTemplatesInner
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    SearchRequest
    """ # noqa: E501
    defaults: Optional[RequestDefaults] = None
    facet_fields: Optional[RequestFacetFields] = Field(default=None, alias="facetFields")
    facet_intervals: Optional[RequestFacetIntervals] = Field(default=None, alias="facetIntervals")
    facet_queries: Optional[List[RequestFacetQueriesInner]] = Field(default=None, description="Facet queries to include", alias="facetQueries")
    fields: Optional[List[StrictStr]] = Field(default=None, description="A list of field names. You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. The list applies to a returned individual entity or entries within a collection. If the **include** parameter is used aswell then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.")
    filter_queries: Optional[List[RequestFilterQueriesInner]] = Field(default=None, description="Filter Queries. Constraints that apply to the results set but do not affect the score of each entry.", alias="filterQueries")
    highlight: Optional[RequestHighlight] = None
    include: Optional[List[StrictStr]] = Field(default=None, description="Returns additional information about the node. The following optional fields can be requested:  * properties  * aspectNames  * path  * isLink  * allowableOperations  * association ")
    include_request: Optional[StrictBool] = Field(default=False, description="When true, include the original request in the response", alias="includeRequest")
    limits: Optional[RequestLimits] = None
    localization: Optional[RequestLocalization] = None
    paging: Optional[RequestPagination] = None
    pivots: Optional[List[RequestPivot]] = None
    query: RequestQuery
    ranges: Optional[List[RequestRange]] = None
    scope: Optional[RequestScope] = None
    sort: Optional[List[RequestSortDefinitionInner]] = Field(default=None, description="How to sort the rows? An array of sort specifications. The array order defines the ordering precedence.")
    spellcheck: Optional[RequestSpellcheck] = None
    stats: Optional[List[RequestStats]] = None
    templates: Optional[List[RequestTemplatesInner]] = Field(default=None, description="Templates usewd for query expansion. A template called \"WOOF\" defined as \"%(cm:name cm:title)\" allows WOOF:example to generate cm:name:example cm:name:example ")
    __properties: ClassVar[List[str]] = ["defaults", "facetFields", "facetIntervals", "facetQueries", "fields", "filterQueries", "highlight", "include", "includeRequest", "limits", "localization", "paging", "pivots", "query", "ranges", "scope", "sort", "spellcheck", "stats", "templates"]

    @field_validator('include')
    def include_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['allowableOperations', 'aspectNames', 'isLink', 'isLocked', 'path', 'properties']):
                raise ValueError("each list item must be one of ('allowableOperations', 'aspectNames', 'isLink', 'isLocked', 'path', 'properties')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defaults
        if self.defaults:
            _dict['defaults'] = self.defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facet_fields
        if self.facet_fields:
            _dict['facetFields'] = self.facet_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facet_intervals
        if self.facet_intervals:
            _dict['facetIntervals'] = self.facet_intervals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facet_queries (list)
        _items = []
        if self.facet_queries:
            for _item_facet_queries in self.facet_queries:
                if _item_facet_queries:
                    _items.append(_item_facet_queries.to_dict())
            _dict['facetQueries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_queries (list)
        _items = []
        if self.filter_queries:
            for _item_filter_queries in self.filter_queries:
                if _item_filter_queries:
                    _items.append(_item_filter_queries.to_dict())
            _dict['filterQueries'] = _items
        # override the default output from pydantic by calling `to_dict()` of highlight
        if self.highlight:
            _dict['highlight'] = self.highlight.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localization
        if self.localization:
            _dict['localization'] = self.localization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paging
        if self.paging:
            _dict['paging'] = self.paging.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pivots (list)
        _items = []
        if self.pivots:
            for _item_pivots in self.pivots:
                if _item_pivots:
                    _items.append(_item_pivots.to_dict())
            _dict['pivots'] = _items
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item_ranges in self.ranges:
                if _item_ranges:
                    _items.append(_item_ranges.to_dict())
            _dict['ranges'] = _items
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        # override the default output from pydantic by calling `to_dict()` of spellcheck
        if self.spellcheck:
            _dict['spellcheck'] = self.spellcheck.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stats (list)
        _items = []
        if self.stats:
            for _item_stats in self.stats:
                if _item_stats:
                    _items.append(_item_stats.to_dict())
            _dict['stats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in templates (list)
        _items = []
        if self.templates:
            for _item_templates in self.templates:
                if _item_templates:
                    _items.append(_item_templates.to_dict())
            _dict['templates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaults": RequestDefaults.from_dict(obj["defaults"]) if obj.get("defaults") is not None else None,
            "facetFields": RequestFacetFields.from_dict(obj["facetFields"]) if obj.get("facetFields") is not None else None,
            "facetIntervals": RequestFacetIntervals.from_dict(obj["facetIntervals"]) if obj.get("facetIntervals") is not None else None,
            "facetQueries": [RequestFacetQueriesInner.from_dict(_item) for _item in obj["facetQueries"]] if obj.get("facetQueries") is not None else None,
            "fields": obj.get("fields"),
            "filterQueries": [RequestFilterQueriesInner.from_dict(_item) for _item in obj["filterQueries"]] if obj.get("filterQueries") is not None else None,
            "highlight": RequestHighlight.from_dict(obj["highlight"]) if obj.get("highlight") is not None else None,
            "include": obj.get("include"),
            "includeRequest": obj.get("includeRequest") if obj.get("includeRequest") is not None else False,
            "limits": RequestLimits.from_dict(obj["limits"]) if obj.get("limits") is not None else None,
            "localization": RequestLocalization.from_dict(obj["localization"]) if obj.get("localization") is not None else None,
            "paging": RequestPagination.from_dict(obj["paging"]) if obj.get("paging") is not None else None,
            "pivots": [RequestPivot.from_dict(_item) for _item in obj["pivots"]] if obj.get("pivots") is not None else None,
            "query": RequestQuery.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "ranges": [RequestRange.from_dict(_item) for _item in obj["ranges"]] if obj.get("ranges") is not None else None,
            "scope": RequestScope.from_dict(obj["scope"]) if obj.get("scope") is not None else None,
            "sort": [RequestSortDefinitionInner.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "spellcheck": RequestSpellcheck.from_dict(obj["spellcheck"]) if obj.get("spellcheck") is not None else None,
            "stats": [RequestStats.from_dict(_item) for _item in obj["stats"]] if obj.get("stats") is not None else None,
            "templates": [RequestTemplatesInner.from_dict(_item) for _item in obj["templates"]] if obj.get("templates") is not None else None
        })
        return _obj


