# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RequestDefaults(BaseModel):
    """
    Common query defaults
    """ # noqa: E501
    default_fts_field_operator: Optional[StrictStr] = Field(default='AND', description="The default way to combine query parts in field query groups when AND or OR is not explicitly stated - includes ! - + FIELD:(one two three) ", alias="defaultFTSFieldOperator")
    default_fts_operator: Optional[StrictStr] = Field(default='AND', description="The default way to combine query parts when AND or OR is not explicitly stated - includes ! - + one two three (one two three) ", alias="defaultFTSOperator")
    default_field_name: Optional[StrictStr] = Field(default='TEXT', alias="defaultFieldName")
    namespace: Optional[StrictStr] = Field(default='cm', description="The default name space to use if one is not provided")
    text_attributes: Optional[List[StrictStr]] = Field(default=None, description="A list of query fields/properties used to expand TEXT: queries. The default is cm:content. You could include all content properties using d:content or list all individual content properties or types. As more terms are included the query size, complexity, memory impact and query time will increase. ", alias="textAttributes")
    __properties: ClassVar[List[str]] = ["defaultFTSFieldOperator", "defaultFTSOperator", "defaultFieldName", "namespace", "textAttributes"]

    @field_validator('default_fts_field_operator')
    def default_fts_field_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    @field_validator('default_fts_operator')
    def default_fts_operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestDefaults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestDefaults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultFTSFieldOperator": obj.get("defaultFTSFieldOperator") if obj.get("defaultFTSFieldOperator") is not None else 'AND',
            "defaultFTSOperator": obj.get("defaultFTSOperator") if obj.get("defaultFTSOperator") is not None else 'AND',
            "defaultFieldName": obj.get("defaultFieldName") if obj.get("defaultFieldName") is not None else 'TEXT',
            "namespace": obj.get("namespace") if obj.get("namespace") is not None else 'cm',
            "textAttributes": obj.get("textAttributes")
        })
        return _obj


