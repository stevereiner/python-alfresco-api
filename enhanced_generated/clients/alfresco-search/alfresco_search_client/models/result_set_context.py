# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_search_client.models.generic_facet_response import GenericFacetResponse
from alfresco_search_client.models.response_consistency import ResponseConsistency
from alfresco_search_client.models.result_buckets import ResultBuckets
from alfresco_search_client.models.result_set_context_facet_queries_inner import ResultSetContextFacetQueriesInner
from alfresco_search_client.models.result_set_context_spellcheck_inner import ResultSetContextSpellcheckInner
from alfresco_search_client.models.search_request import SearchRequest
from typing import Optional, Set
from typing_extensions import Self

class ResultSetContext(BaseModel):
    """
    Context that applies to the whole result set
    """ # noqa: E501
    consistency: Optional[ResponseConsistency] = None
    facet_queries: Optional[List[ResultSetContextFacetQueriesInner]] = Field(default=None, description="The counts from facet queries", alias="facetQueries")
    facets: Optional[List[GenericFacetResponse]] = Field(default=None, description="The faceted response")
    facets_fields: Optional[List[ResultBuckets]] = Field(default=None, description="The counts from field facets", alias="facetsFields")
    request: Optional[SearchRequest] = None
    spellcheck: Optional[List[ResultSetContextSpellcheckInner]] = Field(default=None, description="Suggested corrections  If zero results were found for the original query then a single entry of type \"searchInsteadFor\" will be returned. If alternatives were found that return more results than the original query they are returned as \"didYouMean\" options. The highest quality suggestion is first. ")
    __properties: ClassVar[List[str]] = ["consistency", "facetQueries", "facets", "facetsFields", "request", "spellcheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultSetContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consistency
        if self.consistency:
            _dict['consistency'] = self.consistency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facet_queries (list)
        _items = []
        if self.facet_queries:
            for _item_facet_queries in self.facet_queries:
                if _item_facet_queries:
                    _items.append(_item_facet_queries.to_dict())
            _dict['facetQueries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facets_fields (list)
        _items = []
        if self.facets_fields:
            for _item_facets_fields in self.facets_fields:
                if _item_facets_fields:
                    _items.append(_item_facets_fields.to_dict())
            _dict['facetsFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in spellcheck (list)
        _items = []
        if self.spellcheck:
            for _item_spellcheck in self.spellcheck:
                if _item_spellcheck:
                    _items.append(_item_spellcheck.to_dict())
            _dict['spellcheck'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultSetContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consistency": ResponseConsistency.from_dict(obj["consistency"]) if obj.get("consistency") is not None else None,
            "facetQueries": [ResultSetContextFacetQueriesInner.from_dict(_item) for _item in obj["facetQueries"]] if obj.get("facetQueries") is not None else None,
            "facets": [GenericFacetResponse.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "facetsFields": [ResultBuckets.from_dict(_item) for _item in obj["facetsFields"]] if obj.get("facetsFields") is not None else None,
            "request": SearchRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "spellcheck": [ResultSetContextSpellcheckInner.from_dict(_item) for _item in obj["spellcheck"]] if obj.get("spellcheck") is not None else None
        })
        return _obj


