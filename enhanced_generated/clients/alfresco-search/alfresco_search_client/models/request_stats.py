# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RequestStats(BaseModel):
    """
    A list of stats request.
    """ # noqa: E501
    cardinality: Optional[StrictBool] = Field(default=False, description="A statistical approximation of the number of distinct values")
    cardinality_accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.", alias="cardinalityAccuracy")
    count_distinct: Optional[StrictBool] = Field(default=False, description="The number of distinct values  (This can be very expensive to calculate)", alias="countDistinct")
    count_values: Optional[StrictBool] = Field(default=True, description="The number which have a value for this field", alias="countValues")
    distinct_values: Optional[StrictBool] = Field(default=False, description="The set of all distinct values for the field (This can be very expensive to calculate)", alias="distinctValues")
    exclude_filters: Optional[List[StrictStr]] = Field(default=None, description="A list of filters to exclude", alias="excludeFilters")
    var_field: Optional[StrictStr] = Field(default=None, description="The stats field", alias="field")
    label: Optional[StrictStr] = Field(default=None, description="A label to include for reference the stats field")
    max: Optional[StrictBool] = Field(default=True, description="The maximum value of the field")
    mean: Optional[StrictBool] = Field(default=True, description="The average")
    min: Optional[StrictBool] = Field(default=True, description="The minimum value of the field")
    missing: Optional[StrictBool] = Field(default=True, description="The number which do not have a value for this field")
    percentiles: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="A list of percentile values, e.g. \"1,99,99.9\"")
    stddev: Optional[StrictBool] = Field(default=True, description="Standard deviation")
    sum: Optional[StrictBool] = Field(default=True, description="The sum of all values of the field")
    sum_of_squares: Optional[StrictBool] = Field(default=True, description="Sum of all values squared", alias="sumOfSquares")
    __properties: ClassVar[List[str]] = ["cardinality", "cardinalityAccuracy", "countDistinct", "countValues", "distinctValues", "excludeFilters", "field", "label", "max", "mean", "min", "missing", "percentiles", "stddev", "sum", "sumOfSquares"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardinality": obj.get("cardinality") if obj.get("cardinality") is not None else False,
            "cardinalityAccuracy": obj.get("cardinalityAccuracy") if obj.get("cardinalityAccuracy") is not None else 0.3,
            "countDistinct": obj.get("countDistinct") if obj.get("countDistinct") is not None else False,
            "countValues": obj.get("countValues") if obj.get("countValues") is not None else True,
            "distinctValues": obj.get("distinctValues") if obj.get("distinctValues") is not None else False,
            "excludeFilters": obj.get("excludeFilters"),
            "field": obj.get("field"),
            "label": obj.get("label"),
            "max": obj.get("max") if obj.get("max") is not None else True,
            "mean": obj.get("mean") if obj.get("mean") is not None else True,
            "min": obj.get("min") if obj.get("min") is not None else True,
            "missing": obj.get("missing") if obj.get("missing") is not None else True,
            "percentiles": obj.get("percentiles"),
            "stddev": obj.get("stddev") if obj.get("stddev") is not None else True,
            "sum": obj.get("sum") if obj.get("sum") is not None else True,
            "sumOfSquares": obj.get("sumOfSquares") if obj.get("sumOfSquares") is not None else True
        })
        return _obj


