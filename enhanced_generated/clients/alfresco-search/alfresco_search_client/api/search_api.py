# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from alfresco_search_client.models.result_set_paging import ResultSetPaging
from alfresco_search_client.models.search_request import SearchRequest

from alfresco_search_client.api_client import ApiClient, RequestSerialized
from alfresco_search_client.api_response import ApiResponse
from alfresco_search_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search(
        self,
        search_request: Annotated[SearchRequest, Field(description="Generic query API ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultSetPaging:
        """Searches Alfresco

        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  ```JSON {   \"query\": {     \"query\": \"foo\"   } } ```  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  ```JSON {   \"query\": {     \"query\": \"select * from cmis:folder\",     \"language\": \"cmis\"   } } ```  By default, **results are limited to the first 100.** Results can be restricted using \"paging\". For example: ```JSON \"paging\": {   \"maxItems\": \"50\",   \"skipCount\": \"28\" } ``` This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, ```JSON \"limits\": {   \"permissionEvaluationTime\": 20000,   \"permissionEvaluationCount\": 2000 } ```  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"include\": [\"aspectNames\", \"properties\", \"isLink\"] ```  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"fields\": [\"id\", \"name\", \"search\"] ```  You can sort the results using the **sort JSON body parameter**, for example: ```JSON \"sort\": [{\"type\":\"FIELD\", \"field\":\"cm:description\", \"ascending\":\"true\"}] ``` **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\"nodes\" location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example: ```JSON \"scope\": {     \"locations\": [\"deleted-nodes\"] } ``` You can specify templates using the **templates JSON body parameter**, for example: ```JSON \"templates\": [{\"name\": \"_PERSON\",\"template\": \"|%firstName OR |%lastName OR |%userName\"},               {\"name\": \"mytemplate\",\"template\": \"%cm:content\"}] ```  **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**  For **spell checking** you can use a query like this: ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\"   },   \"spellcheck\": {\"query\": \"alfrezco\"} } ```  If you are already specifying \"userQuery\" then the following may be easier and produces the same result : ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\",     \"userQuery\": \"alfrezco\"   },   \"spellcheck\": {} } ```  The spellcheck response includes a spellCheck context like this: ```JSON \"context\": {   \"spellCheck\": {     \"type\": \"searchInsteadFor\",     \"suggestions\": [\"alfresco\"]   } }, ```  To specify defaults, you  use a **defaults JSON body parameter**, for example: ```JSON \"defaults\": {   \"textAttributes\": [     \"cm:content\", \"cm:name\"   ],   \"defaultFTSOperator\": \"AND\",   \"defaultFTSFieldOperator\": \"OR\",   \"namespace\": \"cm\",   \"defaultFieldName\": \"PATH\" } ```  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: ```JSON \"filterQueries\": [{\"query\": \"TYPE:'cm:folder'\"},{\"query\": \"cm:creator:mjackson\"}] ```  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: ```JSON \"facetQueries\": [{\"query\": \"created:2016\",\"label\": \"CreatedThisYear\"}] ``` The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     {\"label\": \"CreatedThisYear\",\"count\": 3}   ] }, ```  A complete query for facetting via the content.size field looks this: ```JSON {   \"query\": {     \"query\": \"presentation\",     \"language\": \"afts\"   },     \"facetQueries\": [         {\"query\": \"content.size:[0 TO 10240]\", \"label\": \"xtra small\"},         {\"query\": \"content.size:[10240 TO 102400]\", \"label\": \"small\"},         {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\"},         {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\"},         {\"query\": \"content.size:[16777216 TO 134217728]\", \"label\": \"xtra large\"},         {\"query\": \"content.size:[134217728 TO MAX]\", \"label\": \"XX large\"}   ],     \"facetFields\": {\"facets\": [{\"field\": \"'content.size'\"}]} } ```  The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     { \"label\": \"small\",\"count\": 2 },     { \"label\": \"large\",\"count\": 0 },     { \"label\": \"xtra small\",\"count\": 5 },     { \"label\": \"xtra large\",\"count\": 56},     { \"label\": \"medium\",\"count\": 4 },     { \"label\": \"XX large\", \"count\": 1 }   ] }, ```  You can specify several facet fields using the **facetFields JSON body parameter**, for example: ```JSON \"facetFields\": {\"facets\": [{\"field\": \"creator\", \"mincount\": 1}, {\"field\": \"modifier\", \"mincount\": 1}]} ``` The response will contain a matching \"context\" section, the \"label\" will match the facet field. ```JSON \"context\": {    \"facetsFields\": [      {  \"label\": \"creator\",         \"buckets\": [           { \"label\": \"System\", \"count\": 75 },           { \"label\": \"mjackson\", \"count\": 5 }         ]},      {  \"label\": \"modifier\",         \"buckets\": [           { \"label\": \"System\", \"count\": 72 },           { \"label\": \"mjackson\", \"count\": 5 },           { \"label\": \"admin\", \"count\": 3 }         ]}    ] }, ```  Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"facetQueries\": [             {\"query\": \"content.size:[0 TO 102400]\", \"label\": \"small\", \"group\":\"foo\"},             {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\",\"group\":\"foo\"},             {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\",\"group\":\"foo\"}         ]     } ``` The above query returns the results a faceted field grouped under the label foo: ```JSON {     \"context\": {\"facetsFields\": [{         \"label\": \"foo\",         \"buckets\": [             {                 \"count\": 109,                 \"label\": \"small\",                 \"filterQuery\": \"content.size:[0 TO 102400]\"             },             {                 \"count\": 0,                 \"label\": \"large\",                 \"filterQuery\": \"content.size:[1048576 TO 16777216]\"             },             {                 \"count\": 0,                 \"label\": \"medium\",                 \"filterQuery\": \"content.size:[102400 TO 1048576]\"             }         ]     }] } ``` Range Faceting is supported by the **ranges JSON body parameter**, for example: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"ranges\": [         {             \"field\": \"content.size\",              \"start\": \"0\",              \"end\": \"100\",              \"gap\": \"20\",              \"hardend\": true         },         {             \"field\": \"created\",             \"start\": \"2015-09-29T10:45:15.729Z\",             \"end\": \"2016-09-29T10:45:15.729Z\",             \"gap\": \"+100DAY\"         }]     } ``` An example query for **search highlighting** could look like this: ```JSON {   \"query\": {     \"query\": \"description:workflow\",     \"userQuery\":\"workflow\"   },   \"highlight\": {     \"prefix\": \"¿\",     \"postfix\": \"?\",     \"mergeContiguous\": true,     \"fields\": [       {         \"field\": \"cm:title\"       },       {         \"field\": \"description\",         \"prefix\": \"(\",         \"postfix\": \")\"       }      ]   } } ``` The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the \"description\" field to (). The hightlight information is added in each node entry response; here is an example partial response: ``` \"entry\": {         \"createdAt\": \"2016-10-12T15:24:31.202+0000\",         \"isFolder\": true,         \"search\": {           \"score\": 1,           \"highlight\": [             {               \"field\": \"cm:title\",               \"snippets\": [                 \"Customized ¿Workflow? Process Definitions\"               ]             },             {               \"field\": \"description\",               \"snippets\": [                 \"Customized (Workflow) Process Definitions\"               ]             }           ]       }, ``` **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265). 

        :param search_request: Generic query API  (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultSetPaging",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_with_http_info(
        self,
        search_request: Annotated[SearchRequest, Field(description="Generic query API ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultSetPaging]:
        """Searches Alfresco

        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  ```JSON {   \"query\": {     \"query\": \"foo\"   } } ```  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  ```JSON {   \"query\": {     \"query\": \"select * from cmis:folder\",     \"language\": \"cmis\"   } } ```  By default, **results are limited to the first 100.** Results can be restricted using \"paging\". For example: ```JSON \"paging\": {   \"maxItems\": \"50\",   \"skipCount\": \"28\" } ``` This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, ```JSON \"limits\": {   \"permissionEvaluationTime\": 20000,   \"permissionEvaluationCount\": 2000 } ```  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"include\": [\"aspectNames\", \"properties\", \"isLink\"] ```  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"fields\": [\"id\", \"name\", \"search\"] ```  You can sort the results using the **sort JSON body parameter**, for example: ```JSON \"sort\": [{\"type\":\"FIELD\", \"field\":\"cm:description\", \"ascending\":\"true\"}] ``` **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\"nodes\" location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example: ```JSON \"scope\": {     \"locations\": [\"deleted-nodes\"] } ``` You can specify templates using the **templates JSON body parameter**, for example: ```JSON \"templates\": [{\"name\": \"_PERSON\",\"template\": \"|%firstName OR |%lastName OR |%userName\"},               {\"name\": \"mytemplate\",\"template\": \"%cm:content\"}] ```  **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**  For **spell checking** you can use a query like this: ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\"   },   \"spellcheck\": {\"query\": \"alfrezco\"} } ```  If you are already specifying \"userQuery\" then the following may be easier and produces the same result : ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\",     \"userQuery\": \"alfrezco\"   },   \"spellcheck\": {} } ```  The spellcheck response includes a spellCheck context like this: ```JSON \"context\": {   \"spellCheck\": {     \"type\": \"searchInsteadFor\",     \"suggestions\": [\"alfresco\"]   } }, ```  To specify defaults, you  use a **defaults JSON body parameter**, for example: ```JSON \"defaults\": {   \"textAttributes\": [     \"cm:content\", \"cm:name\"   ],   \"defaultFTSOperator\": \"AND\",   \"defaultFTSFieldOperator\": \"OR\",   \"namespace\": \"cm\",   \"defaultFieldName\": \"PATH\" } ```  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: ```JSON \"filterQueries\": [{\"query\": \"TYPE:'cm:folder'\"},{\"query\": \"cm:creator:mjackson\"}] ```  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: ```JSON \"facetQueries\": [{\"query\": \"created:2016\",\"label\": \"CreatedThisYear\"}] ``` The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     {\"label\": \"CreatedThisYear\",\"count\": 3}   ] }, ```  A complete query for facetting via the content.size field looks this: ```JSON {   \"query\": {     \"query\": \"presentation\",     \"language\": \"afts\"   },     \"facetQueries\": [         {\"query\": \"content.size:[0 TO 10240]\", \"label\": \"xtra small\"},         {\"query\": \"content.size:[10240 TO 102400]\", \"label\": \"small\"},         {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\"},         {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\"},         {\"query\": \"content.size:[16777216 TO 134217728]\", \"label\": \"xtra large\"},         {\"query\": \"content.size:[134217728 TO MAX]\", \"label\": \"XX large\"}   ],     \"facetFields\": {\"facets\": [{\"field\": \"'content.size'\"}]} } ```  The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     { \"label\": \"small\",\"count\": 2 },     { \"label\": \"large\",\"count\": 0 },     { \"label\": \"xtra small\",\"count\": 5 },     { \"label\": \"xtra large\",\"count\": 56},     { \"label\": \"medium\",\"count\": 4 },     { \"label\": \"XX large\", \"count\": 1 }   ] }, ```  You can specify several facet fields using the **facetFields JSON body parameter**, for example: ```JSON \"facetFields\": {\"facets\": [{\"field\": \"creator\", \"mincount\": 1}, {\"field\": \"modifier\", \"mincount\": 1}]} ``` The response will contain a matching \"context\" section, the \"label\" will match the facet field. ```JSON \"context\": {    \"facetsFields\": [      {  \"label\": \"creator\",         \"buckets\": [           { \"label\": \"System\", \"count\": 75 },           { \"label\": \"mjackson\", \"count\": 5 }         ]},      {  \"label\": \"modifier\",         \"buckets\": [           { \"label\": \"System\", \"count\": 72 },           { \"label\": \"mjackson\", \"count\": 5 },           { \"label\": \"admin\", \"count\": 3 }         ]}    ] }, ```  Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"facetQueries\": [             {\"query\": \"content.size:[0 TO 102400]\", \"label\": \"small\", \"group\":\"foo\"},             {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\",\"group\":\"foo\"},             {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\",\"group\":\"foo\"}         ]     } ``` The above query returns the results a faceted field grouped under the label foo: ```JSON {     \"context\": {\"facetsFields\": [{         \"label\": \"foo\",         \"buckets\": [             {                 \"count\": 109,                 \"label\": \"small\",                 \"filterQuery\": \"content.size:[0 TO 102400]\"             },             {                 \"count\": 0,                 \"label\": \"large\",                 \"filterQuery\": \"content.size:[1048576 TO 16777216]\"             },             {                 \"count\": 0,                 \"label\": \"medium\",                 \"filterQuery\": \"content.size:[102400 TO 1048576]\"             }         ]     }] } ``` Range Faceting is supported by the **ranges JSON body parameter**, for example: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"ranges\": [         {             \"field\": \"content.size\",              \"start\": \"0\",              \"end\": \"100\",              \"gap\": \"20\",              \"hardend\": true         },         {             \"field\": \"created\",             \"start\": \"2015-09-29T10:45:15.729Z\",             \"end\": \"2016-09-29T10:45:15.729Z\",             \"gap\": \"+100DAY\"         }]     } ``` An example query for **search highlighting** could look like this: ```JSON {   \"query\": {     \"query\": \"description:workflow\",     \"userQuery\":\"workflow\"   },   \"highlight\": {     \"prefix\": \"¿\",     \"postfix\": \"?\",     \"mergeContiguous\": true,     \"fields\": [       {         \"field\": \"cm:title\"       },       {         \"field\": \"description\",         \"prefix\": \"(\",         \"postfix\": \")\"       }      ]   } } ``` The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the \"description\" field to (). The hightlight information is added in each node entry response; here is an example partial response: ``` \"entry\": {         \"createdAt\": \"2016-10-12T15:24:31.202+0000\",         \"isFolder\": true,         \"search\": {           \"score\": 1,           \"highlight\": [             {               \"field\": \"cm:title\",               \"snippets\": [                 \"Customized ¿Workflow? Process Definitions\"               ]             },             {               \"field\": \"description\",               \"snippets\": [                 \"Customized (Workflow) Process Definitions\"               ]             }           ]       }, ``` **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265). 

        :param search_request: Generic query API  (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultSetPaging",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_without_preload_content(
        self,
        search_request: Annotated[SearchRequest, Field(description="Generic query API ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Searches Alfresco

        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  ```JSON {   \"query\": {     \"query\": \"foo\"   } } ```  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  ```JSON {   \"query\": {     \"query\": \"select * from cmis:folder\",     \"language\": \"cmis\"   } } ```  By default, **results are limited to the first 100.** Results can be restricted using \"paging\". For example: ```JSON \"paging\": {   \"maxItems\": \"50\",   \"skipCount\": \"28\" } ``` This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, ```JSON \"limits\": {   \"permissionEvaluationTime\": 20000,   \"permissionEvaluationCount\": 2000 } ```  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"include\": [\"aspectNames\", \"properties\", \"isLink\"] ```  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"fields\": [\"id\", \"name\", \"search\"] ```  You can sort the results using the **sort JSON body parameter**, for example: ```JSON \"sort\": [{\"type\":\"FIELD\", \"field\":\"cm:description\", \"ascending\":\"true\"}] ``` **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\"nodes\" location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example: ```JSON \"scope\": {     \"locations\": [\"deleted-nodes\"] } ``` You can specify templates using the **templates JSON body parameter**, for example: ```JSON \"templates\": [{\"name\": \"_PERSON\",\"template\": \"|%firstName OR |%lastName OR |%userName\"},               {\"name\": \"mytemplate\",\"template\": \"%cm:content\"}] ```  **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**  For **spell checking** you can use a query like this: ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\"   },   \"spellcheck\": {\"query\": \"alfrezco\"} } ```  If you are already specifying \"userQuery\" then the following may be easier and produces the same result : ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\",     \"userQuery\": \"alfrezco\"   },   \"spellcheck\": {} } ```  The spellcheck response includes a spellCheck context like this: ```JSON \"context\": {   \"spellCheck\": {     \"type\": \"searchInsteadFor\",     \"suggestions\": [\"alfresco\"]   } }, ```  To specify defaults, you  use a **defaults JSON body parameter**, for example: ```JSON \"defaults\": {   \"textAttributes\": [     \"cm:content\", \"cm:name\"   ],   \"defaultFTSOperator\": \"AND\",   \"defaultFTSFieldOperator\": \"OR\",   \"namespace\": \"cm\",   \"defaultFieldName\": \"PATH\" } ```  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: ```JSON \"filterQueries\": [{\"query\": \"TYPE:'cm:folder'\"},{\"query\": \"cm:creator:mjackson\"}] ```  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: ```JSON \"facetQueries\": [{\"query\": \"created:2016\",\"label\": \"CreatedThisYear\"}] ``` The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     {\"label\": \"CreatedThisYear\",\"count\": 3}   ] }, ```  A complete query for facetting via the content.size field looks this: ```JSON {   \"query\": {     \"query\": \"presentation\",     \"language\": \"afts\"   },     \"facetQueries\": [         {\"query\": \"content.size:[0 TO 10240]\", \"label\": \"xtra small\"},         {\"query\": \"content.size:[10240 TO 102400]\", \"label\": \"small\"},         {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\"},         {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\"},         {\"query\": \"content.size:[16777216 TO 134217728]\", \"label\": \"xtra large\"},         {\"query\": \"content.size:[134217728 TO MAX]\", \"label\": \"XX large\"}   ],     \"facetFields\": {\"facets\": [{\"field\": \"'content.size'\"}]} } ```  The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     { \"label\": \"small\",\"count\": 2 },     { \"label\": \"large\",\"count\": 0 },     { \"label\": \"xtra small\",\"count\": 5 },     { \"label\": \"xtra large\",\"count\": 56},     { \"label\": \"medium\",\"count\": 4 },     { \"label\": \"XX large\", \"count\": 1 }   ] }, ```  You can specify several facet fields using the **facetFields JSON body parameter**, for example: ```JSON \"facetFields\": {\"facets\": [{\"field\": \"creator\", \"mincount\": 1}, {\"field\": \"modifier\", \"mincount\": 1}]} ``` The response will contain a matching \"context\" section, the \"label\" will match the facet field. ```JSON \"context\": {    \"facetsFields\": [      {  \"label\": \"creator\",         \"buckets\": [           { \"label\": \"System\", \"count\": 75 },           { \"label\": \"mjackson\", \"count\": 5 }         ]},      {  \"label\": \"modifier\",         \"buckets\": [           { \"label\": \"System\", \"count\": 72 },           { \"label\": \"mjackson\", \"count\": 5 },           { \"label\": \"admin\", \"count\": 3 }         ]}    ] }, ```  Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"facetQueries\": [             {\"query\": \"content.size:[0 TO 102400]\", \"label\": \"small\", \"group\":\"foo\"},             {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\",\"group\":\"foo\"},             {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\",\"group\":\"foo\"}         ]     } ``` The above query returns the results a faceted field grouped under the label foo: ```JSON {     \"context\": {\"facetsFields\": [{         \"label\": \"foo\",         \"buckets\": [             {                 \"count\": 109,                 \"label\": \"small\",                 \"filterQuery\": \"content.size:[0 TO 102400]\"             },             {                 \"count\": 0,                 \"label\": \"large\",                 \"filterQuery\": \"content.size:[1048576 TO 16777216]\"             },             {                 \"count\": 0,                 \"label\": \"medium\",                 \"filterQuery\": \"content.size:[102400 TO 1048576]\"             }         ]     }] } ``` Range Faceting is supported by the **ranges JSON body parameter**, for example: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"ranges\": [         {             \"field\": \"content.size\",              \"start\": \"0\",              \"end\": \"100\",              \"gap\": \"20\",              \"hardend\": true         },         {             \"field\": \"created\",             \"start\": \"2015-09-29T10:45:15.729Z\",             \"end\": \"2016-09-29T10:45:15.729Z\",             \"gap\": \"+100DAY\"         }]     } ``` An example query for **search highlighting** could look like this: ```JSON {   \"query\": {     \"query\": \"description:workflow\",     \"userQuery\":\"workflow\"   },   \"highlight\": {     \"prefix\": \"¿\",     \"postfix\": \"?\",     \"mergeContiguous\": true,     \"fields\": [       {         \"field\": \"cm:title\"       },       {         \"field\": \"description\",         \"prefix\": \"(\",         \"postfix\": \")\"       }      ]   } } ``` The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the \"description\" field to (). The hightlight information is added in each node entry response; here is an example partial response: ``` \"entry\": {         \"createdAt\": \"2016-10-12T15:24:31.202+0000\",         \"isFolder\": true,         \"search\": {           \"score\": 1,           \"highlight\": [             {               \"field\": \"cm:title\",               \"snippets\": [                 \"Customized ¿Workflow? Process Definitions\"               ]             },             {               \"field\": \"description\",               \"snippets\": [                 \"Customized (Workflow) Process Definitions\"               ]             }           ]       }, ``` **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265). 

        :param search_request: Generic query API  (required)
        :type search_request: SearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            search_request=search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultSetPaging",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_serialize(
        self,
        search_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if search_request is not None:
            _body_params = search_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


