# coding: utf-8

"""
    Alfresco Content Services REST API

    **Model API**  Provides access to the model features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from alfresco_model_client.models.aspect_entry import AspectEntry
from alfresco_model_client.models.aspect_paging import AspectPaging

from alfresco_model_client.api_client import ApiClient, RequestSerialized
from alfresco_model_client.api_response import ApiResponse
from alfresco_model_client.rest import RESTResponseType


class AspectsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_aspect(
        self,
        aspect_id: Annotated[StrictStr, Field(description="The Qname of an aspect(`prefix:name`) e.g 'cm:title'")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AspectEntry:
        """Get an aspect

        **Note:** This is available in Alfresco 7.0.0 and newer versions. Get information for aspect **aspectId**. 

        :param aspect_id: The Qname of an aspect(`prefix:name`) e.g 'cm:title' (required)
        :type aspect_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aspect_serialize(
            aspect_id=aspect_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectEntry",
            '400': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_aspect_with_http_info(
        self,
        aspect_id: Annotated[StrictStr, Field(description="The Qname of an aspect(`prefix:name`) e.g 'cm:title'")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AspectEntry]:
        """Get an aspect

        **Note:** This is available in Alfresco 7.0.0 and newer versions. Get information for aspect **aspectId**. 

        :param aspect_id: The Qname of an aspect(`prefix:name`) e.g 'cm:title' (required)
        :type aspect_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aspect_serialize(
            aspect_id=aspect_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectEntry",
            '400': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_aspect_without_preload_content(
        self,
        aspect_id: Annotated[StrictStr, Field(description="The Qname of an aspect(`prefix:name`) e.g 'cm:title'")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an aspect

        **Note:** This is available in Alfresco 7.0.0 and newer versions. Get information for aspect **aspectId**. 

        :param aspect_id: The Qname of an aspect(`prefix:name`) e.g 'cm:title' (required)
        :type aspect_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_aspect_serialize(
            aspect_id=aspect_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectEntry",
            '400': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_aspect_serialize(
        self,
        aspect_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if aspect_id is not None:
            _path_params['aspectId'] = aspect_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aspects/{aspectId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_aspects(
        self,
        where: Annotated[Optional[StrictStr], Field(description="Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` ")] = None,
        skip_count: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. ")] = None,
        max_items: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The maximum number of items to return in the list. If not supplied then the default value is 100. ")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AspectPaging:
        """List aspects

        **Note:** This is available in Alfresco 7.0.0 and newer versions.  Gets a list of aspects from the data dictionary. The System aspects will be ignored by default. ```JSON {   \"list\": {     \"pagination\": {       \"count\": 0,       \"hasMoreItems\": true,       \"totalItems\": 0,       \"skipCount\": 0,       \"maxItems\": 0     },     \"entries\": [       {         \"entry\": {           \"associations\": [],           \"mandatoryAspects\": [],           \"includedInSupertypeQuery\": true,           \"description\": \"Titled\",           \"isContainer\": false,           \"model\": {               \"id\": \"cm:contentmodel\",               \"author\": \"Alfresco\",               \"description\": \"Alfresco Content Domain Model\",               \"namespaceUri\": \"http://www.alfresco.org/model/content/1.0\",               \"namespacePrefix\": \"cm\"           },           \"id\": \"cm:titled\",           \"title\": \"Titled\",           \"properties\": [             {               \"id\": \"cm:title\",               \"title\": \"Title\",               \"description\": \"Content Title\",               \"dataType\": \"d:mltext\",               \"isMultiValued\": false,               \"isMandatory\": false,               \"isMandatoryEnforced\": false,               \"isProtected\": false             },             {               ...             }           ]         }       },       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       },     ]   } } ``` 

        :param where: Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` 
        :type where: str
        :param skip_count: The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
        :type skip_count: int
        :param max_items: The maximum number of items to return in the list. If not supplied then the default value is 100. 
        :type max_items: int
        :param include: Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations 
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_aspects_serialize(
            where=where,
            skip_count=skip_count,
            max_items=max_items,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectPaging",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_aspects_with_http_info(
        self,
        where: Annotated[Optional[StrictStr], Field(description="Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` ")] = None,
        skip_count: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. ")] = None,
        max_items: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The maximum number of items to return in the list. If not supplied then the default value is 100. ")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AspectPaging]:
        """List aspects

        **Note:** This is available in Alfresco 7.0.0 and newer versions.  Gets a list of aspects from the data dictionary. The System aspects will be ignored by default. ```JSON {   \"list\": {     \"pagination\": {       \"count\": 0,       \"hasMoreItems\": true,       \"totalItems\": 0,       \"skipCount\": 0,       \"maxItems\": 0     },     \"entries\": [       {         \"entry\": {           \"associations\": [],           \"mandatoryAspects\": [],           \"includedInSupertypeQuery\": true,           \"description\": \"Titled\",           \"isContainer\": false,           \"model\": {               \"id\": \"cm:contentmodel\",               \"author\": \"Alfresco\",               \"description\": \"Alfresco Content Domain Model\",               \"namespaceUri\": \"http://www.alfresco.org/model/content/1.0\",               \"namespacePrefix\": \"cm\"           },           \"id\": \"cm:titled\",           \"title\": \"Titled\",           \"properties\": [             {               \"id\": \"cm:title\",               \"title\": \"Title\",               \"description\": \"Content Title\",               \"dataType\": \"d:mltext\",               \"isMultiValued\": false,               \"isMandatory\": false,               \"isMandatoryEnforced\": false,               \"isProtected\": false             },             {               ...             }           ]         }       },       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       },     ]   } } ``` 

        :param where: Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` 
        :type where: str
        :param skip_count: The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
        :type skip_count: int
        :param max_items: The maximum number of items to return in the list. If not supplied then the default value is 100. 
        :type max_items: int
        :param include: Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations 
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_aspects_serialize(
            where=where,
            skip_count=skip_count,
            max_items=max_items,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectPaging",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_aspects_without_preload_content(
        self,
        where: Annotated[Optional[StrictStr], Field(description="Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` ")] = None,
        skip_count: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. ")] = None,
        max_items: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The maximum number of items to return in the list. If not supplied then the default value is 100. ")] = None,
        include: Annotated[Optional[List[StrictStr]], Field(description="Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List aspects

        **Note:** This is available in Alfresco 7.0.0 and newer versions.  Gets a list of aspects from the data dictionary. The System aspects will be ignored by default. ```JSON {   \"list\": {     \"pagination\": {       \"count\": 0,       \"hasMoreItems\": true,       \"totalItems\": 0,       \"skipCount\": 0,       \"maxItems\": 0     },     \"entries\": [       {         \"entry\": {           \"associations\": [],           \"mandatoryAspects\": [],           \"includedInSupertypeQuery\": true,           \"description\": \"Titled\",           \"isContainer\": false,           \"model\": {               \"id\": \"cm:contentmodel\",               \"author\": \"Alfresco\",               \"description\": \"Alfresco Content Domain Model\",               \"namespaceUri\": \"http://www.alfresco.org/model/content/1.0\",               \"namespacePrefix\": \"cm\"           },           \"id\": \"cm:titled\",           \"title\": \"Titled\",           \"properties\": [             {               \"id\": \"cm:title\",               \"title\": \"Title\",               \"description\": \"Content Title\",               \"dataType\": \"d:mltext\",               \"isMultiValued\": false,               \"isMandatory\": false,               \"isMandatoryEnforced\": false,               \"isProtected\": false             },             {               ...             }           ]         }       },       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       },     ]   } } ``` 

        :param where: Optionally filter the list. Here are some examples:  An aspect should represented in the following format(`prefix:name`). e.g 'cm:title'.  The following where clause will only return aspects from the `namespace1:model` and `namespace2:model`.   ```   where=(modelId in ('namespace1:model','namespace2:model'))   where=(modelId in ('namespace1:model INCLUDESUBASPECTS','namespace2:model'))   ```  The following where clause will only return sub aspects for the given parents.   ```   where=(parentId in ('namespace1:parent','namespace2:parent'))   ```  The following where clause will only return aspects that match the pattern.   ```   where=(namespaceUri matches('http://www.alfresco.*'))   ```  The following where clause will only return aspects that don't match the pattern.   ```   where=(not namespaceUri matches('http://www.alfresco.*'))   ``` 
        :type where: str
        :param skip_count: The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
        :type skip_count: int
        :param max_items: The maximum number of items to return in the list. If not supplied then the default value is 100. 
        :type max_items: int
        :param include: Returns additional information about the aspect. The following optional fields can be requested: * properties * mandatoryAspects * associations 
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_aspects_serialize(
            where=where,
            skip_count=skip_count,
            max_items=max_items,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AspectPaging",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_aspects_serialize(
        self,
        where,
        skip_count,
        max_items,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if where is not None:
            
            _query_params.append(('where', where))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/aspects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


