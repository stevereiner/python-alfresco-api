# coding: utf-8

"""
    Alfresco Content Services REST API

    **Model API**  Provides access to the model features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_model_client.models.abstract_class_association import AbstractClassAssociation
from alfresco_model_client.models.model import Model
from alfresco_model_client.models.model_property import ModelProperty
from typing import Optional, Set
from typing_extensions import Self

class AbstractClass(BaseModel):
    """
    AbstractClass
    """ # noqa: E501
    associations: Optional[List[AbstractClassAssociation]] = None
    description: Optional[StrictStr] = None
    id: StrictStr
    included_in_supertype_query: Optional[StrictBool] = Field(default=None, alias="includedInSupertypeQuery")
    is_archive: Optional[StrictBool] = Field(default=None, alias="isArchive")
    is_container: Optional[StrictBool] = Field(default=None, alias="isContainer")
    mandatory_aspects: Optional[List[StrictStr]] = Field(default=None, alias="mandatoryAspects")
    model: Optional[Model] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    properties: Optional[List[ModelProperty]] = None
    title: StrictStr
    __properties: ClassVar[List[str]] = ["associations", "description", "id", "includedInSupertypeQuery", "isArchive", "isContainer", "mandatoryAspects", "model", "parentId", "properties", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AbstractClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associations (list)
        _items = []
        if self.associations:
            for _item_associations in self.associations:
                if _item_associations:
                    _items.append(_item_associations.to_dict())
            _dict['associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AbstractClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associations": [AbstractClassAssociation.from_dict(_item) for _item in obj["associations"]] if obj.get("associations") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "includedInSupertypeQuery": obj.get("includedInSupertypeQuery"),
            "isArchive": obj.get("isArchive"),
            "isContainer": obj.get("isContainer"),
            "mandatoryAspects": obj.get("mandatoryAspects"),
            "model": Model.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "parentId": obj.get("parentId"),
            "properties": [ModelProperty.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "title": obj.get("title")
        })
        return _obj


