# coding: utf-8

"""
    Alfresco Content Services REST API

    **Model API**  Provides access to the model features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Pagination(BaseModel):
    """
    Pagination
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="The number of objects in the entries array. ")
    has_more_items: Optional[StrictBool] = Field(default=None, description="A boolean value which is **true** if there are more entities in the collection beyond those in this response. A true value means a request with a larger value for the **skipCount** or the **maxItems** parameter will return more entities. ", alias="hasMoreItems")
    max_items: Optional[StrictInt] = Field(default=None, description="The value of the **maxItems** parameter used to generate this list. If there was no **maxItems** parameter then the default value is 100. ", alias="maxItems")
    skip_count: Optional[StrictInt] = Field(default=None, description="An integer describing how many entities exist in the collection before those included in this list. If there was no **skipCount** parameter then the default value is 0. ", alias="skipCount")
    total_items: Optional[StrictInt] = Field(default=None, description="An integer describing the total number of entities in the collection. The API might not be able to determine this value, in which case this property will not be present. ", alias="totalItems")
    __properties: ClassVar[List[str]] = ["count", "hasMoreItems", "maxItems", "skipCount", "totalItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "hasMoreItems": obj.get("hasMoreItems"),
            "maxItems": obj.get("maxItems"),
            "skipCount": obj.get("skipCount"),
            "totalItems": obj.get("totalItems")
        })
        return _obj


