# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search(self, body, **kwargs):  # noqa: E501
        """Searches Alfresco  # noqa: E501

        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  ```JSON {   \"query\": {     \"query\": \"foo\"   } } ```  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  ```JSON {   \"query\": {     \"query\": \"select * from cmis:folder\",     \"language\": \"cmis\"   } } ```  By default, **results are limited to the first 100.** Results can be restricted using \"paging\". For example: ```JSON \"paging\": {   \"maxItems\": \"50\",   \"skipCount\": \"28\" } ``` This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, ```JSON \"limits\": {   \"permissionEvaluationTime\": 20000,   \"permissionEvaluationCount\": 2000 } ```  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"include\": [\"aspectNames\", \"properties\", \"isLink\"] ```  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"fields\": [\"id\", \"name\", \"search\"] ```  You can sort the results using the **sort JSON body parameter**, for example: ```JSON \"sort\": [{\"type\":\"FIELD\", \"field\":\"cm:description\", \"ascending\":\"true\"}] ``` **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\"nodes\" location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example: ```JSON \"scope\": {     \"locations\": [\"deleted-nodes\"] } ``` You can specify templates using the **templates JSON body parameter**, for example: ```JSON \"templates\": [{\"name\": \"_PERSON\",\"template\": \"|%firstName OR |%lastName OR |%userName\"},               {\"name\": \"mytemplate\",\"template\": \"%cm:content\"}] ```  **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**  For **spell checking** you can use a query like this: ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\"   },   \"spellcheck\": {\"query\": \"alfrezco\"} } ```  If you are already specifying \"userQuery\" then the following may be easier and produces the same result : ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\",     \"userQuery\": \"alfrezco\"   },   \"spellcheck\": {} } ```  The spellcheck response includes a spellCheck context like this: ```JSON \"context\": {   \"spellCheck\": {     \"type\": \"searchInsteadFor\",     \"suggestions\": [\"alfresco\"]   } }, ```  To specify defaults, you  use a **defaults JSON body parameter**, for example: ```JSON \"defaults\": {   \"textAttributes\": [     \"cm:content\", \"cm:name\"   ],   \"defaultFTSOperator\": \"AND\",   \"defaultFTSFieldOperator\": \"OR\",   \"namespace\": \"cm\",   \"defaultFieldName\": \"PATH\" } ```  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: ```JSON \"filterQueries\": [{\"query\": \"TYPE:'cm:folder'\"},{\"query\": \"cm:creator:mjackson\"}] ```  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: ```JSON \"facetQueries\": [{\"query\": \"created:2016\",\"label\": \"CreatedThisYear\"}] ``` The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     {\"label\": \"CreatedThisYear\",\"count\": 3}   ] }, ```  A complete query for facetting via the content.size field looks this: ```JSON {   \"query\": {     \"query\": \"presentation\",     \"language\": \"afts\"   },     \"facetQueries\": [         {\"query\": \"content.size:[0 TO 10240]\", \"label\": \"xtra small\"},         {\"query\": \"content.size:[10240 TO 102400]\", \"label\": \"small\"},         {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\"},         {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\"},         {\"query\": \"content.size:[16777216 TO 134217728]\", \"label\": \"xtra large\"},         {\"query\": \"content.size:[134217728 TO MAX]\", \"label\": \"XX large\"}   ],     \"facetFields\": {\"facets\": [{\"field\": \"'content.size'\"}]} } ```  The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     { \"label\": \"small\",\"count\": 2 },     { \"label\": \"large\",\"count\": 0 },     { \"label\": \"xtra small\",\"count\": 5 },     { \"label\": \"xtra large\",\"count\": 56},     { \"label\": \"medium\",\"count\": 4 },     { \"label\": \"XX large\", \"count\": 1 }   ] }, ```  You can specify several facet fields using the **facetFields JSON body parameter**, for example: ```JSON \"facetFields\": {\"facets\": [{\"field\": \"creator\", \"mincount\": 1}, {\"field\": \"modifier\", \"mincount\": 1}]} ``` The response will contain a matching \"context\" section, the \"label\" will match the facet field. ```JSON \"context\": {    \"facetsFields\": [      {  \"label\": \"creator\",         \"buckets\": [           { \"label\": \"System\", \"count\": 75 },           { \"label\": \"mjackson\", \"count\": 5 }         ]},      {  \"label\": \"modifier\",         \"buckets\": [           { \"label\": \"System\", \"count\": 72 },           { \"label\": \"mjackson\", \"count\": 5 },           { \"label\": \"admin\", \"count\": 3 }         ]}    ] }, ```  Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"facetQueries\": [             {\"query\": \"content.size:[0 TO 102400]\", \"label\": \"small\", \"group\":\"foo\"},             {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\",\"group\":\"foo\"},             {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\",\"group\":\"foo\"}         ]     } ``` The above query returns the results a faceted field grouped under the label foo: ```JSON {     \"context\": {\"facetsFields\": [{         \"label\": \"foo\",         \"buckets\": [             {                 \"count\": 109,                 \"label\": \"small\",                 \"filterQuery\": \"content.size:[0 TO 102400]\"             },             {                 \"count\": 0,                 \"label\": \"large\",                 \"filterQuery\": \"content.size:[1048576 TO 16777216]\"             },             {                 \"count\": 0,                 \"label\": \"medium\",                 \"filterQuery\": \"content.size:[102400 TO 1048576]\"             }         ]     }] } ``` Range Faceting is supported by the **ranges JSON body parameter**, for example: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"ranges\": [         {             \"field\": \"content.size\",              \"start\": \"0\",              \"end\": \"100\",              \"gap\": \"20\",              \"hardend\": true         },         {             \"field\": \"created\",             \"start\": \"2015-09-29T10:45:15.729Z\",             \"end\": \"2016-09-29T10:45:15.729Z\",             \"gap\": \"+100DAY\"         }]     } ``` An example query for **search highlighting** could look like this: ```JSON {   \"query\": {     \"query\": \"description:workflow\",     \"userQuery\":\"workflow\"   },   \"highlight\": {     \"prefix\": \"¿\",     \"postfix\": \"?\",     \"mergeContiguous\": true,     \"fields\": [       {         \"field\": \"cm:title\"       },       {         \"field\": \"description\",         \"prefix\": \"(\",         \"postfix\": \")\"       }      ]   } } ``` The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the \"description\" field to (). The hightlight information is added in each node entry response; here is an example partial response: ``` \"entry\": {         \"createdAt\": \"2016-10-12T15:24:31.202+0000\",         \"isFolder\": true,         \"search\": {           \"score\": 1,           \"highlight\": [             {               \"field\": \"cm:title\",               \"snippets\": [                 \"Customized ¿Workflow? Process Definitions\"               ]             },             {               \"field\": \"description\",               \"snippets\": [                 \"Customized (Workflow) Process Definitions\"               ]             }           ]       }, ``` **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Generic query API
 (required)
        :return: ResultSetPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def search_with_http_info(self, body, **kwargs):  # noqa: E501
        """Searches Alfresco  # noqa: E501

        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.  **You specify all the parameters in this API in a JSON body**, URL parameters are not supported. A basic query looks like this:  ```JSON {   \"query\": {     \"query\": \"foo\"   } } ```  **Note:** These are the minimum possible query parameters.  The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.  A basic CMIS query looks like this:  ```JSON {   \"query\": {     \"query\": \"select * from cmis:folder\",     \"language\": \"cmis\"   } } ```  By default, **results are limited to the first 100.** Results can be restricted using \"paging\". For example: ```JSON \"paging\": {   \"maxItems\": \"50\",   \"skipCount\": \"28\" } ``` This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.  Alternatively, you can limit the results by using the **limits JSON body parameter**. For example, ```JSON \"limits\": {   \"permissionEvaluationTime\": 20000,   \"permissionEvaluationCount\": 2000 } ```  You can use the **include JSON body parameter** to return additional information. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"include\": [\"aspectNames\", \"properties\", \"isLink\"] ```  You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth. This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example: ```JSON \"fields\": [\"id\", \"name\", \"search\"] ```  You can sort the results using the **sort JSON body parameter**, for example: ```JSON \"sort\": [{\"type\":\"FIELD\", \"field\":\"cm:description\", \"ascending\":\"true\"}] ``` **Note:** the **sort** parameter is not supported for CMIS queries.  By default, search uses the **\"nodes\" location**, which is the **content store known as workspace://SpacesStore**. To change the scope to another location you can use the **locations JSON body parameter**. You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example: ```JSON \"scope\": {     \"locations\": [\"deleted-nodes\"] } ``` You can specify templates using the **templates JSON body parameter**, for example: ```JSON \"templates\": [{\"name\": \"_PERSON\",\"template\": \"|%firstName OR |%lastName OR |%userName\"},               {\"name\": \"mytemplate\",\"template\": \"%cm:content\"}] ```  **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**  For **spell checking** you can use a query like this: ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\"   },   \"spellcheck\": {\"query\": \"alfrezco\"} } ```  If you are already specifying \"userQuery\" then the following may be easier and produces the same result : ```JSON {   \"query\": {     \"query\": \"cm:title:alfrezco\",     \"userQuery\": \"alfrezco\"   },   \"spellcheck\": {} } ```  The spellcheck response includes a spellCheck context like this: ```JSON \"context\": {   \"spellCheck\": {     \"type\": \"searchInsteadFor\",     \"suggestions\": [\"alfresco\"]   } }, ```  To specify defaults, you  use a **defaults JSON body parameter**, for example: ```JSON \"defaults\": {   \"textAttributes\": [     \"cm:content\", \"cm:name\"   ],   \"defaultFTSOperator\": \"AND\",   \"defaultFTSFieldOperator\": \"OR\",   \"namespace\": \"cm\",   \"defaultFieldName\": \"PATH\" } ```  You can specify several filter queries using the **filterQueries JSON body parameter**, for example: ```JSON \"filterQueries\": [{\"query\": \"TYPE:'cm:folder'\"},{\"query\": \"cm:creator:mjackson\"}] ```  You can specify several facet queries using the **facetQueries JSON body parameter**, for example: ```JSON \"facetQueries\": [{\"query\": \"created:2016\",\"label\": \"CreatedThisYear\"}] ``` The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     {\"label\": \"CreatedThisYear\",\"count\": 3}   ] }, ```  A complete query for facetting via the content.size field looks this: ```JSON {   \"query\": {     \"query\": \"presentation\",     \"language\": \"afts\"   },     \"facetQueries\": [         {\"query\": \"content.size:[0 TO 10240]\", \"label\": \"xtra small\"},         {\"query\": \"content.size:[10240 TO 102400]\", \"label\": \"small\"},         {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\"},         {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\"},         {\"query\": \"content.size:[16777216 TO 134217728]\", \"label\": \"xtra large\"},         {\"query\": \"content.size:[134217728 TO MAX]\", \"label\": \"XX large\"}   ],     \"facetFields\": {\"facets\": [{\"field\": \"'content.size'\"}]} } ```  The response will contain a matching \"context\" section, the \"label\" will match the facet query. ```JSON \"context\": {   \"facetQueries\": [     { \"label\": \"small\",\"count\": 2 },     { \"label\": \"large\",\"count\": 0 },     { \"label\": \"xtra small\",\"count\": 5 },     { \"label\": \"xtra large\",\"count\": 56},     { \"label\": \"medium\",\"count\": 4 },     { \"label\": \"XX large\", \"count\": 1 }   ] }, ```  You can specify several facet fields using the **facetFields JSON body parameter**, for example: ```JSON \"facetFields\": {\"facets\": [{\"field\": \"creator\", \"mincount\": 1}, {\"field\": \"modifier\", \"mincount\": 1}]} ``` The response will contain a matching \"context\" section, the \"label\" will match the facet field. ```JSON \"context\": {    \"facetsFields\": [      {  \"label\": \"creator\",         \"buckets\": [           { \"label\": \"System\", \"count\": 75 },           { \"label\": \"mjackson\", \"count\": 5 }         ]},      {  \"label\": \"modifier\",         \"buckets\": [           { \"label\": \"System\", \"count\": 72 },           { \"label\": \"mjackson\", \"count\": 5 },           { \"label\": \"admin\", \"count\": 3 }         ]}    ] }, ```  Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"facetQueries\": [             {\"query\": \"content.size:[0 TO 102400]\", \"label\": \"small\", \"group\":\"foo\"},             {\"query\": \"content.size:[102400 TO 1048576]\", \"label\": \"medium\",\"group\":\"foo\"},             {\"query\": \"content.size:[1048576 TO 16777216]\", \"label\": \"large\",\"group\":\"foo\"}         ]     } ``` The above query returns the results a faceted field grouped under the label foo: ```JSON {     \"context\": {\"facetsFields\": [{         \"label\": \"foo\",         \"buckets\": [             {                 \"count\": 109,                 \"label\": \"small\",                 \"filterQuery\": \"content.size:[0 TO 102400]\"             },             {                 \"count\": 0,                 \"label\": \"large\",                 \"filterQuery\": \"content.size:[1048576 TO 16777216]\"             },             {                 \"count\": 0,                 \"label\": \"medium\",                 \"filterQuery\": \"content.size:[102400 TO 1048576]\"             }         ]     }] } ``` Range Faceting is supported by the **ranges JSON body parameter**, for example: ```JSON     {         \"query\": {             \"query\": \"presentation\"         },         \"ranges\": [         {             \"field\": \"content.size\",              \"start\": \"0\",              \"end\": \"100\",              \"gap\": \"20\",              \"hardend\": true         },         {             \"field\": \"created\",             \"start\": \"2015-09-29T10:45:15.729Z\",             \"end\": \"2016-09-29T10:45:15.729Z\",             \"gap\": \"+100DAY\"         }]     } ``` An example query for **search highlighting** could look like this: ```JSON {   \"query\": {     \"query\": \"description:workflow\",     \"userQuery\":\"workflow\"   },   \"highlight\": {     \"prefix\": \"¿\",     \"postfix\": \"?\",     \"mergeContiguous\": true,     \"fields\": [       {         \"field\": \"cm:title\"       },       {         \"field\": \"description\",         \"prefix\": \"(\",         \"postfix\": \")\"       }      ]   } } ``` The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the \"description\" field to (). The hightlight information is added in each node entry response; here is an example partial response: ``` \"entry\": {         \"createdAt\": \"2016-10-12T15:24:31.202+0000\",         \"isFolder\": true,         \"search\": {           \"score\": 1,           \"highlight\": [             {               \"field\": \"cm:title\",               \"snippets\": [                 \"Customized ¿Workflow? Process Definitions\"               ]             },             {               \"field\": \"description\",               \"snippets\": [                 \"Customized (Workflow) Process Definitions\"               ]             }           ]       }, ``` **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Generic query API
 (required)
        :return: ResultSetPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultSetPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
