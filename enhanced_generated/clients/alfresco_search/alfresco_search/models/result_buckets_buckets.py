# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultBucketsBuckets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'display': 'object',
        'filter_query': 'str',
        'label': 'str'
    }

    attribute_map = {
        'count': 'count',
        'display': 'display',
        'filter_query': 'filterQuery',
        'label': 'label'
    }

    def __init__(self, count=None, display=None, filter_query=None, label=None):  # noqa: E501
        """ResultBucketsBuckets - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._display = None
        self._filter_query = None
        self._label = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if display is not None:
            self.display = display
        if filter_query is not None:
            self.filter_query = filter_query
        if label is not None:
            self.label = label

    @property
    def count(self):
        """Gets the count of this ResultBucketsBuckets.  # noqa: E501

        The count for the bucket  # noqa: E501

        :return: The count of this ResultBucketsBuckets.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ResultBucketsBuckets.

        The count for the bucket  # noqa: E501

        :param count: The count of this ResultBucketsBuckets.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def display(self):
        """Gets the display of this ResultBucketsBuckets.  # noqa: E501

        An optional field for additional display information  # noqa: E501

        :return: The display of this ResultBucketsBuckets.  # noqa: E501
        :rtype: object
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ResultBucketsBuckets.

        An optional field for additional display information  # noqa: E501

        :param display: The display of this ResultBucketsBuckets.  # noqa: E501
        :type: object
        """

        self._display = display

    @property
    def filter_query(self):
        """Gets the filter_query of this ResultBucketsBuckets.  # noqa: E501

        The filter query you can use to apply this facet  # noqa: E501

        :return: The filter_query of this ResultBucketsBuckets.  # noqa: E501
        :rtype: str
        """
        return self._filter_query

    @filter_query.setter
    def filter_query(self, filter_query):
        """Sets the filter_query of this ResultBucketsBuckets.

        The filter query you can use to apply this facet  # noqa: E501

        :param filter_query: The filter_query of this ResultBucketsBuckets.  # noqa: E501
        :type: str
        """

        self._filter_query = filter_query

    @property
    def label(self):
        """Gets the label of this ResultBucketsBuckets.  # noqa: E501

        The bucket label  # noqa: E501

        :return: The label of this ResultBucketsBuckets.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ResultBucketsBuckets.

        The bucket label  # noqa: E501

        :param label: The label of this ResultBucketsBuckets.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultBucketsBuckets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultBucketsBuckets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
