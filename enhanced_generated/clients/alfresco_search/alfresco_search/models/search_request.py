# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'defaults': 'RequestDefaults',
        'facet_fields': 'RequestFacetFields',
        'facet_intervals': 'RequestFacetIntervals',
        'facet_queries': 'RequestFacetQueries',
        'fields': 'RequestFields',
        'filter_queries': 'RequestFilterQueries',
        'highlight': 'RequestHighlight',
        'include': 'RequestInclude',
        'include_request': 'bool',
        'limits': 'RequestLimits',
        'localization': 'RequestLocalization',
        'paging': 'RequestPagination',
        'pivots': 'list[RequestPivot]',
        'query': 'RequestQuery',
        'ranges': 'list[RequestRange]',
        'scope': 'RequestScope',
        'sort': 'RequestSortDefinition',
        'spellcheck': 'RequestSpellcheck',
        'stats': 'list[RequestStats]',
        'templates': 'RequestTemplates'
    }

    attribute_map = {
        'defaults': 'defaults',
        'facet_fields': 'facetFields',
        'facet_intervals': 'facetIntervals',
        'facet_queries': 'facetQueries',
        'fields': 'fields',
        'filter_queries': 'filterQueries',
        'highlight': 'highlight',
        'include': 'include',
        'include_request': 'includeRequest',
        'limits': 'limits',
        'localization': 'localization',
        'paging': 'paging',
        'pivots': 'pivots',
        'query': 'query',
        'ranges': 'ranges',
        'scope': 'scope',
        'sort': 'sort',
        'spellcheck': 'spellcheck',
        'stats': 'stats',
        'templates': 'templates'
    }

    def __init__(self, defaults=None, facet_fields=None, facet_intervals=None, facet_queries=None, fields=None, filter_queries=None, highlight=None, include=None, include_request=False, limits=None, localization=None, paging=None, pivots=None, query=None, ranges=None, scope=None, sort=None, spellcheck=None, stats=None, templates=None):  # noqa: E501
        """SearchRequest - a model defined in Swagger"""  # noqa: E501
        self._defaults = None
        self._facet_fields = None
        self._facet_intervals = None
        self._facet_queries = None
        self._fields = None
        self._filter_queries = None
        self._highlight = None
        self._include = None
        self._include_request = None
        self._limits = None
        self._localization = None
        self._paging = None
        self._pivots = None
        self._query = None
        self._ranges = None
        self._scope = None
        self._sort = None
        self._spellcheck = None
        self._stats = None
        self._templates = None
        self.discriminator = None
        if defaults is not None:
            self.defaults = defaults
        if facet_fields is not None:
            self.facet_fields = facet_fields
        if facet_intervals is not None:
            self.facet_intervals = facet_intervals
        if facet_queries is not None:
            self.facet_queries = facet_queries
        if fields is not None:
            self.fields = fields
        if filter_queries is not None:
            self.filter_queries = filter_queries
        if highlight is not None:
            self.highlight = highlight
        if include is not None:
            self.include = include
        if include_request is not None:
            self.include_request = include_request
        if limits is not None:
            self.limits = limits
        if localization is not None:
            self.localization = localization
        if paging is not None:
            self.paging = paging
        if pivots is not None:
            self.pivots = pivots
        self.query = query
        if ranges is not None:
            self.ranges = ranges
        if scope is not None:
            self.scope = scope
        if sort is not None:
            self.sort = sort
        if spellcheck is not None:
            self.spellcheck = spellcheck
        if stats is not None:
            self.stats = stats
        if templates is not None:
            self.templates = templates

    @property
    def defaults(self):
        """Gets the defaults of this SearchRequest.  # noqa: E501


        :return: The defaults of this SearchRequest.  # noqa: E501
        :rtype: RequestDefaults
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this SearchRequest.


        :param defaults: The defaults of this SearchRequest.  # noqa: E501
        :type: RequestDefaults
        """

        self._defaults = defaults

    @property
    def facet_fields(self):
        """Gets the facet_fields of this SearchRequest.  # noqa: E501


        :return: The facet_fields of this SearchRequest.  # noqa: E501
        :rtype: RequestFacetFields
        """
        return self._facet_fields

    @facet_fields.setter
    def facet_fields(self, facet_fields):
        """Sets the facet_fields of this SearchRequest.


        :param facet_fields: The facet_fields of this SearchRequest.  # noqa: E501
        :type: RequestFacetFields
        """

        self._facet_fields = facet_fields

    @property
    def facet_intervals(self):
        """Gets the facet_intervals of this SearchRequest.  # noqa: E501


        :return: The facet_intervals of this SearchRequest.  # noqa: E501
        :rtype: RequestFacetIntervals
        """
        return self._facet_intervals

    @facet_intervals.setter
    def facet_intervals(self, facet_intervals):
        """Sets the facet_intervals of this SearchRequest.


        :param facet_intervals: The facet_intervals of this SearchRequest.  # noqa: E501
        :type: RequestFacetIntervals
        """

        self._facet_intervals = facet_intervals

    @property
    def facet_queries(self):
        """Gets the facet_queries of this SearchRequest.  # noqa: E501


        :return: The facet_queries of this SearchRequest.  # noqa: E501
        :rtype: RequestFacetQueries
        """
        return self._facet_queries

    @facet_queries.setter
    def facet_queries(self, facet_queries):
        """Sets the facet_queries of this SearchRequest.


        :param facet_queries: The facet_queries of this SearchRequest.  # noqa: E501
        :type: RequestFacetQueries
        """

        self._facet_queries = facet_queries

    @property
    def fields(self):
        """Gets the fields of this SearchRequest.  # noqa: E501


        :return: The fields of this SearchRequest.  # noqa: E501
        :rtype: RequestFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchRequest.


        :param fields: The fields of this SearchRequest.  # noqa: E501
        :type: RequestFields
        """

        self._fields = fields

    @property
    def filter_queries(self):
        """Gets the filter_queries of this SearchRequest.  # noqa: E501


        :return: The filter_queries of this SearchRequest.  # noqa: E501
        :rtype: RequestFilterQueries
        """
        return self._filter_queries

    @filter_queries.setter
    def filter_queries(self, filter_queries):
        """Sets the filter_queries of this SearchRequest.


        :param filter_queries: The filter_queries of this SearchRequest.  # noqa: E501
        :type: RequestFilterQueries
        """

        self._filter_queries = filter_queries

    @property
    def highlight(self):
        """Gets the highlight of this SearchRequest.  # noqa: E501


        :return: The highlight of this SearchRequest.  # noqa: E501
        :rtype: RequestHighlight
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this SearchRequest.


        :param highlight: The highlight of this SearchRequest.  # noqa: E501
        :type: RequestHighlight
        """

        self._highlight = highlight

    @property
    def include(self):
        """Gets the include of this SearchRequest.  # noqa: E501


        :return: The include of this SearchRequest.  # noqa: E501
        :rtype: RequestInclude
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this SearchRequest.


        :param include: The include of this SearchRequest.  # noqa: E501
        :type: RequestInclude
        """

        self._include = include

    @property
    def include_request(self):
        """Gets the include_request of this SearchRequest.  # noqa: E501

        When true, include the original request in the response  # noqa: E501

        :return: The include_request of this SearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_request

    @include_request.setter
    def include_request(self, include_request):
        """Sets the include_request of this SearchRequest.

        When true, include the original request in the response  # noqa: E501

        :param include_request: The include_request of this SearchRequest.  # noqa: E501
        :type: bool
        """

        self._include_request = include_request

    @property
    def limits(self):
        """Gets the limits of this SearchRequest.  # noqa: E501


        :return: The limits of this SearchRequest.  # noqa: E501
        :rtype: RequestLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this SearchRequest.


        :param limits: The limits of this SearchRequest.  # noqa: E501
        :type: RequestLimits
        """

        self._limits = limits

    @property
    def localization(self):
        """Gets the localization of this SearchRequest.  # noqa: E501


        :return: The localization of this SearchRequest.  # noqa: E501
        :rtype: RequestLocalization
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this SearchRequest.


        :param localization: The localization of this SearchRequest.  # noqa: E501
        :type: RequestLocalization
        """

        self._localization = localization

    @property
    def paging(self):
        """Gets the paging of this SearchRequest.  # noqa: E501


        :return: The paging of this SearchRequest.  # noqa: E501
        :rtype: RequestPagination
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this SearchRequest.


        :param paging: The paging of this SearchRequest.  # noqa: E501
        :type: RequestPagination
        """

        self._paging = paging

    @property
    def pivots(self):
        """Gets the pivots of this SearchRequest.  # noqa: E501


        :return: The pivots of this SearchRequest.  # noqa: E501
        :rtype: list[RequestPivot]
        """
        return self._pivots

    @pivots.setter
    def pivots(self, pivots):
        """Sets the pivots of this SearchRequest.


        :param pivots: The pivots of this SearchRequest.  # noqa: E501
        :type: list[RequestPivot]
        """

        self._pivots = pivots

    @property
    def query(self):
        """Gets the query of this SearchRequest.  # noqa: E501


        :return: The query of this SearchRequest.  # noqa: E501
        :rtype: RequestQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.


        :param query: The query of this SearchRequest.  # noqa: E501
        :type: RequestQuery
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def ranges(self):
        """Gets the ranges of this SearchRequest.  # noqa: E501


        :return: The ranges of this SearchRequest.  # noqa: E501
        :rtype: list[RequestRange]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this SearchRequest.


        :param ranges: The ranges of this SearchRequest.  # noqa: E501
        :type: list[RequestRange]
        """

        self._ranges = ranges

    @property
    def scope(self):
        """Gets the scope of this SearchRequest.  # noqa: E501


        :return: The scope of this SearchRequest.  # noqa: E501
        :rtype: RequestScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SearchRequest.


        :param scope: The scope of this SearchRequest.  # noqa: E501
        :type: RequestScope
        """

        self._scope = scope

    @property
    def sort(self):
        """Gets the sort of this SearchRequest.  # noqa: E501


        :return: The sort of this SearchRequest.  # noqa: E501
        :rtype: RequestSortDefinition
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchRequest.


        :param sort: The sort of this SearchRequest.  # noqa: E501
        :type: RequestSortDefinition
        """

        self._sort = sort

    @property
    def spellcheck(self):
        """Gets the spellcheck of this SearchRequest.  # noqa: E501


        :return: The spellcheck of this SearchRequest.  # noqa: E501
        :rtype: RequestSpellcheck
        """
        return self._spellcheck

    @spellcheck.setter
    def spellcheck(self, spellcheck):
        """Sets the spellcheck of this SearchRequest.


        :param spellcheck: The spellcheck of this SearchRequest.  # noqa: E501
        :type: RequestSpellcheck
        """

        self._spellcheck = spellcheck

    @property
    def stats(self):
        """Gets the stats of this SearchRequest.  # noqa: E501


        :return: The stats of this SearchRequest.  # noqa: E501
        :rtype: list[RequestStats]
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this SearchRequest.


        :param stats: The stats of this SearchRequest.  # noqa: E501
        :type: list[RequestStats]
        """

        self._stats = stats

    @property
    def templates(self):
        """Gets the templates of this SearchRequest.  # noqa: E501


        :return: The templates of this SearchRequest.  # noqa: E501
        :rtype: RequestTemplates
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this SearchRequest.


        :param templates: The templates of this SearchRequest.  # noqa: E501
        :type: RequestTemplates
        """

        self._templates = templates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
