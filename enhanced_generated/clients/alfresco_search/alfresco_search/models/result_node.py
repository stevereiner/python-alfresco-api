# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from .node import Node  # noqa: F401,E501

class ResultNode(Node):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived_at': 'datetime',
        'archived_by_user': 'UserInfo',
        'search': 'SearchEntry',
        'version_comment': 'str',
        'version_label': 'str'
    }
    if hasattr(Node, "swagger_types"):
        swagger_types.update(Node.swagger_types)

    attribute_map = {
        'archived_at': 'archivedAt',
        'archived_by_user': 'archivedByUser',
        'search': 'search',
        'version_comment': 'versionComment',
        'version_label': 'versionLabel'
    }
    if hasattr(Node, "attribute_map"):
        attribute_map.update(Node.attribute_map)

    def __init__(self, archived_at=None, archived_by_user=None, search=None, version_comment=None, version_label=None, *args, **kwargs):  # noqa: E501
        """ResultNode - a model defined in Swagger"""  # noqa: E501
        self._archived_at = None
        self._archived_by_user = None
        self._search = None
        self._version_comment = None
        self._version_label = None
        self.discriminator = None
        if archived_at is not None:
            self.archived_at = archived_at
        if archived_by_user is not None:
            self.archived_by_user = archived_by_user
        if search is not None:
            self.search = search
        if version_comment is not None:
            self.version_comment = version_comment
        if version_label is not None:
            self.version_label = version_label
        Node.__init__(self, *args, **kwargs)

    @property
    def archived_at(self):
        """Gets the archived_at of this ResultNode.  # noqa: E501


        :return: The archived_at of this ResultNode.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this ResultNode.


        :param archived_at: The archived_at of this ResultNode.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def archived_by_user(self):
        """Gets the archived_by_user of this ResultNode.  # noqa: E501


        :return: The archived_by_user of this ResultNode.  # noqa: E501
        :rtype: UserInfo
        """
        return self._archived_by_user

    @archived_by_user.setter
    def archived_by_user(self, archived_by_user):
        """Sets the archived_by_user of this ResultNode.


        :param archived_by_user: The archived_by_user of this ResultNode.  # noqa: E501
        :type: UserInfo
        """

        self._archived_by_user = archived_by_user

    @property
    def search(self):
        """Gets the search of this ResultNode.  # noqa: E501


        :return: The search of this ResultNode.  # noqa: E501
        :rtype: SearchEntry
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this ResultNode.


        :param search: The search of this ResultNode.  # noqa: E501
        :type: SearchEntry
        """

        self._search = search

    @property
    def version_comment(self):
        """Gets the version_comment of this ResultNode.  # noqa: E501


        :return: The version_comment of this ResultNode.  # noqa: E501
        :rtype: str
        """
        return self._version_comment

    @version_comment.setter
    def version_comment(self, version_comment):
        """Sets the version_comment of this ResultNode.


        :param version_comment: The version_comment of this ResultNode.  # noqa: E501
        :type: str
        """

        self._version_comment = version_comment

    @property
    def version_label(self):
        """Gets the version_label of this ResultNode.  # noqa: E501


        :return: The version_label of this ResultNode.  # noqa: E501
        :rtype: str
        """
        return self._version_label

    @version_label.setter
    def version_label(self, version_label):
        """Sets the version_label of this ResultNode.


        :param version_label: The version_label of this ResultNode.  # noqa: E501
        :type: str
        """

        self._version_label = version_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
