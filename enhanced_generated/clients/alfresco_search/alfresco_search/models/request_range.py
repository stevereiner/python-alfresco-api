# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'str',
        'exclude_filters': 'list[str]',
        'field': 'str',
        'gap': 'str',
        'hardend': 'bool',
        'include': 'list[str]',
        'label': 'str',
        'other': 'list[str]',
        'start': 'str'
    }

    attribute_map = {
        'end': 'end',
        'exclude_filters': 'excludeFilters',
        'field': 'field',
        'gap': 'gap',
        'hardend': 'hardend',
        'include': 'include',
        'label': 'label',
        'other': 'other',
        'start': 'start'
    }

    def __init__(self, end=None, exclude_filters=None, field=None, gap=None, hardend=None, include=None, label=None, other=None, start=None):  # noqa: E501
        """RequestRange - a model defined in Swagger"""  # noqa: E501
        self._end = None
        self._exclude_filters = None
        self._field = None
        self._gap = None
        self._hardend = None
        self._include = None
        self._label = None
        self._other = None
        self._start = None
        self.discriminator = None
        if end is not None:
            self.end = end
        if exclude_filters is not None:
            self.exclude_filters = exclude_filters
        if field is not None:
            self.field = field
        if gap is not None:
            self.gap = gap
        if hardend is not None:
            self.hardend = hardend
        if include is not None:
            self.include = include
        if label is not None:
            self.label = label
        if other is not None:
            self.other = other
        if start is not None:
            self.start = start

    @property
    def end(self):
        """Gets the end of this RequestRange.  # noqa: E501

        The end of the range  # noqa: E501

        :return: The end of this RequestRange.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this RequestRange.

        The end of the range  # noqa: E501

        :param end: The end of this RequestRange.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def exclude_filters(self):
        """Gets the exclude_filters of this RequestRange.  # noqa: E501

        Filter queries to exclude when calculating statistics  # noqa: E501

        :return: The exclude_filters of this RequestRange.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_filters

    @exclude_filters.setter
    def exclude_filters(self, exclude_filters):
        """Sets the exclude_filters of this RequestRange.

        Filter queries to exclude when calculating statistics  # noqa: E501

        :param exclude_filters: The exclude_filters of this RequestRange.  # noqa: E501
        :type: list[str]
        """

        self._exclude_filters = exclude_filters

    @property
    def field(self):
        """Gets the field of this RequestRange.  # noqa: E501

        The name of the field to perform range  # noqa: E501

        :return: The field of this RequestRange.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RequestRange.

        The name of the field to perform range  # noqa: E501

        :param field: The field of this RequestRange.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def gap(self):
        """Gets the gap of this RequestRange.  # noqa: E501

        Bucket size  # noqa: E501

        :return: The gap of this RequestRange.  # noqa: E501
        :rtype: str
        """
        return self._gap

    @gap.setter
    def gap(self, gap):
        """Sets the gap of this RequestRange.

        Bucket size  # noqa: E501

        :param gap: The gap of this RequestRange.  # noqa: E501
        :type: str
        """

        self._gap = gap

    @property
    def hardend(self):
        """Gets the hardend of this RequestRange.  # noqa: E501

        If true means that the last bucket will end at “end” even if it is less than “gap” wide.  # noqa: E501

        :return: The hardend of this RequestRange.  # noqa: E501
        :rtype: bool
        """
        return self._hardend

    @hardend.setter
    def hardend(self, hardend):
        """Sets the hardend of this RequestRange.

        If true means that the last bucket will end at “end” even if it is less than “gap” wide.  # noqa: E501

        :param hardend: The hardend of this RequestRange.  # noqa: E501
        :type: bool
        """

        self._hardend = hardend

    @property
    def include(self):
        """Gets the include of this RequestRange.  # noqa: E501

        lower, upper, edge, outer, all  # noqa: E501

        :return: The include of this RequestRange.  # noqa: E501
        :rtype: list[str]
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this RequestRange.

        lower, upper, edge, outer, all  # noqa: E501

        :param include: The include of this RequestRange.  # noqa: E501
        :type: list[str]
        """

        self._include = include

    @property
    def label(self):
        """Gets the label of this RequestRange.  # noqa: E501

        A label to include as a pivot reference  # noqa: E501

        :return: The label of this RequestRange.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RequestRange.

        A label to include as a pivot reference  # noqa: E501

        :param label: The label of this RequestRange.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def other(self):
        """Gets the other of this RequestRange.  # noqa: E501

        before, after, between, non, all  # noqa: E501

        :return: The other of this RequestRange.  # noqa: E501
        :rtype: list[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this RequestRange.

        before, after, between, non, all  # noqa: E501

        :param other: The other of this RequestRange.  # noqa: E501
        :type: list[str]
        """

        self._other = other

    @property
    def start(self):
        """Gets the start of this RequestRange.  # noqa: E501

        The start of the range  # noqa: E501

        :return: The start of this RequestRange.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RequestRange.

        The start of the range  # noqa: E501

        :param start: The start of this RequestRange.  # noqa: E501
        :type: str
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestRange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
