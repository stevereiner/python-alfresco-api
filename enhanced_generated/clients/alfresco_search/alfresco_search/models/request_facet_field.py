# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestFacetField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude_filters': 'list[str]',
        'facet_enum_cache_min_df': 'int',
        'field': 'str',
        'label': 'str',
        'limit': 'int',
        'method': 'str',
        'mincount': 'int',
        'missing': 'bool',
        'offset': 'int',
        'prefix': 'str',
        'sort': 'str'
    }

    attribute_map = {
        'exclude_filters': 'excludeFilters',
        'facet_enum_cache_min_df': 'facetEnumCacheMinDf',
        'field': 'field',
        'label': 'label',
        'limit': 'limit',
        'method': 'method',
        'mincount': 'mincount',
        'missing': 'missing',
        'offset': 'offset',
        'prefix': 'prefix',
        'sort': 'sort'
    }

    def __init__(self, exclude_filters=None, facet_enum_cache_min_df=None, field=None, label=None, limit=None, method=None, mincount=None, missing=False, offset=None, prefix=None, sort=None):  # noqa: E501
        """RequestFacetField - a model defined in Swagger"""  # noqa: E501
        self._exclude_filters = None
        self._facet_enum_cache_min_df = None
        self._field = None
        self._label = None
        self._limit = None
        self._method = None
        self._mincount = None
        self._missing = None
        self._offset = None
        self._prefix = None
        self._sort = None
        self.discriminator = None
        if exclude_filters is not None:
            self.exclude_filters = exclude_filters
        if facet_enum_cache_min_df is not None:
            self.facet_enum_cache_min_df = facet_enum_cache_min_df
        if field is not None:
            self.field = field
        if label is not None:
            self.label = label
        if limit is not None:
            self.limit = limit
        if method is not None:
            self.method = method
        if mincount is not None:
            self.mincount = mincount
        if missing is not None:
            self.missing = missing
        if offset is not None:
            self.offset = offset
        if prefix is not None:
            self.prefix = prefix
        if sort is not None:
            self.sort = sort

    @property
    def exclude_filters(self):
        """Gets the exclude_filters of this RequestFacetField.  # noqa: E501

        Filter Queries with tags listed here will not be included in facet counts. This is used for multi-select facetting.   # noqa: E501

        :return: The exclude_filters of this RequestFacetField.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_filters

    @exclude_filters.setter
    def exclude_filters(self, exclude_filters):
        """Sets the exclude_filters of this RequestFacetField.

        Filter Queries with tags listed here will not be included in facet counts. This is used for multi-select facetting.   # noqa: E501

        :param exclude_filters: The exclude_filters of this RequestFacetField.  # noqa: E501
        :type: list[str]
        """

        self._exclude_filters = exclude_filters

    @property
    def facet_enum_cache_min_df(self):
        """Gets the facet_enum_cache_min_df of this RequestFacetField.  # noqa: E501


        :return: The facet_enum_cache_min_df of this RequestFacetField.  # noqa: E501
        :rtype: int
        """
        return self._facet_enum_cache_min_df

    @facet_enum_cache_min_df.setter
    def facet_enum_cache_min_df(self, facet_enum_cache_min_df):
        """Sets the facet_enum_cache_min_df of this RequestFacetField.


        :param facet_enum_cache_min_df: The facet_enum_cache_min_df of this RequestFacetField.  # noqa: E501
        :type: int
        """

        self._facet_enum_cache_min_df = facet_enum_cache_min_df

    @property
    def field(self):
        """Gets the field of this RequestFacetField.  # noqa: E501

        The facet field  # noqa: E501

        :return: The field of this RequestFacetField.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RequestFacetField.

        The facet field  # noqa: E501

        :param field: The field of this RequestFacetField.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def label(self):
        """Gets the label of this RequestFacetField.  # noqa: E501

        A label to include in place of the facet field  # noqa: E501

        :return: The label of this RequestFacetField.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RequestFacetField.

        A label to include in place of the facet field  # noqa: E501

        :param label: The label of this RequestFacetField.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def limit(self):
        """Gets the limit of this RequestFacetField.  # noqa: E501


        :return: The limit of this RequestFacetField.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this RequestFacetField.


        :param limit: The limit of this RequestFacetField.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def method(self):
        """Gets the method of this RequestFacetField.  # noqa: E501


        :return: The method of this RequestFacetField.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this RequestFacetField.


        :param method: The method of this RequestFacetField.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENUM", "FC"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def mincount(self):
        """Gets the mincount of this RequestFacetField.  # noqa: E501

        The minimum count required for a facet field to be included in the response.  # noqa: E501

        :return: The mincount of this RequestFacetField.  # noqa: E501
        :rtype: int
        """
        return self._mincount

    @mincount.setter
    def mincount(self, mincount):
        """Sets the mincount of this RequestFacetField.

        The minimum count required for a facet field to be included in the response.  # noqa: E501

        :param mincount: The mincount of this RequestFacetField.  # noqa: E501
        :type: int
        """

        self._mincount = mincount

    @property
    def missing(self):
        """Gets the missing of this RequestFacetField.  # noqa: E501

        When true, count results that match the query but which have no facet value for the field (in addition to the Term-based constraints).  # noqa: E501

        :return: The missing of this RequestFacetField.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this RequestFacetField.

        When true, count results that match the query but which have no facet value for the field (in addition to the Term-based constraints).  # noqa: E501

        :param missing: The missing of this RequestFacetField.  # noqa: E501
        :type: bool
        """

        self._missing = missing

    @property
    def offset(self):
        """Gets the offset of this RequestFacetField.  # noqa: E501


        :return: The offset of this RequestFacetField.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this RequestFacetField.


        :param offset: The offset of this RequestFacetField.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def prefix(self):
        """Gets the prefix of this RequestFacetField.  # noqa: E501

        Restricts the possible constraints to only indexed values with a specified prefix.  # noqa: E501

        :return: The prefix of this RequestFacetField.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this RequestFacetField.

        Restricts the possible constraints to only indexed values with a specified prefix.  # noqa: E501

        :param prefix: The prefix of this RequestFacetField.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def sort(self):
        """Gets the sort of this RequestFacetField.  # noqa: E501


        :return: The sort of this RequestFacetField.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this RequestFacetField.


        :param sort: The sort of this RequestFacetField.  # noqa: E501
        :type: str
        """
        allowed_values = ["COUNT", "INDEX"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestFacetField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestFacetField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
