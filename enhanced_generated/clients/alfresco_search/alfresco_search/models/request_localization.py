# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestLocalization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'locales': 'list[str]',
        'timezone': 'str'
    }

    attribute_map = {
        'locales': 'locales',
        'timezone': 'timezone'
    }

    def __init__(self, locales=None, timezone=None):  # noqa: E501
        """RequestLocalization - a model defined in Swagger"""  # noqa: E501
        self._locales = None
        self._timezone = None
        self.discriminator = None
        if locales is not None:
            self.locales = locales
        if timezone is not None:
            self.timezone = timezone

    @property
    def locales(self):
        """Gets the locales of this RequestLocalization.  # noqa: E501

        A list of Locales definied by IETF BCP 47.  The ordering is significant.  The first locale (leftmost) is used for sort and query localization, whereas the remaining locales are used for query only.  # noqa: E501

        :return: The locales of this RequestLocalization.  # noqa: E501
        :rtype: list[str]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this RequestLocalization.

        A list of Locales definied by IETF BCP 47.  The ordering is significant.  The first locale (leftmost) is used for sort and query localization, whereas the remaining locales are used for query only.  # noqa: E501

        :param locales: The locales of this RequestLocalization.  # noqa: E501
        :type: list[str]
        """

        self._locales = locales

    @property
    def timezone(self):
        """Gets the timezone of this RequestLocalization.  # noqa: E501

        A valid timezone id supported by @see java.time.ZoneId  # noqa: E501

        :return: The timezone of this RequestLocalization.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this RequestLocalization.

        A valid timezone id supported by @see java.time.ZoneId  # noqa: E501

        :param timezone: The timezone of this RequestLocalization.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestLocalization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestLocalization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
