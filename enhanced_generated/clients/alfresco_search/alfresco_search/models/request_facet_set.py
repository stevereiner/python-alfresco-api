# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestFacetSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'str',
        'end_inclusive': 'bool',
        'label': 'str',
        'start': 'str',
        'start_inclusive': 'bool'
    }

    attribute_map = {
        'end': 'end',
        'end_inclusive': 'endInclusive',
        'label': 'label',
        'start': 'start',
        'start_inclusive': 'startInclusive'
    }

    def __init__(self, end=None, end_inclusive=True, label=None, start=None, start_inclusive=True):  # noqa: E501
        """RequestFacetSet - a model defined in Swagger"""  # noqa: E501
        self._end = None
        self._end_inclusive = None
        self._label = None
        self._start = None
        self._start_inclusive = None
        self.discriminator = None
        if end is not None:
            self.end = end
        if end_inclusive is not None:
            self.end_inclusive = end_inclusive
        if label is not None:
            self.label = label
        if start is not None:
            self.start = start
        if start_inclusive is not None:
            self.start_inclusive = start_inclusive

    @property
    def end(self):
        """Gets the end of this RequestFacetSet.  # noqa: E501

        The end of the range  # noqa: E501

        :return: The end of this RequestFacetSet.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this RequestFacetSet.

        The end of the range  # noqa: E501

        :param end: The end of this RequestFacetSet.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def end_inclusive(self):
        """Gets the end_inclusive of this RequestFacetSet.  # noqa: E501

        When true, the set will include values less than or equal to \"end\"  # noqa: E501

        :return: The end_inclusive of this RequestFacetSet.  # noqa: E501
        :rtype: bool
        """
        return self._end_inclusive

    @end_inclusive.setter
    def end_inclusive(self, end_inclusive):
        """Sets the end_inclusive of this RequestFacetSet.

        When true, the set will include values less than or equal to \"end\"  # noqa: E501

        :param end_inclusive: The end_inclusive of this RequestFacetSet.  # noqa: E501
        :type: bool
        """

        self._end_inclusive = end_inclusive

    @property
    def label(self):
        """Gets the label of this RequestFacetSet.  # noqa: E501

        A label to use to identify the set  # noqa: E501

        :return: The label of this RequestFacetSet.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RequestFacetSet.

        A label to use to identify the set  # noqa: E501

        :param label: The label of this RequestFacetSet.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def start(self):
        """Gets the start of this RequestFacetSet.  # noqa: E501

        The start of the range  # noqa: E501

        :return: The start of this RequestFacetSet.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this RequestFacetSet.

        The start of the range  # noqa: E501

        :param start: The start of this RequestFacetSet.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def start_inclusive(self):
        """Gets the start_inclusive of this RequestFacetSet.  # noqa: E501

        When true, the set will include values greater or equal to \"start\"  # noqa: E501

        :return: The start_inclusive of this RequestFacetSet.  # noqa: E501
        :rtype: bool
        """
        return self._start_inclusive

    @start_inclusive.setter
    def start_inclusive(self, start_inclusive):
        """Sets the start_inclusive of this RequestFacetSet.

        When true, the set will include values greater or equal to \"start\"  # noqa: E501

        :param start_inclusive: The start_inclusive of this RequestFacetSet.  # noqa: E501
        :type: bool
        """

        self._start_inclusive = start_inclusive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestFacetSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestFacetSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
