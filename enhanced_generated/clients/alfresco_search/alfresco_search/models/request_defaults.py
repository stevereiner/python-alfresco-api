# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestDefaults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_fts_field_operator': 'str',
        'default_fts_operator': 'str',
        'default_field_name': 'str',
        'namespace': 'str',
        'text_attributes': 'list[str]'
    }

    attribute_map = {
        'default_fts_field_operator': 'defaultFTSFieldOperator',
        'default_fts_operator': 'defaultFTSOperator',
        'default_field_name': 'defaultFieldName',
        'namespace': 'namespace',
        'text_attributes': 'textAttributes'
    }

    def __init__(self, default_fts_field_operator='AND', default_fts_operator='AND', default_field_name='TEXT', namespace='cm', text_attributes=None):  # noqa: E501
        """RequestDefaults - a model defined in Swagger"""  # noqa: E501
        self._default_fts_field_operator = None
        self._default_fts_operator = None
        self._default_field_name = None
        self._namespace = None
        self._text_attributes = None
        self.discriminator = None
        if default_fts_field_operator is not None:
            self.default_fts_field_operator = default_fts_field_operator
        if default_fts_operator is not None:
            self.default_fts_operator = default_fts_operator
        if default_field_name is not None:
            self.default_field_name = default_field_name
        if namespace is not None:
            self.namespace = namespace
        if text_attributes is not None:
            self.text_attributes = text_attributes

    @property
    def default_fts_field_operator(self):
        """Gets the default_fts_field_operator of this RequestDefaults.  # noqa: E501

        The default way to combine query parts in field query groups when AND or OR is not explicitly stated - includes ! - + FIELD:(one two three)   # noqa: E501

        :return: The default_fts_field_operator of this RequestDefaults.  # noqa: E501
        :rtype: str
        """
        return self._default_fts_field_operator

    @default_fts_field_operator.setter
    def default_fts_field_operator(self, default_fts_field_operator):
        """Sets the default_fts_field_operator of this RequestDefaults.

        The default way to combine query parts in field query groups when AND or OR is not explicitly stated - includes ! - + FIELD:(one two three)   # noqa: E501

        :param default_fts_field_operator: The default_fts_field_operator of this RequestDefaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if default_fts_field_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `default_fts_field_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(default_fts_field_operator, allowed_values)
            )

        self._default_fts_field_operator = default_fts_field_operator

    @property
    def default_fts_operator(self):
        """Gets the default_fts_operator of this RequestDefaults.  # noqa: E501

        The default way to combine query parts when AND or OR is not explicitly stated - includes ! - + one two three (one two three)   # noqa: E501

        :return: The default_fts_operator of this RequestDefaults.  # noqa: E501
        :rtype: str
        """
        return self._default_fts_operator

    @default_fts_operator.setter
    def default_fts_operator(self, default_fts_operator):
        """Sets the default_fts_operator of this RequestDefaults.

        The default way to combine query parts when AND or OR is not explicitly stated - includes ! - + one two three (one two three)   # noqa: E501

        :param default_fts_operator: The default_fts_operator of this RequestDefaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if default_fts_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `default_fts_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(default_fts_operator, allowed_values)
            )

        self._default_fts_operator = default_fts_operator

    @property
    def default_field_name(self):
        """Gets the default_field_name of this RequestDefaults.  # noqa: E501


        :return: The default_field_name of this RequestDefaults.  # noqa: E501
        :rtype: str
        """
        return self._default_field_name

    @default_field_name.setter
    def default_field_name(self, default_field_name):
        """Sets the default_field_name of this RequestDefaults.


        :param default_field_name: The default_field_name of this RequestDefaults.  # noqa: E501
        :type: str
        """

        self._default_field_name = default_field_name

    @property
    def namespace(self):
        """Gets the namespace of this RequestDefaults.  # noqa: E501

        The default name space to use if one is not provided  # noqa: E501

        :return: The namespace of this RequestDefaults.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RequestDefaults.

        The default name space to use if one is not provided  # noqa: E501

        :param namespace: The namespace of this RequestDefaults.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def text_attributes(self):
        """Gets the text_attributes of this RequestDefaults.  # noqa: E501

        A list of query fields/properties used to expand TEXT: queries. The default is cm:content. You could include all content properties using d:content or list all individual content properties or types. As more terms are included the query size, complexity, memory impact and query time will increase.   # noqa: E501

        :return: The text_attributes of this RequestDefaults.  # noqa: E501
        :rtype: list[str]
        """
        return self._text_attributes

    @text_attributes.setter
    def text_attributes(self, text_attributes):
        """Sets the text_attributes of this RequestDefaults.

        A list of query fields/properties used to expand TEXT: queries. The default is cm:content. You could include all content properties using d:content or list all individual content properties or types. As more terms are included the query size, complexity, memory impact and query time will increase.   # noqa: E501

        :param text_attributes: The text_attributes of this RequestDefaults.  # noqa: E501
        :type: list[str]
        """

        self._text_attributes = text_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestDefaults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDefaults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
