# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestHighlightFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'fragment_size': 'int',
        'merge_contiguous': 'bool',
        'postfix': 'str',
        'prefix': 'str',
        'snippet_count': 'int'
    }

    attribute_map = {
        'field': 'field',
        'fragment_size': 'fragmentSize',
        'merge_contiguous': 'mergeContiguous',
        'postfix': 'postfix',
        'prefix': 'prefix',
        'snippet_count': 'snippetCount'
    }

    def __init__(self, field=None, fragment_size=None, merge_contiguous=None, postfix=None, prefix=None, snippet_count=None):  # noqa: E501
        """RequestHighlightFields - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._fragment_size = None
        self._merge_contiguous = None
        self._postfix = None
        self._prefix = None
        self._snippet_count = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if fragment_size is not None:
            self.fragment_size = fragment_size
        if merge_contiguous is not None:
            self.merge_contiguous = merge_contiguous
        if postfix is not None:
            self.postfix = postfix
        if prefix is not None:
            self.prefix = prefix
        if snippet_count is not None:
            self.snippet_count = snippet_count

    @property
    def field(self):
        """Gets the field of this RequestHighlightFields.  # noqa: E501

        The name of the field to highlight.  # noqa: E501

        :return: The field of this RequestHighlightFields.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RequestHighlightFields.

        The name of the field to highlight.  # noqa: E501

        :param field: The field of this RequestHighlightFields.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def fragment_size(self):
        """Gets the fragment_size of this RequestHighlightFields.  # noqa: E501


        :return: The fragment_size of this RequestHighlightFields.  # noqa: E501
        :rtype: int
        """
        return self._fragment_size

    @fragment_size.setter
    def fragment_size(self, fragment_size):
        """Sets the fragment_size of this RequestHighlightFields.


        :param fragment_size: The fragment_size of this RequestHighlightFields.  # noqa: E501
        :type: int
        """

        self._fragment_size = fragment_size

    @property
    def merge_contiguous(self):
        """Gets the merge_contiguous of this RequestHighlightFields.  # noqa: E501


        :return: The merge_contiguous of this RequestHighlightFields.  # noqa: E501
        :rtype: bool
        """
        return self._merge_contiguous

    @merge_contiguous.setter
    def merge_contiguous(self, merge_contiguous):
        """Sets the merge_contiguous of this RequestHighlightFields.


        :param merge_contiguous: The merge_contiguous of this RequestHighlightFields.  # noqa: E501
        :type: bool
        """

        self._merge_contiguous = merge_contiguous

    @property
    def postfix(self):
        """Gets the postfix of this RequestHighlightFields.  # noqa: E501


        :return: The postfix of this RequestHighlightFields.  # noqa: E501
        :rtype: str
        """
        return self._postfix

    @postfix.setter
    def postfix(self, postfix):
        """Sets the postfix of this RequestHighlightFields.


        :param postfix: The postfix of this RequestHighlightFields.  # noqa: E501
        :type: str
        """

        self._postfix = postfix

    @property
    def prefix(self):
        """Gets the prefix of this RequestHighlightFields.  # noqa: E501


        :return: The prefix of this RequestHighlightFields.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this RequestHighlightFields.


        :param prefix: The prefix of this RequestHighlightFields.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def snippet_count(self):
        """Gets the snippet_count of this RequestHighlightFields.  # noqa: E501


        :return: The snippet_count of this RequestHighlightFields.  # noqa: E501
        :rtype: int
        """
        return self._snippet_count

    @snippet_count.setter
    def snippet_count(self, snippet_count):
        """Sets the snippet_count of this RequestHighlightFields.


        :param snippet_count: The snippet_count of this RequestHighlightFields.  # noqa: E501
        :type: int
        """

        self._snippet_count = snippet_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestHighlightFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestHighlightFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
