# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cardinality': 'bool',
        'cardinality_accuracy': 'float',
        'count_distinct': 'bool',
        'count_values': 'bool',
        'distinct_values': 'bool',
        'exclude_filters': 'list[str]',
        'field': 'str',
        'label': 'str',
        'max': 'bool',
        'mean': 'bool',
        'min': 'bool',
        'missing': 'bool',
        'percentiles': 'list[float]',
        'stddev': 'bool',
        'sum': 'bool',
        'sum_of_squares': 'bool'
    }

    attribute_map = {
        'cardinality': 'cardinality',
        'cardinality_accuracy': 'cardinalityAccuracy',
        'count_distinct': 'countDistinct',
        'count_values': 'countValues',
        'distinct_values': 'distinctValues',
        'exclude_filters': 'excludeFilters',
        'field': 'field',
        'label': 'label',
        'max': 'max',
        'mean': 'mean',
        'min': 'min',
        'missing': 'missing',
        'percentiles': 'percentiles',
        'stddev': 'stddev',
        'sum': 'sum',
        'sum_of_squares': 'sumOfSquares'
    }

    def __init__(self, cardinality=False, cardinality_accuracy=0.3, count_distinct=False, count_values=True, distinct_values=False, exclude_filters=None, field=None, label=None, max=True, mean=True, min=True, missing=True, percentiles=None, stddev=True, sum=True, sum_of_squares=True):  # noqa: E501
        """RequestStats - a model defined in Swagger"""  # noqa: E501
        self._cardinality = None
        self._cardinality_accuracy = None
        self._count_distinct = None
        self._count_values = None
        self._distinct_values = None
        self._exclude_filters = None
        self._field = None
        self._label = None
        self._max = None
        self._mean = None
        self._min = None
        self._missing = None
        self._percentiles = None
        self._stddev = None
        self._sum = None
        self._sum_of_squares = None
        self.discriminator = None
        if cardinality is not None:
            self.cardinality = cardinality
        if cardinality_accuracy is not None:
            self.cardinality_accuracy = cardinality_accuracy
        if count_distinct is not None:
            self.count_distinct = count_distinct
        if count_values is not None:
            self.count_values = count_values
        if distinct_values is not None:
            self.distinct_values = distinct_values
        if exclude_filters is not None:
            self.exclude_filters = exclude_filters
        if field is not None:
            self.field = field
        if label is not None:
            self.label = label
        if max is not None:
            self.max = max
        if mean is not None:
            self.mean = mean
        if min is not None:
            self.min = min
        if missing is not None:
            self.missing = missing
        if percentiles is not None:
            self.percentiles = percentiles
        if stddev is not None:
            self.stddev = stddev
        if sum is not None:
            self.sum = sum
        if sum_of_squares is not None:
            self.sum_of_squares = sum_of_squares

    @property
    def cardinality(self):
        """Gets the cardinality of this RequestStats.  # noqa: E501

        A statistical approximation of the number of distinct values  # noqa: E501

        :return: The cardinality of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this RequestStats.

        A statistical approximation of the number of distinct values  # noqa: E501

        :param cardinality: The cardinality of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._cardinality = cardinality

    @property
    def cardinality_accuracy(self):
        """Gets the cardinality_accuracy of this RequestStats.  # noqa: E501

        Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.  # noqa: E501

        :return: The cardinality_accuracy of this RequestStats.  # noqa: E501
        :rtype: float
        """
        return self._cardinality_accuracy

    @cardinality_accuracy.setter
    def cardinality_accuracy(self, cardinality_accuracy):
        """Sets the cardinality_accuracy of this RequestStats.

        Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.  # noqa: E501

        :param cardinality_accuracy: The cardinality_accuracy of this RequestStats.  # noqa: E501
        :type: float
        """

        self._cardinality_accuracy = cardinality_accuracy

    @property
    def count_distinct(self):
        """Gets the count_distinct of this RequestStats.  # noqa: E501

        The number of distinct values  (This can be very expensive to calculate)  # noqa: E501

        :return: The count_distinct of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._count_distinct

    @count_distinct.setter
    def count_distinct(self, count_distinct):
        """Sets the count_distinct of this RequestStats.

        The number of distinct values  (This can be very expensive to calculate)  # noqa: E501

        :param count_distinct: The count_distinct of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._count_distinct = count_distinct

    @property
    def count_values(self):
        """Gets the count_values of this RequestStats.  # noqa: E501

        The number which have a value for this field  # noqa: E501

        :return: The count_values of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._count_values

    @count_values.setter
    def count_values(self, count_values):
        """Sets the count_values of this RequestStats.

        The number which have a value for this field  # noqa: E501

        :param count_values: The count_values of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._count_values = count_values

    @property
    def distinct_values(self):
        """Gets the distinct_values of this RequestStats.  # noqa: E501

        The set of all distinct values for the field (This can be very expensive to calculate)  # noqa: E501

        :return: The distinct_values of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._distinct_values

    @distinct_values.setter
    def distinct_values(self, distinct_values):
        """Sets the distinct_values of this RequestStats.

        The set of all distinct values for the field (This can be very expensive to calculate)  # noqa: E501

        :param distinct_values: The distinct_values of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._distinct_values = distinct_values

    @property
    def exclude_filters(self):
        """Gets the exclude_filters of this RequestStats.  # noqa: E501

        A list of filters to exclude  # noqa: E501

        :return: The exclude_filters of this RequestStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_filters

    @exclude_filters.setter
    def exclude_filters(self, exclude_filters):
        """Sets the exclude_filters of this RequestStats.

        A list of filters to exclude  # noqa: E501

        :param exclude_filters: The exclude_filters of this RequestStats.  # noqa: E501
        :type: list[str]
        """

        self._exclude_filters = exclude_filters

    @property
    def field(self):
        """Gets the field of this RequestStats.  # noqa: E501

        The stats field  # noqa: E501

        :return: The field of this RequestStats.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RequestStats.

        The stats field  # noqa: E501

        :param field: The field of this RequestStats.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def label(self):
        """Gets the label of this RequestStats.  # noqa: E501

        A label to include for reference the stats field  # noqa: E501

        :return: The label of this RequestStats.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RequestStats.

        A label to include for reference the stats field  # noqa: E501

        :param label: The label of this RequestStats.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def max(self):
        """Gets the max of this RequestStats.  # noqa: E501

        The maximum value of the field  # noqa: E501

        :return: The max of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this RequestStats.

        The maximum value of the field  # noqa: E501

        :param max: The max of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._max = max

    @property
    def mean(self):
        """Gets the mean of this RequestStats.  # noqa: E501

        The average  # noqa: E501

        :return: The mean of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this RequestStats.

        The average  # noqa: E501

        :param mean: The mean of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._mean = mean

    @property
    def min(self):
        """Gets the min of this RequestStats.  # noqa: E501

        The minimum value of the field  # noqa: E501

        :return: The min of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this RequestStats.

        The minimum value of the field  # noqa: E501

        :param min: The min of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._min = min

    @property
    def missing(self):
        """Gets the missing of this RequestStats.  # noqa: E501

        The number which do not have a value for this field  # noqa: E501

        :return: The missing of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this RequestStats.

        The number which do not have a value for this field  # noqa: E501

        :param missing: The missing of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._missing = missing

    @property
    def percentiles(self):
        """Gets the percentiles of this RequestStats.  # noqa: E501

        A list of percentile values, e.g. \"1,99,99.9\"  # noqa: E501

        :return: The percentiles of this RequestStats.  # noqa: E501
        :rtype: list[float]
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this RequestStats.

        A list of percentile values, e.g. \"1,99,99.9\"  # noqa: E501

        :param percentiles: The percentiles of this RequestStats.  # noqa: E501
        :type: list[float]
        """

        self._percentiles = percentiles

    @property
    def stddev(self):
        """Gets the stddev of this RequestStats.  # noqa: E501

        Standard deviation  # noqa: E501

        :return: The stddev of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this RequestStats.

        Standard deviation  # noqa: E501

        :param stddev: The stddev of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._stddev = stddev

    @property
    def sum(self):
        """Gets the sum of this RequestStats.  # noqa: E501

        The sum of all values of the field  # noqa: E501

        :return: The sum of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this RequestStats.

        The sum of all values of the field  # noqa: E501

        :param sum: The sum of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._sum = sum

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this RequestStats.  # noqa: E501

        Sum of all values squared  # noqa: E501

        :return: The sum_of_squares of this RequestStats.  # noqa: E501
        :rtype: bool
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this RequestStats.

        Sum of all values squared  # noqa: E501

        :param sum_of_squares: The sum_of_squares of this RequestStats.  # noqa: E501
        :type: bool
        """

        self._sum_of_squares = sum_of_squares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
