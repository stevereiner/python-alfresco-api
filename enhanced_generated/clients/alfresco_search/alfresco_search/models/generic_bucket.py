# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenericBucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_info': 'GenericBucketBucketInfo',
        'display': 'object',
        'facets': 'list[object]',
        'filter_query': 'str',
        'label': 'str',
        'metrics': 'list[GenericMetric]'
    }

    attribute_map = {
        'bucket_info': 'bucketInfo',
        'display': 'display',
        'facets': 'facets',
        'filter_query': 'filterQuery',
        'label': 'label',
        'metrics': 'metrics'
    }

    def __init__(self, bucket_info=None, display=None, facets=None, filter_query=None, label=None, metrics=None):  # noqa: E501
        """GenericBucket - a model defined in Swagger"""  # noqa: E501
        self._bucket_info = None
        self._display = None
        self._facets = None
        self._filter_query = None
        self._label = None
        self._metrics = None
        self.discriminator = None
        if bucket_info is not None:
            self.bucket_info = bucket_info
        if display is not None:
            self.display = display
        if facets is not None:
            self.facets = facets
        if filter_query is not None:
            self.filter_query = filter_query
        if label is not None:
            self.label = label
        if metrics is not None:
            self.metrics = metrics

    @property
    def bucket_info(self):
        """Gets the bucket_info of this GenericBucket.  # noqa: E501


        :return: The bucket_info of this GenericBucket.  # noqa: E501
        :rtype: GenericBucketBucketInfo
        """
        return self._bucket_info

    @bucket_info.setter
    def bucket_info(self, bucket_info):
        """Sets the bucket_info of this GenericBucket.


        :param bucket_info: The bucket_info of this GenericBucket.  # noqa: E501
        :type: GenericBucketBucketInfo
        """

        self._bucket_info = bucket_info

    @property
    def display(self):
        """Gets the display of this GenericBucket.  # noqa: E501

        An optional field for additional display information  # noqa: E501

        :return: The display of this GenericBucket.  # noqa: E501
        :rtype: object
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this GenericBucket.

        An optional field for additional display information  # noqa: E501

        :param display: The display of this GenericBucket.  # noqa: E501
        :type: object
        """

        self._display = display

    @property
    def facets(self):
        """Gets the facets of this GenericBucket.  # noqa: E501

        Additional list of nested facets  # noqa: E501

        :return: The facets of this GenericBucket.  # noqa: E501
        :rtype: list[object]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this GenericBucket.

        Additional list of nested facets  # noqa: E501

        :param facets: The facets of this GenericBucket.  # noqa: E501
        :type: list[object]
        """

        self._facets = facets

    @property
    def filter_query(self):
        """Gets the filter_query of this GenericBucket.  # noqa: E501

        The filter query you can use to apply this facet  # noqa: E501

        :return: The filter_query of this GenericBucket.  # noqa: E501
        :rtype: str
        """
        return self._filter_query

    @filter_query.setter
    def filter_query(self, filter_query):
        """Sets the filter_query of this GenericBucket.

        The filter query you can use to apply this facet  # noqa: E501

        :param filter_query: The filter_query of this GenericBucket.  # noqa: E501
        :type: str
        """

        self._filter_query = filter_query

    @property
    def label(self):
        """Gets the label of this GenericBucket.  # noqa: E501

        The bucket label  # noqa: E501

        :return: The label of this GenericBucket.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GenericBucket.

        The bucket label  # noqa: E501

        :param label: The label of this GenericBucket.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def metrics(self):
        """Gets the metrics of this GenericBucket.  # noqa: E501

        An array of buckets and values  # noqa: E501

        :return: The metrics of this GenericBucket.  # noqa: E501
        :rtype: list[GenericMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GenericBucket.

        An array of buckets and values  # noqa: E501

        :param metrics: The metrics of this GenericBucket.  # noqa: E501
        :type: list[GenericMetric]
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenericBucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenericBucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
