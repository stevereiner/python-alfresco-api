# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResultSetContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consistency': 'ResponseConsistency',
        'facet_queries': 'list[ResultSetContextFacetQueries]',
        'facets': 'list[GenericFacetResponse]',
        'facets_fields': 'list[ResultBuckets]',
        'request': 'SearchRequest',
        'spellcheck': 'list[ResultSetContextSpellcheck]'
    }

    attribute_map = {
        'consistency': 'consistency',
        'facet_queries': 'facetQueries',
        'facets': 'facets',
        'facets_fields': 'facetsFields',
        'request': 'request',
        'spellcheck': 'spellcheck'
    }

    def __init__(self, consistency=None, facet_queries=None, facets=None, facets_fields=None, request=None, spellcheck=None):  # noqa: E501
        """ResultSetContext - a model defined in Swagger"""  # noqa: E501
        self._consistency = None
        self._facet_queries = None
        self._facets = None
        self._facets_fields = None
        self._request = None
        self._spellcheck = None
        self.discriminator = None
        if consistency is not None:
            self.consistency = consistency
        if facet_queries is not None:
            self.facet_queries = facet_queries
        if facets is not None:
            self.facets = facets
        if facets_fields is not None:
            self.facets_fields = facets_fields
        if request is not None:
            self.request = request
        if spellcheck is not None:
            self.spellcheck = spellcheck

    @property
    def consistency(self):
        """Gets the consistency of this ResultSetContext.  # noqa: E501


        :return: The consistency of this ResultSetContext.  # noqa: E501
        :rtype: ResponseConsistency
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this ResultSetContext.


        :param consistency: The consistency of this ResultSetContext.  # noqa: E501
        :type: ResponseConsistency
        """

        self._consistency = consistency

    @property
    def facet_queries(self):
        """Gets the facet_queries of this ResultSetContext.  # noqa: E501

        The counts from facet queries  # noqa: E501

        :return: The facet_queries of this ResultSetContext.  # noqa: E501
        :rtype: list[ResultSetContextFacetQueries]
        """
        return self._facet_queries

    @facet_queries.setter
    def facet_queries(self, facet_queries):
        """Sets the facet_queries of this ResultSetContext.

        The counts from facet queries  # noqa: E501

        :param facet_queries: The facet_queries of this ResultSetContext.  # noqa: E501
        :type: list[ResultSetContextFacetQueries]
        """

        self._facet_queries = facet_queries

    @property
    def facets(self):
        """Gets the facets of this ResultSetContext.  # noqa: E501

        The faceted response  # noqa: E501

        :return: The facets of this ResultSetContext.  # noqa: E501
        :rtype: list[GenericFacetResponse]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this ResultSetContext.

        The faceted response  # noqa: E501

        :param facets: The facets of this ResultSetContext.  # noqa: E501
        :type: list[GenericFacetResponse]
        """

        self._facets = facets

    @property
    def facets_fields(self):
        """Gets the facets_fields of this ResultSetContext.  # noqa: E501

        The counts from field facets  # noqa: E501

        :return: The facets_fields of this ResultSetContext.  # noqa: E501
        :rtype: list[ResultBuckets]
        """
        return self._facets_fields

    @facets_fields.setter
    def facets_fields(self, facets_fields):
        """Sets the facets_fields of this ResultSetContext.

        The counts from field facets  # noqa: E501

        :param facets_fields: The facets_fields of this ResultSetContext.  # noqa: E501
        :type: list[ResultBuckets]
        """

        self._facets_fields = facets_fields

    @property
    def request(self):
        """Gets the request of this ResultSetContext.  # noqa: E501


        :return: The request of this ResultSetContext.  # noqa: E501
        :rtype: SearchRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ResultSetContext.


        :param request: The request of this ResultSetContext.  # noqa: E501
        :type: SearchRequest
        """

        self._request = request

    @property
    def spellcheck(self):
        """Gets the spellcheck of this ResultSetContext.  # noqa: E501

        Suggested corrections  If zero results were found for the original query then a single entry of type \"searchInsteadFor\" will be returned. If alternatives were found that return more results than the original query they are returned as \"didYouMean\" options. The highest quality suggestion is first.   # noqa: E501

        :return: The spellcheck of this ResultSetContext.  # noqa: E501
        :rtype: list[ResultSetContextSpellcheck]
        """
        return self._spellcheck

    @spellcheck.setter
    def spellcheck(self, spellcheck):
        """Sets the spellcheck of this ResultSetContext.

        Suggested corrections  If zero results were found for the original query then a single entry of type \"searchInsteadFor\" will be returned. If alternatives were found that return more results than the original query they are returned as \"didYouMean\" options. The highest quality suggestion is first.   # noqa: E501

        :param spellcheck: The spellcheck of this ResultSetContext.  # noqa: E501
        :type: list[ResultSetContextSpellcheck]
        """

        self._spellcheck = spellcheck

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultSetContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultSetContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
