# coding: utf-8

"""
    Alfresco Content Services REST API

    **Search API**  Provides access to the search features of Alfresco Content Services.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestSortDefinitionInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ascending': 'bool',
        'field': 'str',
        'type': 'str'
    }

    attribute_map = {
        'ascending': 'ascending',
        'field': 'field',
        'type': 'type'
    }

    def __init__(self, ascending=False, field=None, type='FIELD'):  # noqa: E501
        """RequestSortDefinitionInner - a model defined in Swagger"""  # noqa: E501
        self._ascending = None
        self._field = None
        self._type = None
        self.discriminator = None
        if ascending is not None:
            self.ascending = ascending
        if field is not None:
            self.field = field
        if type is not None:
            self.type = type

    @property
    def ascending(self):
        """Gets the ascending of this RequestSortDefinitionInner.  # noqa: E501

        The sort order. (The ordering of nulls is determined by the SOLR configuration)  # noqa: E501

        :return: The ascending of this RequestSortDefinitionInner.  # noqa: E501
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """Sets the ascending of this RequestSortDefinitionInner.

        The sort order. (The ordering of nulls is determined by the SOLR configuration)  # noqa: E501

        :param ascending: The ascending of this RequestSortDefinitionInner.  # noqa: E501
        :type: bool
        """

        self._ascending = ascending

    @property
    def field(self):
        """Gets the field of this RequestSortDefinitionInner.  # noqa: E501

        The name of the field  # noqa: E501

        :return: The field of this RequestSortDefinitionInner.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RequestSortDefinitionInner.

        The name of the field  # noqa: E501

        :param field: The field of this RequestSortDefinitionInner.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def type(self):
        """Gets the type of this RequestSortDefinitionInner.  # noqa: E501

        How to order - using a field, when position of the document in the index, score/relevence.  # noqa: E501

        :return: The type of this RequestSortDefinitionInner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestSortDefinitionInner.

        How to order - using a field, when position of the document in the index, score/relevence.  # noqa: E501

        :param type: The type of this RequestSortDefinitionInner.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIELD", "DOCUMENT", "SCORE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestSortDefinitionInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestSortDefinitionInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
