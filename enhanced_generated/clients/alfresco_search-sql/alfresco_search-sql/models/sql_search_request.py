# coding: utf-8

"""
    Alfresco Insight Engine REST API

    **Search SQL API** A Solr SQL passthrough, this feature provides the ability to use SQL to query Solr.   # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SQLSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_queries': 'list[str]',
        'format': 'str',
        'include_metadata': 'bool',
        'locales': 'list[str]',
        'stmt': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'filter_queries': 'filterQueries',
        'format': 'format',
        'include_metadata': 'includeMetadata',
        'locales': 'locales',
        'stmt': 'stmt',
        'timezone': 'timezone'
    }

    def __init__(self, filter_queries=None, format=None, include_metadata=None, locales=None, stmt=None, timezone=None):  # noqa: E501
        """SQLSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._filter_queries = None
        self._format = None
        self._include_metadata = None
        self._locales = None
        self._stmt = None
        self._timezone = None
        self.discriminator = None
        if filter_queries is not None:
            self.filter_queries = filter_queries
        if format is not None:
            self.format = format
        if include_metadata is not None:
            self.include_metadata = include_metadata
        if locales is not None:
            self.locales = locales
        if stmt is not None:
            self.stmt = stmt
        if timezone is not None:
            self.timezone = timezone

    @property
    def filter_queries(self):
        """Gets the filter_queries of this SQLSearchRequest.  # noqa: E501


        :return: The filter_queries of this SQLSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_queries

    @filter_queries.setter
    def filter_queries(self, filter_queries):
        """Sets the filter_queries of this SQLSearchRequest.


        :param filter_queries: The filter_queries of this SQLSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._filter_queries = filter_queries

    @property
    def format(self):
        """Gets the format of this SQLSearchRequest.  # noqa: E501


        :return: The format of this SQLSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SQLSearchRequest.


        :param format: The format of this SQLSearchRequest.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def include_metadata(self):
        """Gets the include_metadata of this SQLSearchRequest.  # noqa: E501


        :return: The include_metadata of this SQLSearchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_metadata

    @include_metadata.setter
    def include_metadata(self, include_metadata):
        """Sets the include_metadata of this SQLSearchRequest.


        :param include_metadata: The include_metadata of this SQLSearchRequest.  # noqa: E501
        :type: bool
        """

        self._include_metadata = include_metadata

    @property
    def locales(self):
        """Gets the locales of this SQLSearchRequest.  # noqa: E501


        :return: The locales of this SQLSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._locales

    @locales.setter
    def locales(self, locales):
        """Sets the locales of this SQLSearchRequest.


        :param locales: The locales of this SQLSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._locales = locales

    @property
    def stmt(self):
        """Gets the stmt of this SQLSearchRequest.  # noqa: E501


        :return: The stmt of this SQLSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._stmt

    @stmt.setter
    def stmt(self, stmt):
        """Sets the stmt of this SQLSearchRequest.


        :param stmt: The stmt of this SQLSearchRequest.  # noqa: E501
        :type: str
        """

        self._stmt = stmt

    @property
    def timezone(self):
        """Gets the timezone of this SQLSearchRequest.  # noqa: E501


        :return: The timezone of this SQLSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SQLSearchRequest.


        :param timezone: The timezone of this SQLSearchRequest.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SQLSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SQLSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
