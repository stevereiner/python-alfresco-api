# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_discovery_client.models.entitlements_info import EntitlementsInfo
from typing import Optional, Set
from typing_extensions import Self

class LicenseInfo(BaseModel):
    """
    LicenseInfo
    """ # noqa: E501
    entitlements: Optional[EntitlementsInfo] = None
    expires_at: datetime = Field(alias="expiresAt")
    holder: StrictStr
    issued_at: datetime = Field(alias="issuedAt")
    mode: StrictStr
    remaining_days: StrictInt = Field(alias="remainingDays")
    __properties: ClassVar[List[str]] = ["entitlements", "expiresAt", "holder", "issuedAt", "mode", "remainingDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicenseInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entitlements
        if self.entitlements:
            _dict['entitlements'] = self.entitlements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicenseInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entitlements": EntitlementsInfo.from_dict(obj["entitlements"]) if obj.get("entitlements") is not None else None,
            "expiresAt": obj.get("expiresAt"),
            "holder": obj.get("holder"),
            "issuedAt": obj.get("issuedAt"),
            "mode": obj.get("mode"),
            "remainingDays": obj.get("remainingDays")
        })
        return _obj


