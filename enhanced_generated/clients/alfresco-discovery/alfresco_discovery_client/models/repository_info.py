# coding: utf-8

"""
    Alfresco Content Services REST API

    **Discovery API**  Provides access to information about Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_discovery_client.models.license_info import LicenseInfo
from alfresco_discovery_client.models.module_info import ModuleInfo
from alfresco_discovery_client.models.status_info import StatusInfo
from alfresco_discovery_client.models.version_info import VersionInfo
from typing import Optional, Set
from typing_extensions import Self

class RepositoryInfo(BaseModel):
    """
    RepositoryInfo
    """ # noqa: E501
    edition: StrictStr
    id: StrictStr
    license: Optional[LicenseInfo] = None
    modules: Optional[List[ModuleInfo]] = None
    status: StatusInfo
    version: VersionInfo
    __properties: ClassVar[List[str]] = ["edition", "id", "license", "modules", "status", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RepositoryInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modules (list)
        _items = []
        if self.modules:
            for _item_modules in self.modules:
                if _item_modules:
                    _items.append(_item_modules.to_dict())
            _dict['modules'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RepositoryInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "edition": obj.get("edition"),
            "id": obj.get("id"),
            "license": LicenseInfo.from_dict(obj["license"]) if obj.get("license") is not None else None,
            "modules": [ModuleInfo.from_dict(_item) for _item in obj["modules"]] if obj.get("modules") is not None else None,
            "status": StatusInfo.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "version": VersionInfo.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj


