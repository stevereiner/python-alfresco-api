# coding: utf-8

"""
    Alfresco Content Services REST API

    **Workflow API**  Provides access to the workflow features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProcessDefinition(BaseModel):
    """
    A process definition is a description of an execution flow in terms of activities. New processes are created and started for a process definition. 
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category to which this process definition belongs")
    deployment_id: Optional[StrictStr] = Field(default=None, description="The deployment of which this process definition is a part", alias="deploymentId")
    description: Optional[StrictStr] = Field(default=None, description="The description of this process definition")
    graphic_notation_defined: Optional[StrictBool] = Field(default=None, alias="graphicNotationDefined")
    id: StrictStr = Field(description="The unique id of this process definition")
    key: Optional[StrictStr] = Field(default=None, description="The key of this process definition")
    name: Optional[StrictStr] = Field(default=None, description="The name of this process definition")
    start_form_resource_key: Optional[StrictStr] = Field(default=None, description="The start form key", alias="startFormResourceKey")
    title: Optional[StrictStr] = Field(default=None, description="The title of this process definition")
    __properties: ClassVar[List[str]] = ["category", "deploymentId", "description", "graphicNotationDefined", "id", "key", "name", "startFormResourceKey", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "deploymentId": obj.get("deploymentId"),
            "description": obj.get("description"),
            "graphicNotationDefined": obj.get("graphicNotationDefined"),
            "id": obj.get("id"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "startFormResourceKey": obj.get("startFormResourceKey"),
            "title": obj.get("title")
        })
        return _obj


