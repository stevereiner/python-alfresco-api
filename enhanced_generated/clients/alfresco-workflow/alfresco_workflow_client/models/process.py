# coding: utf-8

"""
    Alfresco Content Services REST API

    **Workflow API**  Provides access to the workflow features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Process(BaseModel):
    """
    A process describes a running instance of a process definition.  When a new deployment includes a process definition that is already deployed with the same key, the newly deployed process definition will be considered a new version of the same process definition. By default processes will keep running in the process definition they are started in. But new processes can be started in the latest version of a process definition by using the processDefinitionKey parameter.  In non-network deployments, administrators can see all processes and perform all operations on tasks. In network deployments, network administrators can see processes in their network and perform all operations on tasks in their network. 
    """ # noqa: E501
    business_key: Optional[StrictStr] = Field(default=None, description="The business key", alias="businessKey")
    delete_reason: Optional[StrictStr] = Field(default=None, description="The reason this process was canceled", alias="deleteReason")
    duration_in_ms: Optional[StrictInt] = Field(default=None, description="The duration of this process", alias="durationInMs")
    end_activity_definition_id: Optional[StrictStr] = Field(default=None, description="The id of the last activity in the process", alias="endActivityDefinitionId")
    ended_at: Optional[datetime] = Field(default=None, description="The date time this process started", alias="endedAt")
    id: StrictStr = Field(description="The unique id of this process")
    process_definition_id: Optional[StrictStr] = Field(default=None, description="The unique identity of the owning process definition", alias="processDefinitionId")
    start_activity_definition_id: Optional[StrictStr] = Field(default=None, description="The id of the first activity in the process", alias="startActivityDefinitionId")
    start_user_id: Optional[StrictStr] = Field(default=None, description="The id of the user who started the process", alias="startUserId")
    started_at: Optional[datetime] = Field(default=None, description="The date time this process started", alias="startedAt")
    __properties: ClassVar[List[str]] = ["businessKey", "deleteReason", "durationInMs", "endActivityDefinitionId", "endedAt", "id", "processDefinitionId", "startActivityDefinitionId", "startUserId", "startedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Process from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Process from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessKey": obj.get("businessKey"),
            "deleteReason": obj.get("deleteReason"),
            "durationInMs": obj.get("durationInMs"),
            "endActivityDefinitionId": obj.get("endActivityDefinitionId"),
            "endedAt": obj.get("endedAt"),
            "id": obj.get("id"),
            "processDefinitionId": obj.get("processDefinitionId"),
            "startActivityDefinitionId": obj.get("startActivityDefinitionId"),
            "startUserId": obj.get("startUserId"),
            "startedAt": obj.get("startedAt")
        })
        return _obj


