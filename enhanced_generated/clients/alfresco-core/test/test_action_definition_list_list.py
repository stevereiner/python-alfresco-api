# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_core_client.models.action_definition_list_list import ActionDefinitionListList

class TestActionDefinitionListList(unittest.TestCase):
    """ActionDefinitionListList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ActionDefinitionListList:
        """Test ActionDefinitionListList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ActionDefinitionListList`
        """
        model = ActionDefinitionListList()
        if include_optional:
            return ActionDefinitionListList(
                entries = [
                    alfresco_core_client.models.action_definition.ActionDefinition(
                        applicable_types = [
                            ''
                            ], 
                        description = '', 
                        id = '', 
                        name = '', 
                        parameter_definitions = [
                            alfresco_core_client.models.action_parameter_definition.ActionParameterDefinition(
                                display_label = '', 
                                mandatory = True, 
                                multi_valued = True, 
                                name = '', 
                                type = '', )
                            ], 
                        title = '', 
                        track_status = True, )
                    ],
                pagination = alfresco_core_client.models.pagination.Pagination(
                    count = 56, 
                    has_more_items = True, 
                    max_items = 56, 
                    skip_count = 56, 
                    total_items = 56, )
            )
        else:
            return ActionDefinitionListList(
        )
        """

    def testActionDefinitionListList(self):
        """Test ActionDefinitionListList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
