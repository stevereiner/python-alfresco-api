# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_core_client.models.site_member_paging_list import SiteMemberPagingList

class TestSiteMemberPagingList(unittest.TestCase):
    """SiteMemberPagingList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SiteMemberPagingList:
        """Test SiteMemberPagingList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SiteMemberPagingList`
        """
        model = SiteMemberPagingList()
        if include_optional:
            return SiteMemberPagingList(
                entries = [
                    alfresco_core_client.models.site_member_entry.SiteMemberEntry(
                        entry = alfresco_core_client.models.site_member.SiteMember(
                            id = '', 
                            is_member_of_group = True, 
                            person = alfresco_core_client.models.person.Person(
                                aspect_names = [
                                    ''
                                    ], 
                                avatar_id = '', 
                                capabilities = alfresco_core_client.models.capabilities.Capabilities(
                                    is_admin = True, 
                                    is_guest = True, 
                                    is_mutable = True, ), 
                                company = alfresco_core_client.models.company.Company(
                                    address1 = '', 
                                    address2 = '', 
                                    address3 = '', 
                                    email = '', 
                                    fax = '', 
                                    organization = '', 
                                    postcode = '', 
                                    telephone = '', ), 
                                description = '', 
                                display_name = '', 
                                email = '', 
                                email_notifications_enabled = True, 
                                enabled = True, 
                                first_name = '', 
                                google_id = '', 
                                id = '', 
                                instant_message_id = '', 
                                job_title = '', 
                                last_name = '', 
                                location = '', 
                                mobile = '', 
                                properties = alfresco_core_client.models.properties.properties(), 
                                skype_id = '', 
                                status_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                telephone = '', 
                                user_status = '', ), 
                            role = 'SiteConsumer', ), )
                    ],
                pagination = alfresco_core_client.models.pagination.Pagination(
                    count = 56, 
                    has_more_items = True, 
                    max_items = 56, 
                    skip_count = 56, 
                    total_items = 56, )
            )
        else:
            return SiteMemberPagingList(
        )
        """

    def testSiteMemberPagingList(self):
        """Test SiteMemberPagingList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
