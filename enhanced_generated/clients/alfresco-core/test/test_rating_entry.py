# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from alfresco_core_client.models.rating_entry import RatingEntry

class TestRatingEntry(unittest.TestCase):
    """RatingEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RatingEntry:
        """Test RatingEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RatingEntry`
        """
        model = RatingEntry()
        if include_optional:
            return RatingEntry(
                entry = alfresco_core_client.models.rating.Rating(
                    aggregate = alfresco_core_client.models.rating_aggregate.Rating_aggregate(
                        average = 56, 
                        number_of_ratings = 56, ), 
                    id = '', 
                    my_rating = '', 
                    rated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return RatingEntry(
                entry = alfresco_core_client.models.rating.Rating(
                    aggregate = alfresco_core_client.models.rating_aggregate.Rating_aggregate(
                        average = 56, 
                        number_of_ratings = 56, ), 
                    id = '', 
                    my_rating = '', 
                    rated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testRatingEntry(self):
        """Test RatingEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
