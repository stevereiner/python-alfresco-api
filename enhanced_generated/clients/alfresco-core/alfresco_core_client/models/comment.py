# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from alfresco_core_client.models.person import Person
from typing import Optional, Set
from typing_extensions import Self

class Comment(BaseModel):
    """
    Comment
    """ # noqa: E501
    can_delete: StrictBool = Field(alias="canDelete")
    can_edit: StrictBool = Field(alias="canEdit")
    content: StrictStr
    created_at: datetime = Field(alias="createdAt")
    created_by: Person = Field(alias="createdBy")
    edited: StrictBool
    id: StrictStr
    modified_at: datetime = Field(alias="modifiedAt")
    modified_by: Person = Field(alias="modifiedBy")
    title: StrictStr
    __properties: ClassVar[List[str]] = ["canDelete", "canEdit", "content", "createdAt", "createdBy", "edited", "id", "modifiedAt", "modifiedBy", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Comment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Comment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDelete": obj.get("canDelete"),
            "canEdit": obj.get("canEdit"),
            "content": obj.get("content"),
            "createdAt": obj.get("createdAt"),
            "createdBy": Person.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "edited": obj.get("edited"),
            "id": obj.get("id"),
            "modifiedAt": obj.get("modifiedAt"),
            "modifiedBy": Person.from_dict(obj["modifiedBy"]) if obj.get("modifiedBy") is not None else None,
            "title": obj.get("title")
        })
        return _obj


