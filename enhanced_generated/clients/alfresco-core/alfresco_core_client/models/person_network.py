# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_core_client.models.network_quota import NetworkQuota
from typing import Optional, Set
from typing_extensions import Self

class PersonNetwork(BaseModel):
    """
    A network is the group of users and sites that belong to an organization. Networks are organized by email domain. When a user signs up for an Alfresco account , their email domain becomes their Home Network. 
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    home_network: Optional[StrictBool] = Field(default=None, description="Is this the home network?", alias="homeNetwork")
    id: StrictStr = Field(description="This network's unique id")
    is_enabled: StrictBool = Field(alias="isEnabled")
    paid_network: Optional[StrictBool] = Field(default=None, alias="paidNetwork")
    quotas: Optional[List[NetworkQuota]] = None
    subscription_level: Optional[StrictStr] = Field(default=None, alias="subscriptionLevel")
    __properties: ClassVar[List[str]] = ["createdAt", "homeNetwork", "id", "isEnabled", "paidNetwork", "quotas", "subscriptionLevel"]

    @field_validator('subscription_level')
    def subscription_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Free', 'Standard', 'Enterprise']):
            raise ValueError("must be one of enum values ('Free', 'Standard', 'Enterprise')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonNetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quotas (list)
        _items = []
        if self.quotas:
            for _item_quotas in self.quotas:
                if _item_quotas:
                    _items.append(_item_quotas.to_dict())
            _dict['quotas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonNetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "homeNetwork": obj.get("homeNetwork"),
            "id": obj.get("id"),
            "isEnabled": obj.get("isEnabled"),
            "paidNetwork": obj.get("paidNetwork"),
            "quotas": [NetworkQuota.from_dict(_item) for _item in obj["quotas"]] if obj.get("quotas") is not None else None,
            "subscriptionLevel": obj.get("subscriptionLevel")
        })
        return _obj


