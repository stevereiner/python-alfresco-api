# coding: utf-8

"""
    Alfresco Content Services REST API

    **Core API**  Provides access to the core features of Alfresco Content Services. 

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from alfresco_core_client.models.constraint import Constraint
from typing import Optional, Set
from typing_extensions import Self

class ModelProperty(BaseModel):
    """
    ModelProperty
    """ # noqa: E501
    constraints: Optional[List[Constraint]] = Field(default=None, description="list of constraints defined for the property")
    data_type: Optional[StrictStr] = Field(default=None, description="the name of the property type (e.g. d:text)", alias="dataType")
    default_value: Optional[StrictStr] = Field(default=None, description="the default value", alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="the human-readable description")
    id: StrictStr
    is_mandatory: Optional[StrictBool] = Field(default=None, description="define if the property is mandatory", alias="isMandatory")
    is_mandatory_enforced: Optional[StrictBool] = Field(default=None, description="define if the presence of mandatory properties is enforced", alias="isMandatoryEnforced")
    is_multi_valued: Optional[StrictBool] = Field(default=None, description="define if the property is multi-valued", alias="isMultiValued")
    is_protected: Optional[StrictBool] = Field(default=None, description="define if the property is system maintained", alias="isProtected")
    title: Optional[StrictStr] = Field(default=None, description="the human-readable title")
    __properties: ClassVar[List[str]] = ["constraints", "dataType", "defaultValue", "description", "id", "isMandatory", "isMandatoryEnforced", "isMultiValued", "isProtected", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item_constraints in self.constraints:
                if _item_constraints:
                    _items.append(_item_constraints.to_dict())
            _dict['constraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "constraints": [Constraint.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "dataType": obj.get("dataType"),
            "defaultValue": obj.get("defaultValue"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "isMandatory": obj.get("isMandatory"),
            "isMandatoryEnforced": obj.get("isMandatoryEnforced"),
            "isMultiValued": obj.get("isMultiValued"),
            "isProtected": obj.get("isProtected"),
            "title": obj.get("title")
        })
        return _obj


