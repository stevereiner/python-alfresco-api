# generated by datamodel-codegen:
#   filename:  alfresco-search-sql.openapi3.yaml
#   timestamp: 2025-06-19T18:37:07+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Error1(BaseModel):
    briefSummary: Optional[str] = None
    descriptionURL: Optional[str] = None
    errorKey: Optional[str] = None
    logId: Optional[str] = None
    stackTrace: Optional[str] = None
    statusCode: Optional[int] = None


class Error(BaseModel):
    error: Error1


class Pagination(BaseModel):
    count: int = Field(..., description="The number of objects in the entries array.\n")
    hasMoreItems: bool = Field(
        ...,
        description="A boolean value which is **true** if there are more entities in the collection\nbeyond those in this response. A true value means a request with a larger value\nfor the **skipCount** or the **maxItems** parameter will return more entities.\n",
    )
    maxItems: int = Field(
        ...,
        description="The value of the **maxItems** parameter used to generate this list,\nor if there was no **maxItems** parameter the default value is 100\n",
    )
    skipCount: int = Field(
        ...,
        description="An integer describing how many entities exist in the collection before\nthose included in this list.\n",
    )
    totalItems: Optional[int] = Field(
        None,
        description="An integer describing the total number of entities in the collection.\nThe API might not be able to determine this value,\nin which case this property will not be present.\n",
    )


class SQLResultSetRowEntry(BaseModel):
    label: Optional[str] = None
    value: Optional[str] = None


class SQLSearchRequest(BaseModel):
    filterQueries: Optional[List[str]] = None
    format: Optional[str] = None
    includeMetadata: Optional[bool] = None
    locales: Optional[List[str]] = None
    stmt: Optional[str] = None
    timezone: Optional[str] = None


class Doc(BaseModel):
    label: Optional[str] = None
    value: Optional[str] = None


class Docs(RootModel[List[Doc]]):
    root: List[Doc] = Field(
        ...,
        description="Array of documents returned by the query, note that this is a Solr convention.",
    )


class ListModel(BaseModel):
    entries: Optional[List[SQLResultSetRowEntry]] = None
    pagination: Optional[Pagination] = None


class SQLResultSetPaging(BaseModel):
    list: Optional[ListModel] = None


class SolrResultSet(BaseModel):
    result_set: Optional[Docs] = Field(None, alias="result-set")
