# generated by datamodel-codegen:
#   filename:  alfresco-workflow.openapi3.yaml
#   timestamp: 2025-06-19T18:37:11+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class CandidateType(Enum):
    user = "user"
    group = "group"


class Candidate(BaseModel):
    candidateId: Optional[str] = None
    candidateType: Optional[CandidateType] = None


class CandidateEntry(BaseModel):
    entry: Optional[Candidate] = None


class Company(BaseModel):
    address1: Optional[str] = None
    address2: Optional[str] = None
    address3: Optional[str] = None
    email: Optional[str] = None
    fax: Optional[str] = None
    organization: Optional[str] = None
    postcode: Optional[str] = None
    telephone: Optional[str] = None


class Deployment(BaseModel):
    category: Optional[str] = None
    deployedAt: Optional[datetime] = None
    id: str
    name: Optional[str] = None


class DeploymentEntry(BaseModel):
    entry: Optional[Deployment] = None


class Error1(BaseModel):
    briefSummary: Optional[str] = None
    descriptionURL: Optional[str] = None
    errorKey: Optional[str] = None
    logId: Optional[str] = None
    stackTrace: Optional[str] = None
    statusCode: Optional[int] = None


class Error(BaseModel):
    error: Error1


class ItemBody(BaseModel):
    id: Optional[str] = None


class Pagination(BaseModel):
    count: Optional[int] = Field(
        None, description="The number of objects in the entries array.\n"
    )
    hasMoreItems: Optional[bool] = Field(
        None,
        description="A boolean value which is **true** if there are more entities in the collection\nbeyond those in this response. A true value means a request with a larger value\nfor the **skipCount** or the **maxItems** parameter will return more entities.\n",
    )
    maxItems: Optional[int] = Field(
        None,
        description="The value of the **maxItems** parameter used to generate this list,\nor if there was no **maxItems** parameter the default value, 10\n",
    )
    skipCount: Optional[int] = Field(
        None,
        description="An integer describing how many entities exist in the collection before\nthose included in this list.\n",
    )
    totalItems: Optional[int] = Field(
        None,
        description="An integer describing the total number of entities in the collection.\nThe API might not be able to determine this value,\nin which case this property will not be present.\n",
    )


class Person(BaseModel):
    avatarId: Optional[str] = None
    company: Optional[Company] = None
    description: Optional[str] = None
    email: Optional[str] = None
    emailNotificationsEnabled: Optional[bool] = None
    enabled: Optional[bool] = True
    firstName: Optional[str] = None
    googleId: Optional[str] = None
    id: str
    instantMessageId: Optional[str] = None
    jobTitle: Optional[str] = None
    lastName: Optional[str] = None
    location: Optional[str] = None
    mobile: Optional[str] = None
    skypeId: Optional[str] = None
    statusUpdatedAt: Optional[datetime] = None
    telephone: Optional[str] = None
    userStatus: Optional[str] = None


class Process(BaseModel):
    businessKey: Optional[str] = Field(None, description="The business key")
    deleteReason: Optional[str] = Field(
        None, description="The reason this process was canceled"
    )
    durationInMs: Optional[int] = Field(
        None, description="The duration of this process"
    )
    endActivityDefinitionId: Optional[str] = Field(
        None, description="The id of the last activity in the process"
    )
    endedAt: Optional[datetime] = Field(
        None, description="The date time this process started"
    )
    id: str = Field(..., description="The unique id of this process")
    processDefinitionId: Optional[str] = Field(
        None, description="The unique identity of the owning process definition"
    )
    startActivityDefinitionId: Optional[str] = Field(
        None, description="The id of the first activity in the process"
    )
    startUserId: Optional[str] = Field(
        None, description="The id of the user who started the process"
    )
    startedAt: Optional[datetime] = Field(
        None, description="The date time this process started"
    )


class ProcessBodyVariable(BaseModel):
    bpm_assignee: Optional[str] = None
    bpm_sendEMailNotifications: Optional[bool] = None
    bpm_workflowPriority: Optional[int] = None


class ProcessDefinition(BaseModel):
    category: Optional[str] = Field(
        None, description="The category to which this process definition belongs"
    )
    deploymentId: Optional[str] = Field(
        None, description="The deployment of which this process definition is a part"
    )
    description: Optional[str] = Field(
        None, description="The description of this process definition"
    )
    graphicNotationDefined: Optional[bool] = None
    id: str = Field(..., description="The unique id of this process definition")
    key: Optional[str] = Field(None, description="The key of this process definition")
    name: Optional[str] = Field(None, description="The name of this process definition")
    startFormResourceKey: Optional[str] = Field(None, description="The start form key")
    title: Optional[str] = Field(
        None, description="The title of this process definition"
    )


class ProcessDefinitionEntry(BaseModel):
    entry: Optional[ProcessDefinition] = None


class List3(BaseModel):
    entries: Optional[List[ProcessDefinitionEntry]] = None
    pagination: Optional[Pagination] = None


class ProcessDefinitionPaging(BaseModel):
    list: Optional[List3] = None


class ProcessEntry(BaseModel):
    entry: Optional[Process] = None


class List4(BaseModel):
    entries: Optional[List[ProcessEntry]] = None
    pagination: Optional[Pagination] = None


class ProcessPaging(BaseModel):
    list: Optional[List4] = None


class State(Enum):
    unclaimed = "unclaimed"
    claimed = "claimed"
    completed = "completed"
    resolved = "resolved"


class TaskFormModel(BaseModel):
    allowedValues: Optional[List[str]] = Field(
        None, description="An array of allowed values for this item"
    )
    dataType: Optional[str] = None
    defaultValue: Optional[str] = None
    name: Optional[str] = None
    qualifiedName: Optional[str] = None
    required: Optional[bool] = None
    title: Optional[str] = None


class TaskFormModelEntry(BaseModel):
    entry: Optional[TaskFormModel] = None


class List5(BaseModel):
    entries: Optional[List[TaskFormModelEntry]] = None
    pagination: Optional[Pagination] = None


class TaskFormModelPaging(BaseModel):
    list: Optional[List5] = None


class Variable(BaseModel):
    name: Optional[str] = None
    scope: Optional[str] = None
    type: Optional[str] = None
    value: Optional[int] = None


class VariableBody(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    value: Optional[int] = None


class VariableEntry(BaseModel):
    entry: Optional[Variable] = None


class List7(BaseModel):
    entries: Optional[List[VariableEntry]] = None
    pagination: Optional[Pagination] = None


class VariablePaging(BaseModel):
    list: Optional[List7] = None


class ListModel(BaseModel):
    entries: Optional[List[CandidateEntry]] = None
    pagination: Optional[Pagination] = None


class CandidatePaging(BaseModel):
    list: Optional[ListModel] = None


class List1(BaseModel):
    entries: Optional[List[DeploymentEntry]] = None
    pagination: Optional[Pagination] = None


class DeploymentPaging(BaseModel):
    list: Optional[List1] = None


class Item(BaseModel):
    createdAt: Optional[datetime] = None
    createdBy: Optional[Person] = None
    description: Optional[str] = None
    edited: Optional[bool] = None
    id: Optional[str] = None
    mimeType: Optional[str] = None
    modifiedAt: Optional[datetime] = None
    modifiedBy: Optional[Person] = None
    name: Optional[str] = None
    size: Optional[int] = None
    title: Optional[str] = None
    value: Optional[int] = None


class ItemEntry(BaseModel):
    entry: Optional[Item] = None


class List2(BaseModel):
    entries: Optional[List[ItemEntry]] = None
    pagination: Optional[Pagination] = None


class ItemPaging(BaseModel):
    list: Optional[List2] = None


class ProcessBody(BaseModel):
    processDefinitionKey: Optional[str] = None
    variables: Optional[ProcessBodyVariable] = None


class Task(BaseModel):
    activityDefinitionId: Optional[str] = Field(
        None, description="The activity id of this task"
    )
    assignee: Optional[str] = Field(
        None, description="The id of the user who is currently assigned this task"
    )
    description: Optional[str] = Field(None, description="The description of this task")
    dueAt: Optional[datetime] = Field(
        None, description="The date time this task is due"
    )
    durationInMs: Optional[int] = Field(None, description="The duration of this task")
    endedAt: Optional[datetime] = Field(
        None, description="The date time this task started"
    )
    formResourceKey: Optional[str] = Field(
        None, description="The key of the form for this task"
    )
    id: str = Field(..., description="The unique id of this task")
    name: Optional[str] = Field(None, description="The text name of this task")
    owner: Optional[str] = Field(
        None, description="The id of the user who owns this task"
    )
    priority: Optional[int] = Field(
        None, description="The numeric priority of this task"
    )
    processDefinitionId: Optional[str] = Field(
        None, description="The unique identity of the owning process definition"
    )
    processId: Optional[str] = Field(
        None, description="The containing process's unique id"
    )
    startedAt: Optional[datetime] = Field(
        None, description="The date time this task started"
    )
    state: Optional[State] = Field(None, description="The state of this task")
    variables: Optional[List[Variable]] = Field(
        None, description="An array of variables for this task"
    )


class TaskBody(BaseModel):
    description: Optional[str] = Field(None, description="The description of this task")
    dueAt: Optional[datetime] = Field(
        None, description="The date time this task is due"
    )
    name: Optional[str] = Field(None, description="The text name of this task")
    owner: Optional[str] = Field(
        None, description="The id of the user who owns this task"
    )
    priority: Optional[int] = Field(
        None, description="The numeric priority of this task"
    )
    state: Optional[State] = Field(None, description="The state of this task")
    variables: Optional[List[Variable]] = Field(
        None, description="An array of variables for this task"
    )


class TaskEntry(BaseModel):
    entry: Optional[Task] = None


class List6(BaseModel):
    entries: Optional[List[TaskEntry]] = None
    pagination: Optional[Pagination] = None


class TaskPaging(BaseModel):
    list: Optional[List6] = None
