# generated by datamodel-codegen:
#   filename:  alfresco-model.openapi3.yaml
#   timestamp: 2025-06-19T18:36:59+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AbstractClassAssociationSource(BaseModel):
    cls: Optional[str] = None
    isMandatory: Optional[bool] = None
    isMandatoryEnforced: Optional[bool] = None
    isMany: Optional[bool] = None
    role: Optional[str] = None


class Constraint(BaseModel):
    description: Optional[str] = Field(
        None, description="the human-readable constraint description"
    )
    id: str
    parameters: Optional[Dict[str, Dict[str, Any]]] = None
    title: Optional[str] = Field(
        None, description="the human-readable constraint title"
    )
    type: Optional[str] = Field(None, description="the type of the constraint")


class Error1(BaseModel):
    briefSummary: Optional[str] = None
    descriptionURL: Optional[str] = None
    errorKey: Optional[str] = None
    logId: Optional[str] = None
    stackTrace: Optional[str] = None
    statusCode: Optional[int] = None


class Error(BaseModel):
    error: Error1


class Model(BaseModel):
    author: Optional[str] = None
    description: Optional[str] = None
    id: str
    namespacePrefix: Optional[str] = None
    namespaceUri: Optional[str] = None


class Pagination(BaseModel):
    count: Optional[int] = Field(
        None, description="The number of objects in the entries array.\n"
    )
    hasMoreItems: Optional[bool] = Field(
        None,
        description="A boolean value which is **true** if there are more entities in the collection\nbeyond those in this response. A true value means a request with a larger value\nfor the **skipCount** or the **maxItems** parameter will return more entities.\n",
    )
    maxItems: Optional[int] = Field(
        None,
        description="The value of the **maxItems** parameter used to generate this list.\nIf there was no **maxItems** parameter then the default value is 100.\n",
    )
    skipCount: Optional[int] = Field(
        None,
        description="An integer describing how many entities exist in the collection before\nthose included in this list. If there was no **skipCount** parameter then the\ndefault value is 0.\n",
    )
    totalItems: Optional[int] = Field(
        None,
        description="An integer describing the total number of entities in the collection.\nThe API might not be able to determine this value,\nin which case this property will not be present.\n",
    )


class Property(BaseModel):
    constraints: Optional[List[Constraint]] = Field(
        None, description="list of constraints defined for the property"
    )
    dataType: Optional[str] = Field(
        None, description="the name of the property type (e.g. d:text)"
    )
    defaultValue: Optional[str] = Field(None, description="the default value")
    description: Optional[str] = Field(
        None, description="the human-readable description"
    )
    id: str
    isMandatory: Optional[bool] = Field(
        None, description="define if the property is mandatory"
    )
    isMandatoryEnforced: Optional[bool] = Field(
        None, description="define if the presence of mandatory properties is enforced"
    )
    isMultiValued: Optional[bool] = Field(
        None, description="define if the property is multi-valued"
    )
    isProtected: Optional[bool] = Field(
        None, description="define if the property is system maintained"
    )
    title: Optional[str] = Field(None, description="the human-readable title")


class AbstractClassAssociation(BaseModel):
    description: Optional[str] = None
    id: str
    isChild: Optional[bool] = None
    isProtected: Optional[bool] = None
    source: Optional[AbstractClassAssociationSource] = None
    target: Optional[AbstractClassAssociationSource] = None
    title: Optional[str] = None


class AbstractClass(BaseModel):
    associations: Optional[List[AbstractClassAssociation]] = None
    description: Optional[str] = None
    id: str
    includedInSupertypeQuery: Optional[bool] = None
    isArchive: Optional[bool] = None
    isContainer: Optional[bool] = None
    mandatoryAspects: Optional[List[str]] = None
    model: Optional[Model] = None
    parentId: Optional[str] = None
    properties: Optional[List[Property]] = None
    title: str


class Aspect(RootModel[AbstractClass]):
    root: AbstractClass


class AspectEntry(BaseModel):
    entry: Aspect


class ListModel(BaseModel):
    entries: Optional[List[AspectEntry]] = None
    pagination: Optional[Pagination] = None


class AspectPaging(BaseModel):
    list: Optional[ListModel] = None


class Type(RootModel[AbstractClass]):
    root: AbstractClass


class TypeEntry(BaseModel):
    entry: Type


class List1(BaseModel):
    entries: Optional[List[TypeEntry]] = None
    pagination: Optional[Pagination] = None


class TypePaging(BaseModel):
    list: Optional[List1] = None
