openapi: 3.0.0
info:
  description: |
    **Workflow API**

    Provides access to the workflow features of Alfresco Content Services.
  title: Alfresco Content Services REST API
  version: "1"
paths:
  /deployments:
    get:
      description: |
        Gets a list of deployments.

        The authenticated user must have role admin (non-network deployments) or
        network admin (networks enabled).

        If networks are enabled, the network admin can only see the deployments
        in the given network.
      operationId: listDeployments
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeploymentPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List deployments
      tags:
        - deployments
  "/deployments/{deploymentId}":
    delete:
      description: >
        This request will delete the deployment including the tasks, process
        definitions contained in the deployment.


        The request will also delete processes and history information associated with the deployment.
      operationId: deleteDeployment
      parameters:
        - description: The unique id must be a String. It is returned as an **id** from
            the entity
          in: path
          name: deploymentId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a deployment
      tags:
        - deployments
    get:
      description: >
        Gets a specified deployment defined by **deploymentId**.


        The authenticated user must have role admin (non-network deployments) or

        network admin (networks enabled).


        If networks are enabled, the deployment is only returned if the deployment

        is in the given network.
      operationId: getDeployment
      parameters:
        - description: The unique id must be a String. It is returned as an **id** from
            the entity.
          in: path
          name: deploymentId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeploymentEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **deploymentId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a deployment
      tags:
        - deployments
  /process-definitions:
    get:
      description: |
        Gets a list of process definitions.

        In non-network deployments, any authenticated user will see all the
        process definitions.

        If networks are enabled, the network admin can only see the deployments
        in the given network.
      operationId: listProcessDefinitions
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinitionPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List process definitions
      tags:
        - process-definitions
  "/process-definitions/{processDefinitionId}":
    get:
      description: |
        Gets a process definition identified by **processDefinitionId**.

        In non-network deployments, any authenticated user will see all the
        process definitions. If networks are enabled, the network admin can only
        see the deployments in the given network.
      operationId: getProcessDefinition
      parameters:
        - $ref: "#/components/parameters/processDefinitionIdParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessDefinitionEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **processDefinitionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a process definition
      tags:
        - process-definitions
  "/process-definitions/{processDefinitionId}/image":
    get:
      description: >
        Gets an image that represents a single process definition identified by
        **processDefinitionId**.


        In non-network deployments, any authenticated user will see all the

        process definitions.


        If networks are enabled, the network admin can only see the deployments

        in the given network.
      operationId: getProcessDefinitionImage
      parameters:
        - $ref: "#/components/parameters/processDefinitionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        "401":
          description: Authentication failed
        "404":
          description: |
            **processDefinitionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            image/png:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a process definition image
      tags:
        - process-definitions
  "/process-definitions/{processDefinitionId}/start-form-model":
    get:
      description: >
        Gets a model of the start form type definition.


        An authenticated user will have access to all start form models.

        In a network, only start form models that are inside the given network are returned.
      operationId: getProcessDefinitionStartFormModel
      parameters:
        - $ref: "#/components/parameters/processDefinitionIdParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskFormModelPaging"
        "401":
          description: Authentication failed
        "404":
          description: |
            **processDefinitionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a start form model
      tags:
        - process-definitions
  /processes:
    get:
      description: >
        Gets a  list of processes.


        An authenticated user will have access to a processes if the user has

        started the process or if the user is involved in any of the process’s

        tasks. In a network, only processes that are inside the given network are

        returned.


        In non-network deployments, any authenticated user will see all the

        process definitions.


        If networks are enabled, the network admin can only see the deployments

        in the given network.
      operationId: listProcesses
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List processes
      tags:
        - processes
    post:
      description: >
        Creates a new process.


        In non-network deployments, any authenticated user can start a new process for

        any process definition.


        If networks are enabled, the authenticated user can start a new process for a

        process definition in the user's network.


        **Note:** You can start more than one process by

        specifying a list of process entries in the JSON body like this:


        ```JSON

        [
          {
             "processDefinitionKey": "activitiAdhoc",
             "variables": {
                "bpm_assignee": "fred"
            }
          },
          {
             "processDefinitionKey": "activitiAdhoc",
             "variables": {
                "bpm_assignee": "joe"
            }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createProcess
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessBody"
        description: process properties
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessEntry"
        "400":
          description: |
            Invalid parameter: **processBody** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a process
      tags:
        - processes
  "/processes/{processId}":
    delete:
      description: Deletes the process with the specified **processId**.
      operationId: deleteProcess
      parameters:
        - $ref: "#/components/parameters/processIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: The processId does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a process
      tags:
        - processes
    get:
      description: >
        Gets the process identified by **processId**.


        An authenticated user will have access to a process if the user has

        started the process or if the user is involved in any of the process’s

        tasks. In a network, only processes that are inside the given network are

        returned.


        In non-network deployments, administrators can see all processes and

        perform all operations on tasks. In network deployments, network

        administrators can see all processes in their network and perform all

        operations on tasks in their network.
      operationId: getProcess
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a process
      tags:
        - processes
  "/processes/{processId}/items":
    get:
      description: |
        Gets a list of items for the specified process **processId**.

        An authenticated user will have access to a processes items if the
        user has started the process or if the user is involved in any of the
        process’s tasks.  In a network, only items for a process that is
        inside the given network are returned.

        In non-network deployments, administrators can see all items and
        perform all operations  on those items. In network deployments,
        network administrators can see all items in their network and
        perform all operations on items in their network.
      operationId: listProcessItems
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List items
      tags:
        - processes
    post:
      description: >
        Creates an item for process **processId**".


        If the item  already is part of that process the request will have no effect.


        **Note:** You can create more than one item by

        specifying a list of items in the JSON body like this:


        ```JSON

        [
          {
             "id": "1ff9da1a-ee2f-4b9c-8c34-44665e844444"
          },
          {
             "id": "1ff9da1a-ee2f-4b9c-8c34-44665e855555"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createProcessItem
      parameters:
        - $ref: "#/components/parameters/processIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemBody"
        description: The **nodeId** of the item
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemPaging"
        "400":
          description: |
            Invalid parameter: **itemBody** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create an item
      tags:
        - processes
  "/processes/{processId}/items/{itemId}":
    delete:
      description: >
        Deletes the item with the specified **itemId** from the process with the
        specified **processId**.
      operationId: deleteProcessItem
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/itemIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: The **processId** does not exist or the **itemId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete an item
      tags:
        - processes
  "/processes/{processId}/tasks":
    get:
      description: |
        Gets a list of tasks for the specified process **processId**.

        An authenticated user will have access to a processes tasks if the
        user has started the process or if the user is involved in any of the
        process’s tasks.  In a network, only tasks for a process that is
        inside the given network are returned.

        In non-network deployments, administrators can see all tasks and
        perform all operations  on those tasks. In network deployments,
        network administrators can see all tasks in their network and
        perform all operations on tasks in their network.
      operationId: listTasksForProcess
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
        - $ref: "#/components/parameters/orderByParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**, or
            **orderBy** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List tasks for a process
      tags:
        - tasks
  "/processes/{processId}/variables":
    get:
      description: |
        Gets a list of variables for the process **processId**.

        An authenticated user will have access to a processes variables if the
        user has started  the process or if the user is involved in any of the
        process’s tasks.  In a network, only variables for a process that is
        inside the given network are returned.

        In non-network deployments, administrators can see all variables and
        perform all operations  on those variable. In network deployments,
        network administrators can see all variables in  their network and
        perform all operations on variables in their network.
      operationId: listProcessVariables
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariablePaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List variables
      tags:
        - processes
    post:
      description: >
        Create or update a variable for a given process.

        If the variable does not exist yet, it will be created.        



        **Note:** You can create or update more than one variable by 

        specifying a list of variables in the JSON body like this:


        ```JSON

        [
          {
            "name": "string",
            "value": "string",
            "type": "string"
          },
          {
            "name": "string",
            "value": "string",
            "type": "string"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                 ...
                }
              }
            ]
          }
        }

        ```
      operationId: createProcessVariables
      parameters:
        - $ref: "#/components/parameters/processIdParam"
      requestBody:
        $ref: "#/components/requestBodies/VariableBody"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableEntry"
        "400":
          description: |
            Invalid parameter: **variableBody** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create or update variables
      tags:
        - processes
  "/processes/{processId}/variables/{variableName}":
    delete:
      description: Deletes the variable **variableName** from the process with the
        specified **processId**.
      operationId: deleteProcessVariable
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/variableNameParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: The **processId** does not exist or the **variableName** does not
            exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a variable
      tags:
        - processes
    put:
      description: >
        Creates or updates a specific variable **variableName** for process
        **processId**.
      operationId: createProcessVariable
      parameters:
        - $ref: "#/components/parameters/processIdParam"
        - $ref: "#/components/parameters/variableNameParam"
      requestBody:
        $ref: "#/components/requestBodies/VariableBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableEntry"
        "400":
          description: |
            Invalid parameter: **variableBody** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **processId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create or update a variable
      tags:
        - processes
  /tasks:
    get:
      description: |
        Gets a list of tasks visible to the authenticated user.

        Tasks are returned for which the authenticated user is the assignee  or
        a candidate. If networks are enabled, the only tasks that are inside
        the given network are returned.

        In non-network deployments, administrators can see all processes and
        perform all operations on tasks. In network deployments, network
        administrators can see all processes in their network and perform all
        operations on tasks in their network.
      operationId: listTasks
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List tasks
      tags:
        - tasks
  "/tasks/{taskId}":
    get:
      description: |
        Gets the task identified by **taskId**.

        An authenticated user will have access to a task if the user has
        started the process or if the user is involved in any of the process’s
        tasks. In a network, only tasks that are inside the given network are
        returned.

        In non-network deployments, administrators can see all processes and
        perform all operations on tasks. In network deployments, network
        administrators can see all processes in their network and perform all
        operations on tasks in their network.
      operationId: getTask
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a task
      tags:
        - tasks
    put:
      description: >
        Updates the state of the task **taskId**.


        To perform a task action the authenticated user must be the assignee  or

        a candidate. If networks is enabled, the task action is only

        performed  if the task is inside the given network.


        In non-network deployments, administrators can perform all operations

        on  tasks. In network deployments, network administrators can see all

        tasks  in their network and perform all operations on tasks in their

        network.


        You use the **select** parameter in the URL to specify a comma-separated list of

        properties in the

        task that you want to update. Use the JSON body to specify the new values for those

        properties.


        So for example to change the state of task **123** to **completed**, use

        this URL

        http://localhost:8080/alfresco/api/-default-/public/workflow/versions/1/tasks/123?select=state, and

        provide this request body:


        ```JSON

        {
          "state": "completed"
        }

        ```

        State Transitions

        =================


        Clients can invoke actions by assigning an allowed value to the state property of a task.

        The select parameter can be used to allow for a partial update of the resource.

        Alfresco will check for illegal state transitions and return an HTTP Bad Request (Response 400)

        if an illegal state transition is attempted.

        There are five state transitions, completing, claiming, unclaiming, delegating, resolving.


        Completing a task

        -----------------


        If variables are included in the JSON body, they will be set in the task and then the process will continue.


        To complete a task, the authenticated user must be the assignee of the task, the owner of the task, or have started the process.


        In non-network deployments, administrators can perform this task operation on all tasks.

        In network deployments, network administrators can perform this action on all tasks in their network.


        Here's an example PUT request


        ```

        /tasks/123?select=state,variables

        ```

        Here's is a corresponding PUT request body:


        ```JSON

        {
          “state : “completed”,
          “variables” : [
          {
            "name" : "bpm_priority",
            "type" : "d_int",
            "value" : 1,
            "scope" : "global"
          }
         ]
        }

        ```


        Claiming a task

        -----------------


        To claim a task, the authenticated user must be the assignee of the task,

        the owner of the task, or have started the process.


        Here's an example PUT request


        ```

        /tasks/123?select=state

        ```

        Here's a corresponding PUT request body:


        ```JSON

        {
          “state : “claimed”
        }

        ```


        Unclaiming a task

        -----------------


        This removes the current assignee of the task.


        To unclaim a task, the authenticated user must be the assignee of the task,

        the owner of the task, or have started the process.


        Here's an example PUT request


        ```

        /tasks/123?select=state

        ```

        Here's a corresponding PUT request body:


        ```JSON

        {
          “state : “unclaimed”
        }

        ```


        Delegating a task

        -----------------


        This delegates the task from the owner to an assignee.

        The result is the same as if the assignee had claimed the task,

        but the task can then be resolved and the owner will

        become the assignee again.


        To delegate a task, the authenticated user must be the

        assignee of the task and the assignee must be different from the owner.


        Here's an example PUT request


        ```

        /tasks/123?select=state,assignee

        ```

        Here's a corresponding PUT request body:


        ```JSON

        {
          “state : “delegated”,
          “assignee : “Kermit”
        }

        ```

        Resolving a task

        -----------------


        This returns a delegated task back to the owner.

        In order to delegate a task, the authenticated user

        must be the assignee of the task and the assignee must

        be different from the owner.


        To resolve a task, the authenticated user must be

        the assignee of the task, the owner of the task,

        or have started the process.


        Here's an example PUT request


        ```

        /tasks/123?select=state

        ```

        Here's a corresponding PUT request body:


        ```JSON

        {
          “state : “resolved”
        }

        ```
      operationId: updateTask
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/selectParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskBody"
        description: An object containing the properties to be updated
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskEntry"
        "400":
          description: |
            Invalid parameter: **taskBody** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a task
      tags:
        - tasks
  "/tasks/{taskId}/candidates":
    get:
      description: >
        Gets a list of candidate users and groups for the specified task
        **taskId**.
      operationId: listTaskCandidates
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidatePaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List task candidates
      tags:
        - tasks
  "/tasks/{taskId}/items":
    get:
      description: |
        Gets a list of items for the specified task **taskId**.

        An authenticated user will have access to a task's items if the
        user has started the process or if the user is involved in any of the
        process’s tasks.  In a network, only items for a process that is
        inside the given network are returned.

        In non-network deployments, administrators can see all items and
        perform all operations  on those items. In network deployments,
        network administrators can see all items in their network and
        perform all operations on items in their network.
      operationId: listTaskItems
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List items
      tags:
        - tasks
    post:
      description: >
        Creates an item for a given task **taskId**.


        If the item  already is part of that task the request will have no effect.


        **Note:** You can create more than one item by

        specifying a list of items in the JSON body like this:


        ```JSON

        [
          {
             "id": "1ff9da1a-ee2f-4b9c-8c34-44665e844444"
          },
          {
             "id": "1ff9da1a-ee2f-4b9c-8c34-44665e855555"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createTaskItem
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemBody"
        description: The nodeId of the item
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemPaging"
        "400":
          description: |
            Invalid parameter: **itemBody** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create an item
      tags:
        - tasks
  "/tasks/{taskId}/items/{itemId}":
    delete:
      description: >
        Deletes the item with the specified **itemId** from the task with the
        specified **taskId**.
      operationId: deleteTaskItem
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/itemIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: The **taskId** does not exist or the **itemId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete an item
      tags:
        - tasks
  "/tasks/{taskId}/task-form-model":
    get:
      description: >
        Gets the model of the task form type definition.


        An authenticated user will have access to  access to all task form models.

        In a network, only task form models that are inside the given network

        are returned.
      operationId: getTaskFormModel
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskFormModelPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a task form model
      tags:
        - tasks
  "/tasks/{taskId}/variables":
    get:
      description: |
        Gets a list of variables for the specified task **taskId**.

        An authenticated user will have access to a tasks variables if the
        user has started the process or if the user is involved in any of the
        process’s tasks.  In a network, only variables for a process that is
        inside the given network are returned.

        In non-network deployments, administrators can see all variables and
        perform all operations  on those variable. In network deployments,
        network administrators can see all variables in  their network and
        perform all operations on variables in their network.
      operationId: listTaskVariables
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/propertiesParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariablePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**, or
            **where** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List variables
      tags:
        - tasks
    post:
      description: >
        Create or update a variable for the task **taskId**.

        If the variable does not exist yet, it will be created.      



        **Note:** You can create or update more than one variable by 

        specifying a list of variables in the JSON body like this:


        ```JSON

        [
          {
            "name": "string",
            "value": "string",
            "type": "string"
          },
          {
            "name": "string",
            "value": "string",
            "type": "string"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                 ...
                }
              }
            ]
          }
        }

        ```
      operationId: createTaskVariables
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
      requestBody:
        $ref: "#/components/requestBodies/Variable"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create or update variables
      tags:
        - tasks
  "/tasks/{taskId}/variables/{variableName}":
    delete:
      description: >
        Deletes the variable with the specified **variableName** from the task
        with the specified **taskId**.
      operationId: deleteTaskVariable
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/variableNameParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: The **taskId** does not exist or the **variableName** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a variable
      tags:
        - tasks
    put:
      description: >
        Creates or updates a specific variable **variableName** for a given task
        **taskId**.
      operationId: updateTaskVariable
      parameters:
        - $ref: "#/components/parameters/taskIdParam"
        - $ref: "#/components/parameters/variableNameParam"
      requestBody:
        $ref: "#/components/requestBodies/Variable"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableEntry"
        "400":
          description: |
            Invalid parameter: **variableBody** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **taskId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create or update a variable
      tags:
        - tasks
security:
  - basicAuth: []
tags:
  - description: Retrieve and manage deployments
    name: deployments
  - description: Retrieve and manage process definitions
    name: process-definitions
  - description: Retrieve and manage processes
    name: processes
  - description: Retrieve and manage tasks
    name: tasks
servers:
  - url: /alfresco/api/-default-/public/workflow/versions/1
components:
  parameters:
    itemIdParam:
      description: The identifier of an item.
      in: path
      name: itemId
      required: true
      schema:
        type: string
    maxItemsParam:
      description: The maximum number of items to return in the list.
      in: query
      name: maxItems
      required: false
      schema:
        type: integer
        minimum: 1
    orderByParam:
      description: >
        A string to control the order of the entities returned in a list. You
        can use the **orderby** parameter to

        sort the list by one or more fields.


        Each field has a default sort order, which is normally ascending order. Read the API method implementation notes

        above to check if any fields used in this method have a descending default search order.


        To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
      in: query
      name: orderBy
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    processDefinitionIdParam:
      description: The identifier of a process definition.
      in: path
      name: processDefinitionId
      required: true
      schema:
        type: string
    processIdParam:
      description: The identifier of a process.
      in: path
      name: processId
      required: true
      schema:
        type: string
    propertiesParam:
      description: A list of property names. You can use the properties parameter to
        restrict the number of returned properties.
      in: query
      name: properties
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    selectParam:
      description: A string specifying a required subset of properties to be returned
        for an entity or list of entities. Properties are separated by commas.
      in: query
      name: select
      required: false
      schema:
        type: integer
    skipCountParam:
      description: The number of entities that  exist in the collection before those
        included in this list.
      in: query
      name: skipCount
      required: false
      schema:
        type: integer
        minimum: 0
    taskIdParam:
      description: The identifier of a task.
      in: path
      name: taskId
      required: true
      schema:
        type: string
    variableNameParam:
      description: The name of a variable.
      in: path
      name: variableName
      required: true
      schema:
        type: string
    whereParam:
      description: A string to restrict the returned objects by using a predicate.
      in: query
      name: where
      required: false
      schema:
        type: string
  requestBodies:
    VariableBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VariableBody"
      description: A variable
      required: true
    Variable:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Variable"
      description: A variable
      required: true
  securitySchemes:
    basicAuth:
      description: HTTP Basic Authentication
      type: http
      scheme: basic
  schemas:
    Candidate:
      description: |
        A candidate item.
      properties:
        candidateId:
          type: string
        candidateType:
          enum:
            - user
            - group
          type: string
      type: object
    CandidateEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Candidate"
      type: object
    CandidatePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/CandidateEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Company:
      properties:
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        email:
          type: string
        fax:
          type: string
        organization:
          type: string
        postcode:
          type: string
        telephone:
          type: string
      type: object
    Deployment:
      description: >
        A deployment resource represents one file inside a deployment.


        Process files, forms and perhaps some other files are authored in

        a separate environment. The act of deployment brings them into the runtime

        workflow engine.


        A deployment is a collection of files that include all resources to specify

        one or more process definitions. After deployment, the included process

        definitions are known to the workflow runtime engine and new processes can

        be started.


        Users can then continue to edit the process and other files in their

        authoring environment like e.g. our eclipse based process editor.

        A redeployment will result in a complete separate deployment containing new

        versions of the process definition.


        When a process definition inside a new deployment has the same key as an

        existing process definition, then it is considered a new version of the

        existing process definition.
      properties:
        category:
          type: string
        deployedAt:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
      required:
        - id
      type: object
    DeploymentEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Deployment"
      type: object
    DeploymentPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/DeploymentEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Error:
      properties:
        error:
          properties:
            briefSummary:
              type: string
            descriptionURL:
              type: string
            errorKey:
              type: string
            logId:
              type: string
            stackTrace:
              type: string
            statusCode:
              format: int32
              type: integer
          type: object
      required:
        - error
      type: object
    Item:
      description: |
        A process item.
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/Person"
        description:
          type: string
        edited:
          type: boolean
        id:
          type: string
        mimeType:
          type: string
        modifiedAt:
          format: date-time
          type: string
        modifiedBy:
          $ref: "#/components/schemas/Person"
        name:
          type: string
        size:
          type: integer
        title:
          type: string
        value:
          type: integer
      type: object
    ItemBody:
      description: |
        The **nodeId** of the item
      properties:
        id:
          type: string
      type: object
    ItemEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Item"
      type: object
    ItemPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/ItemEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Pagination:
      properties:
        count:
          description: |
            The number of objects in the entries array.
          format: int32
          type: integer
        hasMoreItems:
          description: >
            A boolean value which is **true** if there are more entities in the
            collection

            beyond those in this response. A true value means a request with a larger value

            for the **skipCount** or the **maxItems** parameter will return more entities.
          type: boolean
        maxItems:
          description: |
            The value of the **maxItems** parameter used to generate this list,
            or if there was no **maxItems** parameter the default value, 10
          format: int64
          type: integer
        skipCount:
          description: >
            An integer describing how many entities exist in the collection
            before

            those included in this list.
          format: int64
          type: integer
        totalItems:
          description: >
            An integer describing the total number of entities in the
            collection.

            The API might not be able to determine this value,

            in which case this property will not be present.
          format: int64
          type: integer
      type: object
    Person:
      properties:
        avatarId:
          type: string
        company:
          $ref: "#/components/schemas/Company"
        description:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          type: boolean
        enabled:
          default: true
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        id:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        skypeId:
          type: string
        statusUpdatedAt:
          format: date-time
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      required:
        - id
      type: object
    Process:
      description: >
        A process describes a running instance of a process definition.


        When a new deployment includes a process definition that is already

        deployed with the same key, the newly deployed process definition will be

        considered a new version of the same process definition. By default

        processes will keep running in the process definition they are started in.

        But new processes can be started in the latest version of a process

        definition by using the processDefinitionKey parameter.


        In non-network deployments, administrators can see all processes and

        perform all operations on tasks. In network deployments, network

        administrators can see processes in their network and perform all

        operations on tasks in their network.
      properties:
        businessKey:
          description: The business key
          type: string
        deleteReason:
          description: The reason this process was canceled
          type: string
        durationInMs:
          description: The duration of this process
          type: integer
        endActivityDefinitionId:
          description: The id of the last activity in the process
          type: string
        endedAt:
          description: The date time this process started
          format: date-time
          type: string
        id:
          description: The unique id of this process
          type: string
        processDefinitionId:
          description: The unique identity of the owning process definition
          type: string
        startActivityDefinitionId:
          description: The id of the first activity in the process
          type: string
        startUserId:
          description: The id of the user who started the process
          type: string
        startedAt:
          description: The date time this process started
          format: date-time
          type: string
      required:
        - id
      type: object
    ProcessBody:
      description: |
        required to start a process.
      properties:
        processDefinitionKey:
          type: string
        variables:
          $ref: "#/components/schemas/ProcessBodyVariable"
      type: object
    ProcessBodyVariable:
      description: |
        A set of process variables of differing types.
      properties:
        bpm_assignee:
          type: string
        bpm_sendEMailNotifications:
          type: boolean
        bpm_workflowPriority:
          type: integer
      type: object
    ProcessDefinition:
      description: |
        A process definition is a description of an execution flow in terms of
        activities. New processes are created and started for a process
        definition.
      properties:
        category:
          description: The category to which this process definition belongs
          type: string
        deploymentId:
          description: The deployment of which this process definition is a part
          type: string
        description:
          description: The description of this process definition
          type: string
        graphicNotationDefined:
          type: boolean
        id:
          description: The unique id of this process definition
          type: string
        key:
          description: The key of this process definition
          type: string
        name:
          description: The name of this process definition
          type: string
        startFormResourceKey:
          description: The start form key
          type: string
        title:
          description: The title of this process definition
          type: string
      required:
        - id
      type: object
    ProcessDefinitionEntry:
      properties:
        entry:
          $ref: "#/components/schemas/ProcessDefinition"
      type: object
    ProcessDefinitionPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/ProcessDefinitionEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    ProcessEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Process"
      type: object
    ProcessPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/ProcessEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Task:
      description: |
        A task describes one task for a human user.
      properties:
        activityDefinitionId:
          description: The activity id of this task
          type: string
        assignee:
          description: The id of the user who is currently assigned this task
          type: string
        description:
          description: The description of this task
          type: string
        dueAt:
          description: The date time this task is due
          format: date-time
          type: string
        durationInMs:
          description: The duration of this task
          type: integer
        endedAt:
          description: The date time this task started
          format: date-time
          type: string
        formResourceKey:
          description: The key of the form for this task
          type: string
        id:
          description: The unique id of this task
          type: string
        name:
          description: The text name of this task
          type: string
        owner:
          description: The id of the user who owns this task
          type: string
        priority:
          description: The numeric priority of this task
          type: integer
        processDefinitionId:
          description: The unique identity of the owning process definition
          type: string
        processId:
          description: The containing process's unique id
          type: string
        startedAt:
          description: The date time this task started
          format: date-time
          type: string
        state:
          description: The state of this task
          enum:
            - unclaimed
            - claimed
            - completed
            - resolved
          type: string
        variables:
          description: An array of variables for this task
          items:
            $ref: "#/components/schemas/Variable"
          type: array
      required:
        - id
      type: object
    TaskBody:
      description: |
        Input body to update a specific task.
      properties:
        description:
          description: The description of this task
          type: string
        dueAt:
          description: The date time this task is due
          format: date-time
          type: string
        name:
          description: The text name of this task
          type: string
        owner:
          description: The id of the user who owns this task
          type: string
        priority:
          description: The numeric priority of this task
          type: integer
        state:
          description: The state of this task
          enum:
            - unclaimed
            - claimed
            - completed
            - resolved
          type: string
        variables:
          description: An array of variables for this task
          items:
            $ref: "#/components/schemas/Variable"
          type: array
      type: object
    TaskEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Task"
      type: object
    TaskFormModel:
      description: |
        A task form model item.
      properties:
        allowedValues:
          description: An array of allowed values for this item
          items:
            type: string
          type: array
        dataType:
          type: string
        defaultValue:
          type: string
        name:
          type: string
        qualifiedName:
          type: string
        required:
          type: boolean
        title:
          type: string
      type: object
    TaskFormModelEntry:
      properties:
        entry:
          $ref: "#/components/schemas/TaskFormModel"
      type: object
    TaskFormModelPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/TaskFormModelEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    TaskPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/TaskEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Variable:
      description: |
        A task variable.
      properties:
        name:
          type: string
        scope:
          type: string
        type:
          type: string
        value:
          type: integer
      type: object
    VariableBody:
      description: |
        An input process variable.
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: integer
      type: object
    VariableEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Variable"
      type: object
    VariablePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/VariableEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
