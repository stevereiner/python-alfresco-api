openapi: 3.0.0
info:
  description: |
    **Core API**

    Provides access to the core features of Alfresco Content Services.
  title: Alfresco Content Services REST API
  version: "1"
paths:
  /action-definitions:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets a list of all available actions


        The default sort order for the returned list is for actions to be sorted by ascending name.

        You can override the default by using the **orderBy** parameter.


        You can use any of the following fields to order the results:

        * name

        * title
      operationId: listActions
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDefinitionList"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount** or
            **orderBy** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Retrieve list of available actions
      tags:
        - actions
      x-alfresco-since: 5.2.2
  "/action-definitions/{actionDefinitionId}":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Retrieve the details of the action denoted by **actionDefinitionId**.
      operationId: actionDetails
      parameters:
        - $ref: "#/components/parameters/actionDefinitionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDefinitionEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **actionDefinitionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Retrieve the details of an action definition
      tags:
        - actions
      x-alfresco-since: 5.2.2
  /action-executions:
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Executes an action


        An action may be executed against a node specified by **targetId**. For example:


        ```

        {
          "actionDefinitionId": "copy",
          "targetId": "4c4b3c43-f18b-43ff-af84-751f16f1ddfd",
          "params": {
          	"destination-folder": "34219f79-66fa-4ebf-b371-118598af898c"
          }
        }

        ```


        Performing a POST with the request body shown above will result in the node identified by ```targetId```

        being copied to the destination folder specified in the ```params``` object by the key ```destination-folder```.


        **targetId** is optional, however, currently **targetId** must be a valid node ID.

        In the future, actions may be executed against different entity types or

        executed without the need for the context of an entity.



        Parameters supplied to the action within the ```params``` object will be converted to the expected type,

        where possible using the DefaultTypeConverter class. In addition:


        * Node IDs may be supplied in their short form (implicit workspace://SpacesStore prefix)

        * Aspect names may be supplied using their short form, e.g. cm:versionable or cm:auditable


        In this example, we add the aspect ```cm:versionable``` to a node using the QName resolution mentioned above:


        ```

        {
          "actionDefinitionId": "add-features",
          "targetId": "16349e3f-2977-44d1-93f2-73c12b8083b5",
          "params": {
          	"aspect-name": "cm:versionable"
          }
        }

        ```


        The ```actionDefinitionId``` is the ```id``` of an action definition as returned by

        the _list actions_ operations (e.g. GET /action-definitions).


        The action will be executed **asynchronously** with a `202` HTTP response signifying that

        the request has been accepted successfully. The response body contains the unique ID of the action

        pending execution. The ID may be used, for example to correlate an execution with output in the server logs.
      operationId: actionExec
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionBodyExec"
        description: Action execution details
        required: true
      responses:
        "202":
          description: |
            Action execution request accepted and pending execution.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionExecResultEntry"
        "400":
          description: >
            Invalid parameter: **actionDefinitionId** missing but required by
            the action
        "401":
          description: Authentication failed
        "404":
          description: |
            **actionDefinitionId** or **targetId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Execute an action
      tags:
        - actions
      x-alfresco-since: 5.2.2
  /audit-applications:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets a list of audit applications in this repository.


        This list may include pre-configured audit applications, if enabled, such as:


        * alfresco-access

        * CMISChangeLog

        * Alfresco Tagging Service

        * Alfresco Sync Service (used by Enterprise Cloud Sync)


        You must have admin rights to retrieve audit information.
      operationId: listAuditApps
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditAppPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to retrieve audit information
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List audit applications
      tags:
        - audit
      x-alfresco-since: 5.2.2
  "/audit-applications/{auditApplicationId}":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Get status of an audit application **auditApplicationId**.


        You must have admin rights to retrieve audit information.


        You can use the **include** parameter to return the minimum and/or maximum audit record id for the application.
      operationId: getAuditApp
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/auditApplicationIncludeParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditApp"
        "400":
          description: |
            Invalid parameter: invalid **auditApplicationId**
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to retrieve audit information
        "404":
          description: |
            **applicationId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get audit application info
      tags:
        - audit
      x-alfresco-since: 5.2.2
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Disable or re-enable the audit application **auditApplicationId**.


        New audit entries will not be created for a disabled audit application until

        it is re-enabled (and system-wide auditing is also enabled).


        Note, it is still possible to query &/or delete any existing audit entries even

        if auditing is disabled for the audit application.


        You must have admin rights to update audit application.
      operationId: updateAuditApp
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditBodyUpdate"
        description: The audit application to update.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditApp"
        "400":
          description: >
            Invalid parameter: **auditApplicationId** is not a valid format or
            **auditAppBodyUpdate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update audit application
        "404":
          description: |
            **auditApplicationId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update audit application info
      tags:
        - audit
      x-alfresco-since: 5.2.2
  "/audit-applications/{auditApplicationId}/audit-entries":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Permanently delete audit entries for an audit application **auditApplicationId**.


        The **where** clause must be specified, either with an inclusive time period or for

        an inclusive range of ids. The delete is within the context of the given audit application.


        For example:


        *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

        *   ```where=(id BETWEEN ('1234', '4321')```


        You must have admin rights to delete audit information.
      operationId: deleteAuditEntriesForAuditApp
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - description: >
            Audit entries to permanently delete for an audit application, given
            an inclusive time period or range of ids. For example:


            *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

            *   ```where=(id BETWEEN ('1234', '4321')```
          in: query
          name: where
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **auditApplicationId** is not a valid format or
            invalid **where**
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete audit information
        "404":
          description: |
            **auditApplicationId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Permanently delete audit entries for an audit application
      tags:
        - audit
      x-alfresco-since: 5.2.2
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets a list of audit entries for audit application **auditApplicationId**.


        You can use the **include** parameter to return additional **values** information.


        The list can be filtered by one or more of:

        * **createdByUser** person id

        * **createdAt** inclusive time period

        * **id** inclusive range of ids

        * **valuesKey** audit entry values contains the exact matching key

        * **valuesValue** audit entry values contains the exact matching value


        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**

        modifier to specify an ascending or descending sort order.


        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.


        You must have admin rights to retrieve audit information.
      operationId: listAuditEntriesForAuditApp
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/omitTotalItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - description: >
            Optionally filter the list. Here are some examples:


            *   ```where=(createdByUser='jbloggs')```


            *   ```where=(id BETWEEN ('1234', '4321')```


            *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```


            *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```


            *   ```where=(valuesKey='/alfresco-access/login/user')```


            *   ```where=(valuesKey='/alfresco-access/transaction/action' and valuesValue='DELETE')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/auditMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditEntryPaging"
        "400":
          description: >
            Invalid parameter: *auditApplicationId** is not a valid format,
            value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to retrieve audit information
        "404":
          description: |
            **applicationId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List audit entries for an audit application
      tags:
        - audit
      x-alfresco-since: 5.2.2
  "/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Permanently delete a single audit entry **auditEntryId**.


        You must have admin rights to delete audit information.
      operationId: deleteAuditEntry
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - $ref: "#/components/parameters/auditEntryIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not
            a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete audit information
        "404":
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Permanently delete an audit entry
      tags:
        - audit
      x-alfresco-since: 5.2.2
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets audit entry **auditEntryId**.


        You must have admin rights to access audit information.
      operationId: getAuditEntry
      parameters:
        - $ref: "#/components/parameters/auditApplicationIdParam"
        - $ref: "#/components/parameters/auditEntryIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditEntryEntry"
        "400":
          description: >
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not
            a valid format
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to retrieve audit information
        "404":
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get audit entry
      tags:
        - audit
      x-alfresco-since: 5.2.2
  /deleted-nodes:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of deleted nodes for the current user.


        If the current user is an administrator deleted nodes for all users will be returned.


        The list of deleted nodes will be ordered with the most recently deleted node at the top of the list.
      operationId: listDeletedNodes
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/nodeMinimalEntryIncludeParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedNodesPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List deleted nodes
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}":
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Permanently deletes the deleted node **nodeId**.
      operationId: deleteDeletedNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to permanently delete the deleted node
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Permanently delete a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the specific deleted node **nodeId**.
      operationId: getDeletedNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedNodeEntry"
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to view the deleted node
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the deleted node with identifier **nodeId**.
      operationId: getDeletedNodeContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to retrieve content of
            **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "416":
          description: Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get deleted node content
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}/renditions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.


        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.


        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**

        clause will return just the CREATED renditions:


        ```

        (status='CREATED')

        ```
      operationId: listDeletedNodeRenditions
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, is not a file,
            or **where** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List renditions for a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}/renditions/{renditionId}":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRendition
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition information for a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}/renditions/{renditionId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRenditionContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
        - description: >
            If **true** and there is no rendition for this **nodeId** and
            **renditionId**,

            then the placeholder image for the mime type of this rendition is returned, rather

            than a 404 response.
          in: query
          name: placeholder
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        "416":
          description: Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition content of a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  "/deleted-nodes/{nodeId}/restore":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Attempts to restore the deleted node **nodeId** to its original location or to a new location.


        If the node is successfully restored to its former primary parent, then only the

        primary child association will be restored, including recursively for any primary

        children. It should be noted that no other secondary child associations or peer

        associations will be restored, for any of the nodes within the primary parent-child

        hierarchy of restored nodes, irrespective of whether these associations were to

        nodes within or outside of the restored hierarchy.


        Also, any previously shared link will not be restored since it is deleted at the time

        of delete of each node.
      operationId: restoreDeletedNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletedNodeBodyRestore"
        description: The targetParentId if the node is restored to a new location.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** or **targetNodeId** is not a valid
            format
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to restore the deleted node or user
            does not have permission to the target node
        "404":
          description: >
            **nodeId** does not exist or the restore destination parent node
            does not exists
        "409":
          description: Node name already exists in the restore destination
        "422":
          description: Model integrity exception trying to restore the node
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Restore a deleted node
      tags:
        - trashcan
      x-alfresco-since: "5.2"
  /downloads:
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Creates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:


        ```JSON

        {
            "nodeIds":
             [
               "c8bb482a-ff3c-4704-a3a3-de1c83ccd84c",
               "cffa62db-aa01-493d-9594-058bc058eeb1"
             ]
        }

        ```


        **Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint
      operationId: createDownload
      parameters:
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadBodyCreate"
        description: The nodeIds the content of which will be zipped, which zip will be
          set as the content of our download node.
        required: true
      responses:
        "202":
          description: The request to create a download node was accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadEntry"
        "400":
          description: >
            Invalid parameter: **DownloadBodyCreate** is invalid due to
            incorrect syntax, or **nodeIds** is empty, or **nodeIds** contains a
            duplicate **nodeId**
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to add a certain **nodeId**
            to the zip
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a new download
      tags:
        - downloads
      x-alfresco-since: 5.2.1
  "/downloads/{downloadId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Cancels the creation of a download request.


        **Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint


        By default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)


        Information about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint


        The cancel operation is done asynchronously.
      operationId: cancelDownload
      parameters:
        - $ref: "#/components/parameters/downloadIdParam"
      responses:
        "202":
          description: The request to cancel a download was accepted
        "400":
          description: >
            Invalid parameter: **downloadId** is invalid, or **downloadId** does
            not point to a node of download type
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission cancel the **downloadId** node
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Cancel a download
      tags:
        - downloads
      x-alfresco-since: 5.2.1
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Retrieve status information for download node **downloadId**
      operationId: getDownload
      parameters:
        - $ref: "#/components/parameters/downloadIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Download node information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadEntry"
        "400":
          description: >
            Invalid parameter: **downloadId** is invalid, or **downloadId** does
            not point to a node of download type
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to get information about
            **downloadId** node
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a download
      tags:
        - downloads
      x-alfresco-since: 5.2.1
  /groups:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Gets a list of groups.


        You can use the **include** parameter to return additional information.


        You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**

        clause will return just the root groups:


        ```

        (isRoot=true)

        ```


        The **where** parameter can also be used to filter by ***zone*** and ***displayName***.

        They may be combined with isRoot to narrow a result set even further. 

        For example, the following where clause will only return groups belonging to the `MY.ZONE` zone.


        ```

        where=(zones in ('MY.ZONE'))

        ```


        This may be combined with the isRoot filter, as shown below:


        ```

        where=(isRoot=false AND zones in ('MY.ZONE'))

        ```

        The following where clause will only return groups with displayName `MY.GROUP.NAME`. 


        ```

        where=(displayName in ('MY.GROUP.NAME'))

        ```

        This may be combined with the isRoot and zones filter, as shown below:


        ```

        where=(isRoot=false AND displayName in ('MY.GROUP.NAME'))

        ```


        ```

        where=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))

        ```


        ```

        where=(isRoot=false AND zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))

        ```


        ***Note:*** restrictions include

        * `AND` is the only supported operator when combining `isRoot`, `zones` and `displayName` filters

        * Only one zone is supported by the filter

        * Only one displayName is supported by the filter

        * The quoted zone name and displayName must be placed in parenthesis — a 400 error will result if these are omitted.


        The default sort order for the returned list is for groups to be sorted by ascending displayName.

        You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:

        * id

        * displayName
      operationId: listGroups
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/groupEntryIncludeParam"
        - $ref: "#/components/parameters/whereParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems** or **skipCount**, or
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List groups
      tags:
        - groups
      x-alfresco-since: 5.2.1
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Create a group.


        The group id must start with "GROUP\_". If this is omitted it will be added automatically.

        This format is also returned when listing groups or group memberships. It should be noted

        that the other group-related operations also expect the id to start with "GROUP\_".


        If one or more parentIds are specified then the group will be created and become a member

        of each of the specified parent groups.


        If no parentIds are specified then the group will be created as a root group.


        The group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.


        You must have admin rights to create a group.
      operationId: createGroup
      parameters:
        - $ref: "#/components/parameters/groupEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupBodyCreate"
        description: The group to create.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupEntry"
        "400":
          description: |
            Invalid parameter: invalid **groupBodyCreate**
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to create a group
        "404":
          description: |
            **parentIds** does not exist
        "409":
          description: |
            **id** clashes with an existing group
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a group
      tags:
        - groups
      x-alfresco-since: 5.2.1
  "/groups/{groupId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Delete group **groupId**.


        The option to cascade delete applies this recursively to any hierarchy of group members.

        In this case, removing a group member does not delete the person or sub-group itself.

        If a removed sub-group no longer has any parent groups then it becomes a root group.


        You must have admin rights to delete a group.
      operationId: deleteGroup
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - description: >
            If **true** then the delete will be applied in cascade to sub-groups.
          in: query
          name: cascade
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "204":
          description: Successful response
        "400":
          description: |
            Invalid parameter: **groupId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to delete a group member
        "404":
          description: |
            **groupId** does not exist
        "409":
          description: |
            Trying to delete a pre-defined system group, such as GROUP_EVERYONE.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a group
      tags:
        - groups
      x-alfresco-since: 5.2.1
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Get details for group **groupId**.


        You can use the **include** parameter to return additional information.
      operationId: getGroup
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/groupEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupEntry"
        "400":
          description: |
            Invalid parameter: invalid **groupId**
        "401":
          description: Authentication failed
        "404":
          description: |
            **groupId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get group details
      tags:
        - groups
      x-alfresco-since: 5.2.1
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Update details (displayName) for group **groupId**.


        You must have admin rights to update a group.
      operationId: updateGroup
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/groupEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupBodyUpdate"
        description: The group information to update.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupEntry"
        "400":
          description: |
            Invalid parameter: **groupId** or **groupBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to update a group
        "404":
          description: |
            **groupId** does not exist
        "409":
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update group details
      tags:
        - groups
      x-alfresco-since: 5.2.1
  "/groups/{groupId}/members":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Gets a list of the group memberships for the group **groupId**.


        You can use the **where** parameter to filter the returned groups by **memberType**.


        Example to filter by **memberType**, use any one of:


        ```

        (memberType='GROUP')

        (memberType='PERSON')

        ```


        The default sort order for the returned list is for group members to be sorted by ascending displayName.

        You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:

        * id

        * displayName
      operationId: listGroupMemberships
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/whereParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupMemberPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **groupId** does not exist
        "405":
          description: >
            Trying to list all members of a pre-defined system group, such as
            GROUP_EVERYONE
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List memberships of a group
      tags:
        - groups
      x-alfresco-since: 5.2.1
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Create a group membership (for an existing person or group) within a group **groupId**.


        If the added group was previously a root group then it becomes a non-root group since it now has a parent.


        It is an error to specify an **id** that does not exist.


        You must have admin rights to create a group membership.
      operationId: createGroupMembership
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupMembershipBodyCreate"
        description: The group membership to add (person or sub-group).
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupMemberEntry"
        "400":
          description: >
            Invalid parameter: **groupId** or **groupMembershipBodyCreate** is
            invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to create a group membership
        "404":
          description: |
            **groupId** or *id* (of group or person) does not exist
        "409":
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a group membership
      tags:
        - groups
      x-alfresco-since: 5.2.1
  "/groups/{groupId}/members/{groupMemberId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Delete group member **groupMemberId** (person or sub-group) from group **groupId**.


        Removing a group member does not delete the person or sub-group itself.


        If a removed sub-group no longer has any parent groups then it becomes a root group.


        You must have admin rights to delete a group membership.
      operationId: deleteGroupMembership
      parameters:
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/groupMemberIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: value of **groupId**, or **groupMemberId** is
            invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to delete a group membership
        "404":
          description: |
            **groupId** or **groupMemberId** does not exist
        "409":
          description: >
            Trying to delete a member of a pre-defined system group, such as
            GROUP_EVERYONE
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a group membership
      tags:
        - groups
      x-alfresco-since: 5.2.1
  "/networks/{networkId}":
    get:
      description: Gets information for a network **networkId**.
      operationId: getNetwork
      parameters:
        - $ref: "#/components/parameters/networkIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonNetworkEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **networkId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a network
      tags:
        - networks
  "/nodes/{nodeId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Deletes the node **nodeId**.


        If **nodeId** is a folder, then its children are also deleted.


        Deleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.


        Deleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted

        node is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.


        **Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary

        child association is restored. This applies recursively for any primary children. No other secondary child associations or

        peer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original

        associations were to nodes inside or outside the restored hierarchy.
      operationId: deleteNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - description: >
            If **true** then the node is deleted permanently, without moving to
            the trashcan.

            Only the owner of the node or an admin can permanently delete the node.
          in: query
          name: permanent
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "204":
          description: Successful response
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: |
            **nodeId** is locked and cannot be deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Get information for node **nodeId**.

        You can use the **include** parameter to return additional information.
      operationId: getNode
      parameters:
        - $ref: "#/components/parameters/nodeIdWithAliasParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - description: |
            A path relative to the **nodeId**. If you set this,
            information is returned on the node resolved by this path.
          in: query
          name: relativePath
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to retrieve **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Updates the node **nodeId**. For example, you can rename a file or folder:

        ```JSON

        {
          "name":"My new name"
        }

        ```

        You can also set or update one or more properties:

        ```JSON

        {
          "properties":
          {
            "cm:title":"Folder title"
          }
        }

        ```

        You can update multi-value properties of a node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location NewX",
                                 "location NewY"
                                ]
          }
        }

        ```


        **Note:** setting properties of type d:content and d:category are not supported.


        **Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.


        You can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.

        You can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:

        ```JSON

        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }

        ```

        **Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.


        **Note:** Currently there is no optimistic locking for updates, so they are applied in "last one wins" order.
      operationId: updateNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeBodyUpdate"
        description: The node information to update.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: the update request is invalid or **nodeId** is
            not a valid format or **nodeBodyUpdate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: Updated name clashes with an existing node in the current parent
            folder
        "422":
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/action-definitions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Retrieve the list of actions that may be executed against the given **nodeId**.


        The default sort order for the returned list is for actions to be sorted by ascending name.

        You can override the default by using the **orderBy** parameter.


        You can use any of the following fields to order the results:

        * name

        * title
      operationId: nodeActions
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActionDefinitionList"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount** or
            **orderBy** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Retrieve actions for a node
      tags:
        - actions
      x-alfresco-since: 5.2.2
  "/nodes/{nodeId}/audit-entries":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets a list of audit entries for node **nodeId**.


        The list can be filtered by **createdByUser** and for a given inclusive time period.


        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**

        modifier to specify an ascending or descending sort order.


        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.


        This relies on the pre-configured 'alfresco-access' audit application.
      operationId: listAuditEntriesForNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - description: >
            Optionally filter the list. Here are some examples:


            *   ```where=(createdByUser='-me-')```


            *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```


            *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/auditMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditEntryPaging"
        "400":
          description: >
            Invalid parameter: *nodeId** is not a valid format, value of
            **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to retrieve audit information
        "404":
          description: |
            **nodeId** does not exist
        "501":
          description: Audit is disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List audit entries for a node
      tags:
        - audit
      x-alfresco-since: 5.2.2
  "/nodes/{nodeId}/children":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of children of the parent node **nodeId**.


        Minimal information for each child is returned by default.


        You can use the **include** parameter to return additional information.


        The list of child nodes includes primary children and secondary children, if there are any.


        You can use the **include** parameter (include=association) to return child association details

        for each child, including the **assocTyp**e and the **isPrimary** flag.


        The default sort order for the returned list is for folders to be sorted before files, and by ascending name.


        You can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but

        you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.


        For example, specifying ```orderBy=name DESC``` returns a mixed folder/file list in descending **name** order.


        You can use any of the following fields to order the results:

        * isFolder

        * name

        * mimeType

        * nodeType

        * sizeInBytes

        * modifiedAt

        * createdAt

        * modifiedByUser

        * createdByUser
      operationId: listNodeChildren
      parameters:
        - $ref: "#/components/parameters/nodeIdWithAliasParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - description: >
            Optionally filter the list. Here are some examples:


            *   ```where=(isFolder=true)```


            *   ```where=(isFile=true)```


            *   ```where=(nodeType='my:specialNodeType')```


            *   ```where=(nodeType='my:specialNodeType INCLUDESUBTYPES')```


            *   ```where=(isPrimary=true)```


            *   ```where=(assocType='my:specialAssocType')```


            *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeMinimalEntryIncludeParam"
        - description: Return information on children in the folder resolved by this path.
            The path is relative to **nodeId**.
          in: query
          name: relativePath
          required: false
          schema:
            type: string
        - description: Also include **source** in addition to **entries** with folder
            information on the parent node – either the specified parent
            **nodeId**, or as resolved by **relativePath**.
          in: query
          name: includeSource
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeChildAssociationPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, **nodeId** is
            not a folder or **orderBy** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to retrieve children of
            **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List node children
      tags:
        - nodes
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Create a node and add it as a primary child of node **nodeId**.


        This endpoint supports both JSON and multipart/form-data (file upload).


        **Using multipart/form-data**


        Use the **filedata** field to represent the content to upload, for example, the following curl command will

        create a node with the contents of test.txt in the test user's home folder.


        ```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt```


        You can use the **name** field to give an alternative name for the new file.


        You can use the **nodeType** field to create a specific type. The default is cm:content.


        You can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.

        Also, as requesting rendition is a background process,

        any rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.


        Use **overwrite** to overwrite an existing file, matched by name. If the file is versionable,

        the existing content is replaced.


        When you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version

        should be created. The default for **majorVersion** is **false**.

        Setting  **majorVersion** enables versioning of the node, if it is not already versioned.


        When you overwrite existing content, you can use the **comment** field to add a version comment that appears in the

        version history. This also enables versioning of this node, if it is not already versioned.


        You can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then

        the API method tries to create a unique name using an integer suffix.


        You can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.

        Folders in the **relativePath** that do not exist are created before the node is created.


        Any other field provided will be treated as a property to set on the newly created node.


        **Note:** setting properties of type d:content and d:category are not supported.


        **Note:** When creating a new node using multipart/form-data by default versioning is enabled and set to MAJOR Version.

        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.


        | **versioningEnabled** | **majorVersion** | **Version Type** |

        |-----------------------|------------------|------------------|

        |        unset          |        unset     |    MAJOR         |

        |        unset          |        true      |    MAJOR         |

        |        unset          |        false     |    MINOR         |

        |        true           |        unset     |    MAJOR         |

        |        true           |        true      |    MAJOR         |

        |        true           |        false     |    MINOR         |

        |        false          |        true      |    Unversioned   |

        |        false          |        false     |    Unversioned   |

        |        false          |        true      |    Unversioned   |

        <br>


        **Using JSON**


        You must specify at least a **name** and **nodeType**. For example, to create a folder:

        ```JSON

        {
          "name":"My Folder",
          "nodeType":"cm:folder"
        }

        ```


        You can create an empty file like this:

        ```JSON

        {
          "name":"My text file.txt",
          "nodeType":"cm:content"
        }

        ```

        You can update binary content using the ```PUT /nodes/{nodeId}``` API method.


        You can create a folder, or other node, inside a folder hierarchy:

        ```JSON

        {
          "name":"My Special Folder",
          "nodeType":"cm:folder",
          "relativePath":"X/Y/Z"
        }

        ```

        The **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the

        **relativePath** that do not exist are created before the node is created.


        You can set properties when you create a new node:

        ```JSON

        {
          "name":"My Other Folder",
          "nodeType":"cm:folder",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder"
          }
        }

        ```


        You can set multi-value properties when you create a new node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location X",
                                 "location Y"
                                ]
          }
        }

        ```


        Any missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects

        explicitly, if needed, using an **aspectNames** field.


        **Note:** setting properties of type d:content and d:category are not supported.


        You can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:

        ```JSON

        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }

        ```


        Typically, for files and folders, the primary children are created within the parent folder using the default "cm:contains" assocType.

        If the content model allows then it is also possible to create primary children with a different assoc type. For example:

        ```JSON

        {
          "name":"My Node",
          "nodeType":"my:specialNodeType",
          "association":
          {
            "assocType":"my:specialAssocType"
          }
        }

        ```


        Additional associations can be added after creating a node. You can also add associations at the time the node is created. This is

        required, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally

        specify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.

        You can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.

        For example, to associate one or more secondary children at time of creation:

        ```JSON

        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "secondaryChildren":
            [ {"childId":"abcde-01234-...", "assocType":"my:specialChildAssocType"} ]
        }

        ```

        For example, to associate one or more targets at time of creation:

        ```JSON

        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "targets":
            [ {"targetId":"abcde-01234-...", "assocType":"my:specialPeerAssocType"} ]
        }

        ```


        **Note:** You can create more than one child by

        specifying a list of nodes in the JSON body. For example, the following JSON

        body creates two folders inside the specified **nodeId**, if the **nodeId** identifies

        a folder:


        ```JSON

        [
          {
            "name":"My Folder 1",
            "nodeType":"cm:folder"
          },
          {
            "name":"My Folder 2",
            "nodeType":"cm:folder"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```

        **Note:** When creating a new node using JSON by default versioning is disabled.

        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.


        | **versioningEnabled** | **majorVersion** | **Version Type** |

        |-----------------------|------------------|------------------|

        |        unset          |        unset     |    Unversioned   |

        |        unset          |        true      |    MAJOR         |

        |        unset          |        false     |    MINOR         |

        |        true           |        unset     |    MAJOR         |

        |        true           |        true      |    MAJOR         |

        |        true           |        false     |    MINOR         |

        |        false          |        true      |    Unversioned   |

        |        false          |        false     |    Unversioned   |

        |        false          |        true      |    Unversioned   |

        <br>
      operationId: createNode
      parameters:
        - $ref: "#/components/parameters/nodeIdWithAliasParam"
        - description: If true, then  a name clash will cause an attempt to auto rename by
            finding a unique name using an integer suffix.
          in: query
          name: autoRename
          required: false
          schema:
            type: boolean
        - description: If true, then created node will be version *1.0 MAJOR*. If false,
            then created node will be version *0.1 MINOR*.
          in: query
          name: majorVersion
          required: false
          schema:
            type: boolean
        - description: If true, then created node will be versioned. If false, then
            created node will be unversioned and auto-versioning disabled.
          in: query
          name: versioningEnabled
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeBodyCreate"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NodeBodyCreate"
        description: The node information to create.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format or
            **nodeBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to create children of
            **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        "409":
          description: New name clashes with an existing node in the current parent folder
        "413":
          description: Content exceeds individual file size limit configured for the
            network or system
        "415":
          description: Content Type is not supported
        "422":
          description: Model integrity exception including a file name containing invalid
            characters
        "507":
          description: Content exceeds overall storage quota limit configured for the
            network or system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/comments":
    get:
      description: Gets a list of comments for the node **nodeId**, sorted
        chronologically with the newest comment first.
      operationId: listComments
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** exists but does not identify a file or
            a folder,

            or the value of **maxItems** is invalid, or the value of **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission read comments on the node
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List comments
      tags:
        - comments
    post:
      description: >
        Creates a comment on node **nodeId**. You specify the comment in a JSON
        body like this:


        ```JSON

        {
          "content": "This is a comment"
        }

        ```


        **Note:** You can create more than one comment by

        specifying a list of comments in the JSON body like this:


        ```JSON

        [
          {
            "content": "This is a comment"
          },
          {
            "content": "This is another comment"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createComment
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentBody"
        description: The comment text. Note that you can also provide a list of comments.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentEntry"
        "400":
          description: |
            Invalid parameter: **commentBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to create a comment
        "404":
          description: |
            **nodeId** does not exist
        "405":
          description: Cannot comment on a node of this type
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a comment
      tags:
        - comments
  "/nodes/{nodeId}/comments/{commentId}":
    delete:
      description: Deletes the comment **commentId** from node **nodeId**.
      operationId: deleteComment
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/commentIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to delete a comment
        "404":
          description: |
            **nodeId** or **commentId** does not exist
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a comment
      tags:
        - comments
    put:
      description: Updates an existing comment **commentId** on node **nodeId**.
      operationId: updateComment
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/commentIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentBody"
        description: The JSON representing the comment to be updated.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentEntry"
        "400":
          description: |
            Invalid parameter: **commentBodyUpdate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to update a comment
        "404":
          description: |
            **nodeId** or **commentId** does not exist
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a comment
      tags:
        - comments
  "/nodes/{nodeId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the node with identifier **nodeId**.
      operationId: getNodeContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to retrieve content of
            **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "416":
          description: |
            Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get node content
      tags:
        - nodes
      x-alfresco-since: "5.2"
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Updates the content of the node with identifier **nodeId**.


        The request body for this endpoint can be any text or binary stream.


        The **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,

        a new minor version is created by default.


        Optionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this

        will rename the node. If invalid then an error is returned and the content is not updated.


        **Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.

        This is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for

        tooling to accept an arbitrary file.
      operationId: updateNodeContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - description: >
            If **true**, create a major version.

            Setting this parameter also enables versioning of this node, if it is not already versioned.
          in: query
          name: majorVersion
          required: false
          schema:
            type: boolean
            default: false
        - description: >
            Add a version comment which will appear in version history.

            Setting this parameter also enables versioning of this node, if it is not already versioned.
          in: query
          name: comment
          required: false
          schema:
            type: string
        - description: >
            Optional new name. This should include the file extension.

            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.

            The character `.` must not be used at the end of the name.
          in: query
          name: name
          required: false
          schema:
            type: string
            pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        $ref: "#/components/requestBodies/updateNodeContentContentbodyupdate"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a file
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: Optional new name clashes with an existing node in the current
            parent folder
        "413":
          description: Content exceeds individual file size limit (configured for
            network/system)
        "422":
          description: Model integrity exception including a file name containing invalid
            characters
        "507":
          description: Content exceeds overall storage quota limit configured for the
            network/system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update node content
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/copy":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Copies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.


        The new node has the same name as the source node unless you specify a new **name** in the request body.


        If the source **nodeId** is a folder, then all of its children are also copied.


        If the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.
      operationId: copyNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeBodyCopy"
        description: The targetParentId and, optionally, a new name which should include
          the file extension.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format or
            **nodeBodyCopy** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to copy **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: New name clashes with an existing node in the destination parent
            folder
        "422":
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Copy a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/lock":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Places a lock on node **nodeId**.


        **Note:** you can only lock files. More specifically, a node can only be locked if it is

        of type `cm:content` or a subtype of `cm:content`.


        The lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.


        If the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.


        When a lock expires, the lock is released.


        If the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.


        By default, a lock is applied that allows the owner to update or delete the node.

        You can use **type** to change the lock type to one of the following:

        * **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API. This is the default value.

        * **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.


        By default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.

        You might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need

        to be kept over a restart of the repository. In this case you don't need the

        overhead of writing the locks to the database.


        If a lock on the node cannot be taken, then an error is returned.
      operationId: lockNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeBodyLock"
        description: Lock details.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or
            **nodeBodyLock** is invalid,

            or a lock was attempted on a node that is not a file
        "401":
          description: Authentication failed
        "403":
          description: |
            Current user does not have permission to lock **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "422":
          description: |
            **nodeId** could not be locked
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Lock a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/move":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Move the node **nodeId** to the parent folder node **targetParentId**.


        The **targetParentId** is specified in the in request body.


        The moved node retains its name unless you specify a new **name** in the request body.


        If the source **nodeId** is a folder, then its children are also moved.


        The move will effectively change the primary parent.
      operationId: moveNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NodeBodyMove"
        description: The targetParentId and, optionally, a new name which should include
          the file extension.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or
            **targetParentId** is not a folder,

            or **nodeBodyMove** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to move **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: New name clashes with an existing node in the destination parent
            folder
        "422":
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Move a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/parents":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of parent nodes that are associated with the current child **nodeId**.


        The list includes both the primary parent and any secondary parents.
      operationId: listParents
      parameters:
        - $ref: "#/components/parameters/nodeChildIdWithAliasParam"
        - description: >
            Optionally filter the list by **assocType** and/or **isPrimary**.
            Here are some example filters:


            *   ```where=(assocType='my:specialAssocType')```


            *   ```where=(isPrimary=true)```


            *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeAssocMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/includeSourceParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeAssociationPaging"
        "400":
          description: >
            Invalid parameter: **assocType** is unknown or the **nodeId** is not
            a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Child **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List parents
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/ratings":
    get:
      description: Gets a list of ratings for node **nodeId**.
      operationId: listRatings
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List ratings
      tags:
        - ratings
    post:
      description: Create a rating for the node with identifier **nodeId**
      operationId: createRating
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingBody"
        description: >
          For "myRating" the type is specific to the rating scheme, boolean for
          the likes and an integer for the fiveStar.


          For example, to "like" a file the following body would be used:


          ```JSON
            {
              "id": "likes",
              "myRating": true
            }
          ```
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingEntry"
        "400":
          description: |
            Invalid parameter: **ratingBodyCreate** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **nodeId** does not exist
        "405":
          description: Cannot rate a node of this type
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a rating
      tags:
        - ratings
  "/nodes/{nodeId}/ratings/{ratingId}":
    delete:
      description: Deletes rating **ratingId** from node **nodeId**.
      operationId: deleteRating
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/ratingIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: |
            Invalid parameter: unknown rating scheme specified
        "401":
          description: Authentication failed
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a rating
      tags:
        - ratings
    get:
      description: Get the specific rating **ratingId** on node **nodeId**.
      operationId: getRating
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/ratingIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingEntry"
        "400":
          description: |
            Invalid parameter: unknown rating scheme specified
        "401":
          description: Authentication failed
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a rating
      tags:
        - ratings
  "/nodes/{nodeId}/renditions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.


        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.


        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**

        clause will return just the CREATED renditions:


        ```

        (status='CREATED')

        ```
      operationId: listRenditions
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, is not a file,
            or **where** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List renditions
      tags:
        - renditions
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        An asynchronous request to create a rendition for file **nodeId**.


        The rendition is specified by name **id** in the request body:

        ```JSON

        {
          "id":"doclib"
        }

        ```
         Multiple names may be specified as a comma separated list or using a list format:
        ```JSON

        [
          {
             "id": "doclib"
          },
          {
             "id": "avatar"
          }
        ]

        ```
      operationId: createRendition
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
      requestBody:
        $ref: "#/components/requestBodies/RenditionBodyCreate"
      responses:
        "202":
          description: Request accepted
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format or is not a file
            or **renditionBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        "409":
          description: All requested renditions already exist
        "501":
          description: Renditions/thumbnails are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create rendition
      tags:
        - renditions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/renditions/{renditionId}":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getRendition
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition information
      tags:
        - renditions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/renditions/{renditionId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getRenditionContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
        - description: >
            If **true** and there is no rendition for this **nodeId** and
            **renditionId**,

            then the placeholder image for the mime type of this rendition is returned, rather

            than a 404 response.
          in: query
          name: placeholder
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
        "416":
          description: Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition content
      tags:
        - renditions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/secondary-children":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.
      operationId: listSecondaryChildren
      parameters:
        - $ref: "#/components/parameters/nodeParentIdWithAliasParam"
        - description: |
            Optionally filter the list by assocType. Here's an example:

            *   ```where=(assocType='my:specialAssocType')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeAssocMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/includeSourceParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeChildAssociationPaging"
        "400":
          description: >
            Invalid parameter: **assocType** is unknown or the **nodeId** is not
            a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Parent **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List secondary children
      tags:
        - nodes
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Create a secondary child association, with the given association type, between the parent **nodeId** and a child node.


        **Note:** You can create more than one secondary child association by

        specifying a list of associations in the JSON body like this:


        ```JSON

        [
          {
            "childId": "string",
            "assocType": "string"
          },
          {
            "childId": "string",
            "assocType": "string"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createSecondaryChildAssociation
      parameters:
        - $ref: "#/components/parameters/nodeParentIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChildAssociationBody"
        description: The child node id and assoc type.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChildAssociationEntry"
        "400":
          description: >
            Invalid parameter: **assocType** is unknown, or the **nodeId** is
            not a valid format,

            or **secondaryChildAssociationBodyCreate** invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to create secondary children
            of **nodeId**
        "404":
          description: Parent **nodeId** or **childId** does not exist
        "409":
          description: An association of this assoc type already exists between these two
            nodes
        "422":
          description: Model integrity exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create secondary child
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/secondary-children/{childId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Delete secondary child associations between the parent **nodeId** and child nodes for the given association type.


        If the association type is **not** specified, then all secondary child associations, of any type in the direction

        from parent to secondary child, will be deleted. The child will still have a primary parent and may still be

        associated as a secondary child with other secondary parents.
      operationId: deleteSecondaryChildAssociation
      parameters:
        - $ref: "#/components/parameters/nodeParentIdParam"
        - description: The identifier of a child node.
          in: path
          name: childId
          required: true
          schema:
            type: string
        - description: Only delete associations of this type.
          in: query
          name: assocType
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **assocType** is unknown or you are trying to
            delete a primary **assocType**.

            Use delete node instead
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Parent **nodeId** or **childId** does not exist (with given
            assocType, if specified)
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete secondary child or children
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/sources":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of source nodes that are associated with the current target **nodeId**.
      operationId: listSourceAssociations
      parameters:
        - $ref: "#/components/parameters/nodeTargetIdParam"
        - description: |
            Optionally filter the list by **assocType**. Here's an example:

            *   ```where=(assocType='my:specialAssocType')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeAssocMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeAssociationPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format or **assocType**
            is unknown
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Target **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List source associations
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/tags":
    get:
      description: Gets a list of tags for node **nodeId**.
      operationId: listTagsForNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to read tags on the node
        "404":
          description: |
            **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List tags for a node
      tags:
        - tags
    post:
      description: >
        Creates a tag on the node **nodeId**. You specify the tag in a JSON body
        like this:


        ```JSON

        {
          "tag":"test-tag-1"
        }

        ```


        **Note:** You can create more than one tag by

        specifying a list of tags in the JSON body like this:


        ```JSON

        [
          {
            "tag":"test-tag-1"
          },
          {
            "tag":"test-tag-2"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                 ...
                }
              }
            ]
          }
        }

        ```
      operationId: createTagForNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagBody"
        description: The new tag
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagEntry"
        "400":
          description: |
            Invalid parameter: **tagBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to create tags on the node
        "404":
          description: |
            **nodeId** does not exist
        "405":
          description: Cannot tag a node of this type
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a tag for a node
      tags:
        - tags
  "/nodes/{nodeId}/tags/{tagId}":
    delete:
      description: Deletes tag **tagId** from node **nodeId**.
      operationId: deleteTagFromNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/tagIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to delete the tag
        "404":
          description: |
            **nodeId** or **tagId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a tag from a node
      tags:
        - tags
  "/nodes/{nodeId}/targets":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of target nodes that are associated with the current source **nodeId**.
      operationId: listTargetAssociations
      parameters:
        - $ref: "#/components/parameters/nodeSourceIdParam"
        - description: |
            Optionally filter the list by **assocType**. Here's an example:

            *   ```where=(assocType='my:specialAssocType')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeAssocMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeAssociationPaging"
        "400":
          description: >
            Invalid parameter: **assocType** is unknown or the **nodeId** is not
            a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Source **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List target associations
      tags:
        - nodes
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Create an association, with the given association type, between the source **nodeId** and a target node.


        **Note:** You can create more than one association by

        specifying a list of associations in the JSON body like this:


        ```JSON

        [
          {
             "targetId": "string",
             "assocType": "string"
          },
          {
            "targetId": "string",
            "assocType": "string"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createAssociation
      parameters:
        - $ref: "#/components/parameters/nodeSourceIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssociationBody"
        description: The target node id and assoc type.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociationEntry"
        "400":
          description: >
            Invalid parameter: **assocType** is unknown, or the **nodeId** is
            not a valid format,

            or **associationBodyCreate** invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Source **nodeId** or **targetId** does not exist
        "409":
          description: An association of this assoc type already exists between these two
            nodes
        "422":
          description: Model integrity exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create node association
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/targets/{targetId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Delete an association, or associations, from the source **nodeId* to a target node for the given association type.


        If the association type is **not** specified, then all peer associations, of any type, in the direction

        from source to target, are deleted.


        **Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations

        in the other direction.
      operationId: deleteAssociation
      parameters:
        - $ref: "#/components/parameters/nodeSourceIdParam"
        - description: The identifier of a target node.
          in: path
          name: targetId
          required: true
          schema:
            type: string
        - description: Only delete associations of this type.
          in: query
          name: assocType
          required: false
          schema:
            type: string
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **assocType** is unknown, or the **nodeId** is
            not a valid format, or **targetId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Source **nodeId** or **targetId** does not exist (with given
            assocType, if specified)
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete node association(s)
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/unlock":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Deletes a lock on node **nodeId**.


        The current user must be the owner of the locks or have admin rights, otherwise an error is returned.


        If a lock on the node cannot be released, then an error is returned.
      operationId: unlockNode
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/nodeEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeEntry"
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: |
            Current user does not have permission to unlock **nodeId**
        "404":
          description: |
            **nodeId** does not exist
        "422":
          description: |
            **nodeId** could not be unlocked
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Unlock a node
      tags:
        - nodes
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/versions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets the version history as an ordered list of versions for the specified **nodeId**.


        The list is ordered in descending modified order. So the most recent version is first and

        the original version is last in the list.
      operationId: listVersionHistory
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionPaging"
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: Target **nodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List version history
      tags:
        - versions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/versions/{versionId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Delete the version identified by **versionId** and **nodeId*.


        If the version is successfully deleted then the content and metadata for that versioned node

        will be deleted and will no longer appear in the version history. This operation cannot be undone.


        If the most recent version is deleted the live node will revert to the next most recent version.


        We currently do not allow the last version to be deleted. If you wish to clear the history then you

        can remove the "cm:versionable" aspect (via update node) which will also disable versioning. In this

        case, you can re-enable versioning by adding back the "cm:versionable" aspect or using the version

        params (majorVersion and comment) on a subsequent file content update.
      operationId: deleteVersion
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or exists but
            does not identify a file, or **versionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete the versioned node
        "404":
          description: |
            **nodeId** or **versionId** does not exist
        "422":
          description: Cannot delete the last remaining version
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a version
      tags:
        - versions
      x-alfresco-since: "5.2"
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version information for **versionId** of file node **nodeId**.
      operationId: getVersion
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or it exists
            but does not identify a file, or **versionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get version information
      tags:
        - versions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/versions/{versionId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version content for **versionId** of file node **nodeId**.
      operationId: getVersionContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **versionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** does not exist
        "416":
          description: Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get version content
      tags:
        - versions
      x-alfresco-since: "5.2"
  "/nodes/{nodeId}/versions/{versionId}/renditions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.


        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.


        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**

        clause will return just the CREATED renditions:


        ```

        (status='CREATED')

        ```
      operationId: listVersionRenditions
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionPaging"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **versionId** is invalid, or **where** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List renditions for a file version
      tags:
        - versions
      x-alfresco-since: 7.0.0
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.


        The version rendition is specified by name **id** in the request body:

        ```JSON

        {
          "id":"doclib"
        }

        ```
          Multiple names may be specified as a comma separated list or using a list format:
        ```JSON

        [
          {
              "id": "doclib"
          },
          {
              "id": "avatar"
          }
        ]

        ```
      operationId: createVersionRendition
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
      requestBody:
        $ref: "#/components/requestBodies/RenditionBodyCreate"
      responses:
        "202":
          description: Request accepted
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **versionId** is invalid,

            or **renditionBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        "409":
          description: All requested renditions already exist
        "501":
          description: Renditions/thumbnails are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create rendition for a file version
      tags:
        - versions
      x-alfresco-since: 7.0.0
  "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRendition
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **versionId** is invalid, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition information for a file version
      tags:
        - versions
      x-alfresco-since: 7.0.0
  "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRenditionContent
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
        - description: >
            If **true** and there is no rendition for this **nodeId** and
            **renditionId**,

            then the placeholder image for the mime type of this rendition is returned, rather

            than a 404 response.
          in: query
          name: placeholder
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or is not a
            file, or **versionId** is invalid, or **renditionId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission for **nodeId**
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
        "416":
          description: Range Not Satisfiable
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get rendition content for a file version
      tags:
        - versions
      x-alfresco-since: 7.0.0
  "/nodes/{nodeId}/versions/{versionId}/revert":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Attempts to revert the version identified by **versionId** and **nodeId** to the live node.


        If the node is successfully reverted then the content and metadata for that versioned node

        will be promoted to the live node and a new version will appear in the version history.
      operationId: revertVersion
      parameters:
        - $ref: "#/components/parameters/nodeIdParam"
        - $ref: "#/components/parameters/versionIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevertBody"
        description: Optionally, specify a version comment and whether this should be a
          major version, or not.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionEntry"
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or it exists
            but does not identify a file, or **versionId** is invalid,
            or **revertBody** invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to revert the versioned node
        "404":
          description: |
            **nodeId** or **versionId** does not exist
        "422":
          description: Model integrity exception trying to revert the node
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Revert a version
      tags:
        - versions
      x-alfresco-since: "5.2"
  /people:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        List people.


        You can use the **include** parameter to return any additional information.


        The default sort order for the returned list is for people to be sorted by ascending id.

        You can override the default by using the **orderBy** parameter.


        You can use any of the following fields to order the results:

        * id

        * firstName

        * lastName
      operationId: listPeople
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/personMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount** or
            **orderBy** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List people
      tags:
        - people
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Create a person.


        If applicable, the given person's login access can also be optionally disabled.


        You must have admin rights to create a person.


        You can set custom properties when you create a person:

        ```JSON

        {
          "id": "abeecher",
          "firstName": "Alice",
          "lastName": "Beecher",
          "displayName": "Alice Beecher",
          "email": "abeecher@example.com",
          "password": "secret",
          "properties":
          {
            "my:property": "The value"
          }
        }

        ```

        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: createPerson
      parameters:
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonBodyCreate"
        description: The person details.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonEntry"
        "400":
          description: |
            Invalid parameter: **personBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to create a person
        "409":
          description: Person within given *id* already exists
        "422":
          description: Model integrity exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create person
      tags:
        - people
      x-alfresco-since: "5.2"
  "/people/{personId}":
    get:
      description: >
        Gets information for the person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a person
      tags:
        - people
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Update the given person's details.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.


        If applicable, the given person's login access can also be optionally disabled or re-enabled.


        You must have admin rights to update a person — unless updating your own details.


        If you are changing your password, as a non-admin user, then the existing password must also

        be supplied (using the oldPassword field in addition to the new password value).


        Admin users cannot be disabled by setting enabled to false.


        Non-admin users may not disable themselves.


        You can set custom properties when you update a person:

        ```JSON

        {
          "firstName": "Alice",
          "properties":
          {
            "my:property": "The value"
          }
        }

        ```

        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: updatePerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonBodyUpdate"
        description: The person details.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonEntry"
        "400":
          description: >
            Invalid parameter: the update request is invalid or **personId** is
            not a valid format or **personBodyUpdate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update a person
        "404":
          description: |
            **personId** does not exist
        "422":
          description: Model integrity exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update person
      tags:
        - people
      x-alfresco-since: "5.2"
  "/people/{personId}/activities":
    get:
      description: >
        Gets a list of activities for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listActivitiesForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - description: >
            A filter to include the user's activities only `me`, other user's
            activities only `others`'
          in: query
          name: who
          required: false
          schema:
            type: string
        - description: Include only activity feed entries relating to this site.
          in: query
          name: siteId
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**, or **who**
            is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the activities for **personId**
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List activities
      tags:
        - activities
  "/people/{personId}/avatar":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Deletes the avatar image related to person **personId**.


        You must be the person or have admin rights to update a person's avatar.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteAvatarImage
      parameters:
        - $ref: "#/components/parameters/personIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete the avatar image
            for **personId**
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete avatar image
      tags:
        - people
      x-alfresco-since: 5.2.2
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Gets the avatar image related to the person **personId**. If the person has no related avatar then

        the **placeholder** query parameter can be optionally used to request a placeholder image to be returned.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getAvatarImage
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - description: |
            If **true** and there is no avatar for this **personId**
            then the placeholder image is returned, rather than a 404 response.
          in: query
          name: placeholder
          required: false
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: |
            Invalid parameter: **personId** is not a valid format
        "401":
          description: Authentication failed
        "404":
          description: >
            **personId** does not exist or avatar does not exist (and no
            placeholder requested)
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get avatar image
      tags:
        - people
      x-alfresco-since: 5.2.2
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.


        Updates the avatar image related to the person **personId**.


        The request body should be the binary stream for the avatar image. The content type of the file

        should be an image file. This will be used to generate an "avatar" thumbnail rendition.


        You must be the person or have admin rights to update a person's avatar.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateAvatarImage
      parameters:
        - $ref: "#/components/parameters/personIdParam"
      requestBody:
        $ref: "#/components/requestBodies/updateNodeContentContentbodyupdate"
      responses:
        "200":
          description: Successful response
        "400":
          description: >
            Invalid parameter: **personId** is not a valid format or the avatar
            cannot be uploaded
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update the avatar image
            for **personId**
        "404":
          description: |
            **personId** does not exist
        "413":
          description: Content exceeds individual file size limit (configured for
            network/system)
        "501":
          description: Renditions/thumbnails are disabled for the system
        "507":
          description: Content exceeds overall storage quota limit configured for the
            network/system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update avatar image
      tags:
        - people
      x-alfresco-since: 5.2.2
  "/people/{personId}/favorite-sites":
    get:
      deprecated: true
      description: >
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be
        removed in the future.

        Use `/people/{personId}/favorites` instead.


        Gets a list of a person's favorite sites.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listFavoriteSitesForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List favorite sites
      tags:
        - favorites
    post:
      deprecated: true
      description: >
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be
        removed in the future.

        Use `/people/{personId}/favorites` instead.


        Create a site favorite for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can favorite more than one site by
        specifying a list of sites in the JSON body like this:


        ```JSON

        [
          {
            "id": "test-site-1"
          },
          {
            "id": "test-site-2"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createSiteFavorite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteSiteBodyCreate"
        description: The id of the site to favorite.
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteSiteEntry"
        "400":
          description: |
            Invalid parameter: **favoriteSiteBodyCreate** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          description: |
            **personId** does not exist
        "409":
          description: |
            **id** is already a site favorite
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a site favorite
      tags:
        - favorites
  "/people/{personId}/favorite-sites/{siteId}":
    delete:
      deprecated: true
      description: >
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be
        removed in the future.

        Use `/people/{personId}/favorites/{favoriteId}` instead.


        Deletes site **siteId** from the favorite site list of person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteFavorite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a site favorite
      tags:
        - favorites
    get:
      deprecated: true
      description: >
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be
        removed in the future.

        Use `/people/{personId}/favorites/{favoriteId}` instead.


        Gets information on favorite site **siteId** of person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavoriteSite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteEntry"
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a favorite site
      tags:
        - favorites
  "/people/{personId}/favorites":
    get:
      description: >
        Gets a list of favorites for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.


        The default sort order for the returned list of favorites is type ascending, createdAt descending.

        You can override the default by using the **orderBy** parameter.


        You can use any of the following fields to order the results:

        *   `type`

        *   `createdAt`

        *   `title`


        You can use the **where** parameter to restrict the list in the response

        to entries of a specific kind. The **where** parameter takes a value.

        The value is a single predicate that can include one or more **EXISTS**

        conditions. The **EXISTS** condition uses a single operand to limit the

        list to include entries that include that one property. The property values are:


        *   `target/file`

        *   `target/folder`

        *   `target/site`


        For example, the following **where** parameter restricts the returned list to the file favorites for a person:


        ```SQL

        (EXISTS(target/file))

        ```

        You can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.



        For example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:


        ```SQL

        (EXISTS(target/file) OR EXISTS(target/folder))

        ```
      operationId: listFavorites
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/whereParam"
        - $ref: "#/components/parameters/favoriteEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoritePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        "404":
          description: >
            **personId** does not exist or the current user does not have
            permission to access the favorites of **personId**
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List favorites
      tags:
        - favorites
    post:
      description: >
        Favorite a **site**, **file**, or **folder** in the repository.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.


        **Note:** You can favorite more than one entity by

        specifying a list of objects in the JSON body like this:


        ```JSON

        [
          {
               "target": {
                  "file": {
                     "guid": "abcde-01234-...."
                  }
               }
           },
           {
               "target": {
                  "file": {
                     "guid": "abcde-09863-...."
                  }
               }
           },
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createFavorite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/favoriteEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteBodyCreate"
        description: >
          An object identifying the entity to be favorited.


          The object consists of a single property which is an object with the name `site`, `file`, or `folder`.

          The content of that object is the `guid` of the target entity.


          For example, to favorite a file the following body would be used:


          ```JSON

          {
             "target": {
                "file": {
                   "guid": "abcde-01234-...."
                }
             }
          }

          ```
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteEntry"
        "400":
          description: |
            Invalid parameter: **favoriteBodyCreate** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist, or the target entity does not exist,
            or a favorite already exists with the specified id, or an
            entity exists with the id of the posted object
            but is not of the same type of the posted object
        "409":
          description: The target **guid** has already been favorited
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a favorite
      tags:
        - favorites
  "/people/{personId}/favorites/{favoriteId}":
    delete:
      description: >
        Deletes **favoriteId** as a favorite of person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteFavorite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/favoriteIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **favoriteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a favorite
      tags:
        - favorites
    get:
      description: >
        Gets favorite **favoriteId** for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavorite
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/favoriteIdParam"
        - $ref: "#/components/parameters/favoriteEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **favoriteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a favorite
      tags:
        - favorites
  "/people/{personId}/groups":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.

         Gets a list of group membership information for person **personId**.

         You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         You can use the **include** parameter to return additional information.

         You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**
         clause will return just the root groups:

         ```
         (isRoot=true)
         ```

         The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow
         a result set even further. For example, the following where clause will only return groups belonging to the
         `MY.ZONE` zone.

         ```
         where=(zones in ('MY.ZONE'))
         ```

         This may be combined with the isRoot filter, as shown below:

         ```
         where=(isRoot=false AND zones in ('MY.ZONE'))
         ```

         ***Note:*** restrictions include
         * `AND` is the only supported operator when combining `isRoot` and `zones` filters
         * Only one zone is supported by the filter
         * The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.


         The default sort order for the returned list is for groups to be sorted by ascending displayName.
         You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
         * id
         * displayName
      operationId: listGroupMembershipsForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/groupEntryIncludeParam"
        - $ref: "#/components/parameters/whereParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**
            or **personId** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List group memberships
      tags:
        - groups
      x-alfresco-since: 5.2.1
  "/people/{personId}/networks":
    get:
      description: >
        Gets a list of network memberships for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listNetworksForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonNetworkPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List network membership
      tags:
        - networks
  "/people/{personId}/networks/{networkId}":
    get:
      description: >
        Gets network information on a single network specified by **networkId**
        for **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getNetworkForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/networkIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonNetworkEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **networkId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get network information
      tags:
        - networks
  "/people/{personId}/preferences":
    get:
      description: >
        Gets a list of preferences for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        Note that each preference consists of an **id** and a **value**.


        The **value** can be of any JSON type.
      operationId: listPreferences
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferencePaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the preferences for **personId**
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List preferences
      tags:
        - preferences
  "/people/{personId}/preferences/{preferenceName}":
    get:
      description: >
        Gets a specific preference for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPreference
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - description: The name of the preference.
          in: path
          name: preferenceName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreferenceEntry"
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have access to the preferences for **personId**
        "404":
          description: |
            **personId** or **preferenceName** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a preference
      tags:
        - preferences
  "/people/{personId}/request-password-reset":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Initiates the reset password workflow to send an email with reset password instruction to the user's registered email.


        The client is mandatory in the request body. For example:

        ```JSON

        {
          "client": "myClient"
        }

        ```

        **Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box

        share is registered as a default client, so you could pass **share** as the client name:

        ```JSON

        {
          "client": "share"
        }

        ```

        **Note:** No authentication is required to call this endpoint.
      operationId: requestPasswordReset
      parameters:
        - $ref: "#/components/parameters/personIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientBody"
        description: The client name to send email with app-specific url.
        required: true
      responses:
        "202":
          description: >
            Successful response or even when the **personId** does not exist or
            the user is disabled by an Administrator
        "404":
          description: |
            **client** is not registered
      summary: Request password reset
      tags:
        - people
      x-alfresco-since: 5.2.1
  "/people/{personId}/reset-password":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.


        Resets user's password


        The password, id and key properties are mandatory in the request body. For example:

        ```JSON

        {
          "password":"newPassword",
          "id":"activiti$10",
          "key":"4dad6d00-0daf-413a-b200-f64af4e12345"
        }

        ```

        **Note:** No authentication is required to call this endpoint.
      operationId: resetPassword
      parameters:
        - $ref: "#/components/parameters/personIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetBody"
        description: The reset password details
        required: true
      responses:
        "202":
          description: >
            Successful response or even when no workflow instance is found with
            the given **id** or the workflow instance is

            invalid (already been used or expired) or the given **personId** does not match the person's id requesting

            the password reset or the given workflow **key** does not match the recovered key.
        "400":
          description: >
            Invalid parameter: Value of **password**, **id** or **key** is
            invalid
      summary: Reset password
      tags:
        - people
      x-alfresco-since: 5.2.1
  "/people/{personId}/site-membership-requests":
    get:
      description: >
        Gets a list of the current site membership requests for person
        **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listSiteMembershipRequestsForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMembershipRequestPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List site membership requests
      tags:
        - sites
    post:
      description: >
        Create a site membership request for yourself on the site with the
        identifier of **id**, specified in the JSON body.

        The result of the request differs depending on the type of site.


        * For a **public** site, you join the site immediately as a SiteConsumer.

        * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager.

        * You cannot request membership of a **private** site. Members are invited by the site administrator.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can create site membership requests for more than one site by
        specifying a list of sites in the JSON body like this:


        ```JSON

        [
          {
            "message": "Please can you add me",
            "id": "test-site-1",
            "title": "Request for test site 1",
          },
          {
            "message": "Please can you add me",
            "id": "test-site-2",
            "title": "Request for test site 2",
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createSiteMembershipRequestForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipRequestBodyCreate"
        description: Site membership request details
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMembershipRequestEntry"
        "400":
          description: >
            Invalid parameter: **id** is invalid, or the user is already
            invited,

            or **siteMembershipRequestBodyCreate** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **id** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a site membership request
      tags:
        - sites
  "/people/{personId}/site-membership-requests/{siteId}":
    delete:
      description: >
        Deletes the site membership request to site **siteId** for person
        **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipRequestForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a site membership request
      tags:
        - sites
    get:
      description: >
        Gets the site membership request for site **siteId** for person
        **personId**, if one exists.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipRequestForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMembershipRequestEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a site membership request
      tags:
        - sites
    put:
      description: >
        Updates the message for the site membership request to site **siteId**
        for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateSiteMembershipRequestForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipRequestBodyUpdate"
        description: The new message to display
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMembershipRequestEntry"
        "400":
          description: |
            Invalid parameter: **id** is invalid
            or **siteMembershipRequestBodyUpdate** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a site membership request
      tags:
        - sites
  "/people/{personId}/sites":
    get:
      description: >
        Gets a list of site membership information for person **personId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.


        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.


        Example to filter by **visibility**, use any one of:


        ```

        (visibility='PRIVATE')

        (visibility='PUBLIC')

        (visibility='MODERATED')

        ```


        Example to filter by site **preset**:


        ```

        (preset='site-dashboard')

        ```


        The default sort order for the returned list is for sites to be sorted by ascending title.

        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:

        * id

        * title

        * role
      operationId: listSiteMembershipsForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/relationsParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteRolePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List site memberships
      tags:
        - sites
  "/people/{personId}/sites/{siteId}":
    delete:
      description: >
        Deletes person **personId** as a member of site **siteId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a site membership
      tags:
        - sites
    get:
      description: >
        Gets site membership information for person **personId** on site
        **siteId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipForPerson
      parameters:
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/siteIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteRoleEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **personId** or **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a site membership
      tags:
        - sites
  "/probes/{probeId}":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 6.0 and newer versions.


        Returns a status of 200 to indicate success and 503 for failure.


        The readiness probe is normally only used to check repository startup.


        The liveness probe should then be used to check the repository is still responding to requests.


        **Note:** No authentication is required to call this endpoint.
      operationId: getProbe
      parameters:
        - description: |
            The name of the probe:
            * -ready-
            * -live-
          in: path
          name: probeId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeEntry"
        "404":
          description: |
            **probeId** does not exist
        "503":
          description: Service Unavailable - Probe failure status.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Check readiness and liveness of the repository
      tags:
        - probes
      x-alfresco-since: "6.0"
  /queries/nodes:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of nodes that match the given search criteria.


        The search term is used to look for nodes that match against name, title, description, full text content or tags.


        The search term:

        - must contain a minimum of 3 alphanumeric characters

        - allows "quoted term"

        - can optionally use '*' for wildcard matching


        By default, file and folder types will be searched unless a specific type is provided as a query parameter.


        By default, the search will be across the repository unless a specific root node id is provided to start the search from.


        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:

        * name

        * modifiedAt

        * createdAt
      operationId: findNodes
      parameters:
        - description: The term to search for.
          in: query
          name: term
          required: true
          schema:
            type: string
        - description: |
            The id of the node to start the search from.

            Supports the aliases -my-, -root- and -shared-.
          in: query
          name: rootNodeId
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - description: >
            Restrict the returned results to only those of the given node type
            and its sub-types
          in: query
          name: nodeType
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/nodeAssocMinimalEntryIncludeParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **nodeType** unknown, or
            **orderBy** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **rootNodeId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Find nodes
      tags:
        - queries
      x-alfresco-since: "5.2"
  /queries/people:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of people that match the given search criteria.


        The search term is used to look for matches against person id, firstname and lastname.


        The search term:

        - must contain a minimum of 2 alphanumeric characters

        - can optionally use '*' for wildcard matching within the term


        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:

        * id

        * firstName

        * lastName
      operationId: findPeople
      parameters:
        - description: |
            The term to search for.
          in: query
          name: term
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/orderByParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonPaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **orderBy** invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Find people
      tags:
        - queries
      x-alfresco-since: "5.2"
  /queries/sites:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of sites that match the given search criteria.


        The search term is used to look for sites that match against site id, title or description.


        The search term:

        - must contain a minimum of 2 alphanumeric characters

        - can optionally use '*' for wildcard matching within the term


        The default sort order for the returned list is for sites to be sorted by ascending id.

        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:

        * id

        * title

        * description
      operationId: findSites
      parameters:
        - description: The term to search for.
          in: query
          name: term
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **orderBy** invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Find sites
      tags:
        - queries
      x-alfresco-since: "5.2"
  /shared-links:
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Get a list of links that the current user has read permission on source node.


        The list is ordered in descending modified order.


        **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.
      operationId: listSharedLinks
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - description: >
            Optionally filter the list by "sharedByUser" userid of person who
            shared the link (can also use -me-)


            *   ```where=(sharedByUser='jbloggs')```


            *   ```where=(sharedByUser='-me-')```
          in: query
          name: where
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/sharedLinkEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedLinkPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List shared links
      tags:
        - shared-links
      x-alfresco-since: "5.2"
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set,

        so the shared link would become invalid when the expiry date is reached. For example:


        ```JSON
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-3333333333",
            "expiresAt": "2017-03-23T23:00:00.000+0000"
          }
        ```


        **Note:** You can create shared links to more than one file

        specifying a list of **nodeId**s in the JSON body like this:


        ```JSON

        [
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-4444444444"
          },
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-5555555555"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createSharedLink
      parameters:
        - $ref: "#/components/parameters/sharedLinkEntryIncludeParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharedLinkBodyCreate"
        description: The nodeId to create a shared link for.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedLinkEntry"
        "400":
          description: >
            Invalid parameter: **nodeId** is not a valid format, or does not
            identify a file,

            or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date

            has already passed
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to create **sharedId** (for
            example, no read permission)
        "404":
          description: |
            **nodeId** does not exist
        "409":
          description: Shared link already exists for **nodeId**
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a shared link to a file
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}":
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the shared link with identifier **sharedId**.
      operationId: deleteSharedLink
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
      responses:
        "204":
          description: Successful response
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete **sharedId**
        "404":
          description: |
            **sharedId** does not exist
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Deletes a shared link
      tags:
        - shared-links
      x-alfresco-since: "5.2"
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets minimal information for the file with shared link identifier **sharedId**.


        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLink
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedLinkEntry"
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          description: |
            **sharedId** does not exist
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a shared link
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}/content":
    get:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkContent
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          description: |
            **sharedId** does not exist
        "416":
          description: Range Not Satisfiable
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get shared link content
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}/email":
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Sends email with app-specific url including identifier **sharedId**.


        The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info:

        ```JSON

        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"]
        }

        ```

        A plain text message property can be optionally provided in the request body to customise the sent email.

        Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco).

        For example, to email a shared link with a messages and a locale:

        ```JSON

        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"],
            "message": "myMessage",
            "locale":"en-GB"
        }

        ```

        **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box
         share is registered as a default client, so you could pass **share** as the client name:
        ```JSON

        {
            "client": "share",
            "recipientEmails": ["john.doe@acme.com"]
        }

        ```
      operationId: emailSharedLink
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharedLinkBodyEmail"
        description: The shared link email to send.
        required: true
      responses:
        "202":
          description: Successful response
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
            or **sharedLinkBodyEmail** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **sharedId** does not exist or **client** is not registered
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Email shared link
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}/renditions":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets a list of the rendition information for the file with shared link identifier **sharedId**.


        This API method returns rendition information, including the rendition id, for each rendition

        where the rendition status is CREATED, which means the rendition is available to view/download.


        **Note:** No authentication is required to call this endpoint.
      operationId: listSharedLinkRenditions
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionPaging"
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
        "404":
          description: |
            **sharedId** does not exist
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List renditions for a shared link
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}/renditions/{renditionId}":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets rendition information for the file with shared link identifier **sharedId**.


        This API method returns rendition information where the rendition status is CREATED,

        which means the rendition is available to view/download.


        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRendition
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RenditionEntry"
        "400":
          description: >
            Invalid parameter: **sharedId** is not a valid format, or
            **renditionId** is invalid
        "404":
          description: |
            **sharedId**  or **renditionId** does not exist (ie. not CREATED)
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get shared link rendition information
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  "/shared-links/{sharedId}/renditions/{renditionId}/content":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Gets the rendition content for file with shared link identifier **sharedId**.


        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRenditionContent
      parameters:
        - $ref: "#/components/parameters/sharedIdParam"
        - $ref: "#/components/parameters/renditionIdParam"
        - $ref: "#/components/parameters/attachmentParam"
        - $ref: "#/components/parameters/ifModifiedSinceHeader"
        - $ref: "#/components/parameters/RangeHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        "400":
          description: >
            Invalid parameter: **sharedId** is not a valid format, or
            **renditionId** is invalid
        "404":
          description: |
            **sharedId** does not exist
        "416":
          description: Range Not Satisfiable
        "501":
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get shared link rendition content
      tags:
        - shared-links
      x-alfresco-since: "5.2"
  /site-membership-requests:
    get:
      description: >
        Get the list of site membership requests the user can action.


        You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:


        ```

        (siteId=mySite)

        ```


        The **where** parameter can also be used to filter by ***personId***. For example:


        ```

        where=(personId=person)

        ```


        This may be combined with the siteId filter, as shown below:


        ```

        where=(siteId=mySite AND personId=person))

        ```
      operationId: getSiteMembershipRequests
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/whereParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMembershipRequestWithPersonPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get site membership requests
      tags:
        - sites
  /sites:
    get:
      description: >
        Gets a list of sites in this repository.


        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.


        Example to filter by **visibility**, use any one of:


        ```

        (visibility='PRIVATE')

        (visibility='PUBLIC')

        (visibility='MODERATED')

        ```


        Example to filter by site **preset**:


        ```

        (preset='site-dashboard')

        ```


        The default sort order for the returned list is for sites to be sorted by ascending title.

        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:

        * id

        * title

        * description


        You can use the **relations** parameter to include one or more related

        entities in a single response and so reduce network traffic.


        The entity types in Alfresco are organized in a tree structure.

        The **sites** entity has two children, **containers** and **members**.

        The following relations parameter returns all the container and member

        objects related to each site:


        ```

        containers,members

        ```
      operationId: listSites
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/orderByParam"
        - $ref: "#/components/parameters/relationsParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/whereParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SitePaging"
        "400":
          description: >
            Invalid parameter: value of **maxItems**, **skipCount**,
            **orderBy**, or **where** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List sites
      tags:
        - sites
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Creates a default site with the given details.  Unless explicitly specified, the site id will be generated

        from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.


        Note: the id of a site cannot be updated once the site has been created.


        For example, to create a public site called "Marketing" the following body could be used:

        ```JSON

        {
          "title": "Marketing",
          "visibility": "PUBLIC"
        }

        ```


        The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.


        **Note:** if skipped then such a site will **not** work within Share.


        The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.


        The creator will be added as a member with Site Manager role.


        When you create a site, a container called **documentLibrary** is created for you in the new site.

        This container is the root folder for content stored in the site.
      operationId: createSite
      parameters:
        - description: Flag to indicate whether the Share-specific (surf) configuration
            files for the site should not be created.
          in: query
          name: skipConfiguration
          schema:
            type: boolean
            default: false
        - description: Flag to indicate whether the site should not be added to the user's
            site favorites.
          in: query
          name: skipAddToFavorites
          schema:
            type: boolean
            default: false
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteBodyCreate"
        description: The site details
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteEntry"
        "400":
          description: >
            Invalid parameter: **id**, **title**, or **description** exceed the
            maximum length;

            or **id** contains invalid characters; or **siteBodyCreate** invalid
        "401":
          description: Authentication failed
        "409":
          description: Site with the given identifier already exists
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a site
      tags:
        - sites
      x-alfresco-since: "5.2"
  "/sites/{siteId}":
    delete:
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the site with **siteId**.
      operationId: deleteSite
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - description: Flag to indicate whether the site should be permanently deleted
            i.e. bypass the trashcan.
          in: query
          name: permanent
          schema:
            type: boolean
            default: false
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to delete the site that is
            visible to them.
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a site
      tags:
        - sites
      x-alfresco-since: "5.2"
    get:
      description: |
        Gets information for site **siteId**.

        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.

        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**.
        The following relations parameter returns all the container and member
        objects related to the site **siteId**:

        ```
        containers,members
        ```
      operationId: getSite
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/relationsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a site
      tags:
        - sites
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.


        Update the details for the given site **siteId**. Site Manager or otherwise a

        (site) admin can update title, description or visibility.


        Note: the id of a site cannot be updated once the site has been created.
      operationId: updateSite
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteBodyUpdate"
        description: The site information to update.
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteEntry"
        "400":
          description: |
            Invalid parameter: **siteBodyUpdate** invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to update the site that is
            visible to them.
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a site
      tags:
        - sites
      x-alfresco-since: "5.2"
  "/sites/{siteId}/containers":
    get:
      description: Gets a list of containers for the site **siteId**.
      operationId: listSiteContainers
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteContainerPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List site containers
      tags:
        - sites
  "/sites/{siteId}/containers/{containerId}":
    get:
      description: Gets information on the container **containerId** in site **siteId**.
      operationId: getSiteContainer
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - description: The unique identifier of a site container.
          in: path
          name: containerId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteContainerEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **containerId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a site container
      tags:
        - sites
  "/sites/{siteId}/group-members":
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Gets a list of group membership for site **siteId**.
      operationId: listSiteGroups
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteGroupPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List group membership for site
      tags:
        - sites
    post:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Creates a site membership for group **groupId** on site **siteId**.

        You can set the **role** to one of four types:

        * SiteConsumer

        * SiteCollaborator

        * SiteContributor

        * SiteManager

        **Note:** You can create more than one site membership by

        specifying a list of group in the JSON body like this:


        ```JSON
          [
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           },
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           }
          ]
        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
          {
            "list": {
              "pagination": {
                "count": 2,
                "hasMoreItems": false,
                "totalItems": 2,
                "skipCount": 0,
                "maxItems": 100
              },
              "entries": [
                {
                  "entry": {
                    ...
                  }
                },
                {
                  "entry": {
                    ...
                  }
                }
              ]
            }
          }
        ```
      operationId: createSiteGroupMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipBodyCreate"
        description: The group to add and their role
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteGroupEntry"
        "400":
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to invite a Group
        "404":
          description: |
            **siteId** or **groupId** does not exist
        "409":
          description: Group with this **id** is already a member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a site membership for group
      tags:
        - sites
  "/sites/{siteId}/group-members/{groupId}":
    delete:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Deletes group **groupId** as a member of site **siteId**.
      operationId: deleteSiteGroupMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/groupIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **groupId** does not exist
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete groupId
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a group membership for site
      tags:
        - sites
    get:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Gets site membership information for group **groupId** on site **siteId**.
      operationId: getSiteGroupMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteGroupEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **groupId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get information about site membership of group
      tags:
        - sites
    put:
      description: >
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.


        Update the membership of person **groupId** in site **siteId**.

        You can set the **role** to one of four types:

        * SiteConsumer

        * SiteCollaborator

        * SiteContributor

        * SiteManager
      operationId: updateSiteGroupMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/groupIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipBodyUpdate"
        description: The groupId new role
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteGroupEntry"
        "400":
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **groupId** does not exist
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update group
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update site membership of group
      tags:
        - sites
  "/sites/{siteId}/members":
    get:
      description: Gets a list of site memberships for site **siteId**.
      operationId: listSiteMemberships
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
        - description: |
            Optionally filter the list.
            *   ```where=(isMemberOfGroup=false|true)```
          in: query
          name: where
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMemberPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List site memberships
      tags:
        - sites
    post:
      description: >
        Creates a site membership for person **personId** on site **siteId**.


        You can set the **role** to one of four types:


        * SiteConsumer

        * SiteCollaborator

        * SiteContributor

        * SiteManager


        **Note:** You can create more than one site membership by

        specifying a list of people in the JSON body like this:


        ```JSON

        [
          {
            "role": "SiteConsumer",
            "id": "joe"
          },
          {
            "role": "SiteConsumer",
            "id": "fred"
          }
        ]

        ```

        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:


        ```JSON

        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }

        ```
      operationId: createSiteMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipBodyCreate"
        description: The person to add and their role
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMemberEntry"
        "400":
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
        "401":
          description: Authentication failed
        "403":
          description: User does not have permission to invite a person
        "404":
          description: |
            **siteId** or **personId** does not exist
        "409":
          description: Person with this **id** is already a member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Create a site membership
      tags:
        - sites
  "/sites/{siteId}/members/{personId}":
    delete:
      description: >
        Deletes person **personId** as a member of site **siteId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/personIdParam"
      responses:
        "204":
          description: Successful response
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **personId** does not exist
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Delete a site membership
      tags:
        - sites
    get:
      description: >
        Gets site membership information for person **personId** on site
        **siteId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMemberEntry"
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **personId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a site membership
      tags:
        - sites
    put:
      description: >
        Update the membership of person **personId** in site **siteId**.


        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.


        You can set the **role** to one of four types:


        * SiteConsumer

        * SiteCollaborator

        * SiteContributor

        * SiteManager
      operationId: updateSiteMembership
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/personIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipBodyUpdate"
        description: The persons new role
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SiteMemberEntry"
        "400":
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **siteId** or **personId** does not exist
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update member
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a site membership
      tags:
        - sites
  "/sites/{siteId}/site-membership-requests/{inviteeId}/approve":
    post:
      description: |
        Approve a site membership request.
      operationId: approveSiteMembershipRequest
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/inviteeIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipApprovalBody"
        description: >
          Accepting a request to join, optionally, allows assignment of a role
          to the user.
      responses:
        "200":
          description: Successful response
        "400":
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to approve membership request
        "404":
          description: |
            **siteId** or **inviteeId** does not exist
        "422":
          description: |
            Integrity exception or not allowed to approve membership request.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Approve a site membership request
      tags:
        - sites
  "/sites/{siteId}/site-membership-requests/{inviteeId}/reject":
    post:
      description: |
        Reject a site membership request.
      operationId: rejectSiteMembershipRequest
      parameters:
        - $ref: "#/components/parameters/siteIdParam"
        - $ref: "#/components/parameters/inviteeIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteMembershipRejectionBody"
        description: >
          Rejecting a request to join, optionally, allows the inclusion of
          comment.
      responses:
        "200":
          description: Successful response
        "400":
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
        "401":
          description: Authentication failed
        "403":
          description: Current user does not have permission to reject membership request
        "404":
          description: |
            **siteId** or **inviteeId** does not exist
        "422":
          description: |
            Integrity exception or not allowed to reject membership request.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Reject a site membership request
      tags:
        - sites
  /tags:
    get:
      description: >
        Gets a list of tags in this repository.


        You can use the **include** parameter to return additional **values** information.
      operationId: listTags
      parameters:
        - $ref: "#/components/parameters/skipCountParam"
        - $ref: "#/components/parameters/maxItemsParam"
        - $ref: "#/components/parameters/fieldsParam"
        - $ref: "#/components/parameters/tagEntryIncludeParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagPaging"
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
        "401":
          description: Authentication failed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: List tags
      tags:
        - tags
  "/tags/{tagId}":
    get:
      description: Get a specific tag with **tagId**.
      operationId: getTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagEntry"
              examples:
                response:
                  value:
                    id: ed2444b5-d0c1-440b-b5b8-34a53e578091
                    tag: test tag 1
        "401":
          description: Authentication failed
        "404":
          description: |
            **tagId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Get a tag
      tags:
        - tags
    put:
      description: Updates the tag **tagId**.
      operationId: updateTag
      parameters:
        - $ref: "#/components/parameters/tagIdParam"
        - $ref: "#/components/parameters/fieldsParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagBody"
        description: The updated tag
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagEntry"
        "400":
          description: |
            Invalid parameter: **tagBodyUpdate** is invalid
        "401":
          description: Authentication failed
        "404":
          description: |
            **tagId** does not exist
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Update a tag
      tags:
        - tags
security:
  - basicAuth: []
tags:
  - description: Retrieve and clear audit entries
    name: audit
  - description: Retrieve and execute actions
    name: actions
  - description: Retrieve and manage activities
    name: activities
  - description: Retrieve and manage comments
    name: comments
  - description: Create and manage downloads
    name: downloads
  - description: Retrieve and manage favorites
    name: favorites
  - description: Retrieve and manage networks
    name: networks
  - description: Retrieve and manage nodes
    name: nodes
  - description: Retrieve and manage people
    name: people
  - description: Retrieve and manage groups
    name: groups
  - description: Retrieve and manage preferences
    name: preferences
  - description: Check readiness and liveness of the repository
    name: probes
  - description: Find nodes, sites, and people using a simple search term
    name: queries
  - description: Retrieve and manage ratings
    name: ratings
  - description: Retrieve and manage file renditions
    name: renditions
  - description: Retrieve and manage public shared links
    name: shared-links
  - description: Retrieve and manage sites
    name: sites
  - description: Retrieve and manage tags
    name: tags
  - description: Retrieve and manage deleted nodes
    name: trashcan
  - description: Retrieve and manage versions
    name: versions
servers:
  - url: /alfresco/api/-default-/public/alfresco/versions/1
components:
  parameters:
    RangeHeader:
      description: >
        The Range header indicates the part of a document that the server should
        return.

        Single part request supported, for example: bytes=1-10.
      in: header
      name: Range
      required: false
      schema:
        type: string
        format: bytes
    actionDefinitionIdParam:
      description: The identifier of an action definition.
      in: path
      name: actionDefinitionId
      required: true
      schema:
        type: string
    attachmentParam:
      description: >
        **true** enables a web browser to download the file as an attachment.

        **false** means a web browser may preview the file in a new tab or window, but not

        download the file.


        You can only set this parameter to **false** if the content type of the file is in the supported list;

        for example, certain image files and PDF files.


        If the content type is not supported for preview, then a value of **false**  is ignored, and

        the attachment will be returned in the response.
      in: query
      name: attachment
      required: false
      schema:
        type: boolean
        default: true
    auditApplicationIdParam:
      description: The identifier of an audit application.
      in: path
      name: auditApplicationId
      required: true
      schema:
        type: string
    auditApplicationIncludeParam:
      description: >
        Also include the current minimum and/or maximum audit entry ids for the
        application. The following optional fields can be requested:

        * max

        * min
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    auditEntryIdParam:
      description: The identifier of an audit entry.
      in: path
      name: auditEntryId
      required: true
      schema:
        type: string
    auditMinimalEntryIncludeParam:
      description: >
        Returns additional information about the audit entry. The following
        optional fields can be requested:

        * values
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    commentIdParam:
      description: The identifier of a comment.
      in: path
      name: commentId
      required: true
      schema:
        type: string
    downloadIdParam:
      description: The identifier of a download node.
      in: path
      name: downloadId
      required: true
      schema:
        type: string
    favoriteEntryIncludeParam:
      description: >
        Returns additional information about favorites, the following optional
        fields can be requested:

        * path (note, this only applies to files and folders)

        * properties
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    favoriteIdParam:
      description: The identifier of a favorite.
      in: path
      name: favoriteId
      required: true
      schema:
        type: string
    fieldsParam:
      description: >
        A list of field names.


        You can use this parameter to restrict the fields

        returned within a response if, for example, you want to save on overall bandwidth.


        The list applies to a returned individual

        entity or entries within a collection.


        If the API method also supports the **include**

        parameter, then the fields specified in the **include**

        parameter are returned in addition to those specified in the **fields** parameter.
      in: query
      name: fields
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    groupEntryIncludeParam:
      description: >
        Returns additional information about the group. The following optional
        fields can be requested:

        * parentIds

        * zones
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    groupIdParam:
      description: The identifier of a group.
      in: path
      name: groupId
      required: true
      schema:
        type: string
    groupMemberIdParam:
      description: The identifier of a person or group.
      in: path
      name: groupMemberId
      required: true
      schema:
        type: string
    ifModifiedSinceHeader:
      description: >
        Only returns the content if it has been modified since the date
        provided.

        Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.
      in: header
      name: If-Modified-Since
      required: false
      schema:
        type: string
        format: date-time
    includeSourceParam:
      description: Also include **source** (in addition to **entries**) with folder
        information on **nodeId**
      in: query
      name: includeSource
      required: false
      schema:
        type: boolean
    inviteeIdParam:
      description: The invitee user name.
      in: path
      name: inviteeId
      required: true
      schema:
        type: string
    maxItemsParam:
      description: |
        The maximum number of items to return in the list.
        If not supplied then the default value is 100.
      in: query
      name: maxItems
      required: false
      schema:
        type: integer
        minimum: 1
        default: 100
    networkIdParam:
      description: The identifier of a network.
      in: path
      name: networkId
      required: true
      schema:
        type: string
    nodeAssocMinimalEntryIncludeParam:
      description: >
        Returns additional information about the node. The following optional
        fields can be requested:

        * allowableOperations

        * aspectNames

        * isLink

        * isFavorite

        * isLocked

        * path

        * properties
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nodeChildIdWithAliasParam:
      description: >
        The identifier of a child node. You can also use one of these well-known
        aliases:

        * -my-

        * -shared-

        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeEntryIncludeParam:
      description: >
        Returns additional information about the node. The following optional
        fields can be requested:

        * allowableOperations

        * association

        * isLink

        * isFavorite

        * isLocked

        * path

        * permissions

        * definition
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nodeIdParam:
      description: The identifier of a node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeIdWithAliasParam:
      description: >
        The identifier of a node. You can also use one of these well-known
        aliases:

        * -my-

        * -shared-

        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeMinimalEntryIncludeParam:
      description: >
        Returns additional information about the node. The following optional
        fields can be requested:

        * allowableOperations

        * aspectNames

        * association

        * isLink

        * isFavorite

        * isLocked

        * path

        * properties

        * permissions
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nodeParentIdParam:
      description: The identifier of a parent node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeParentIdWithAliasParam:
      description: >
        The identifier of a parent node. You can also use one of these
        well-known aliases:

        * -my-

        * -shared-

        * -root-
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeSourceIdParam:
      description: The identifier of a source node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    nodeTargetIdParam:
      description: The identifier of a target node.
      in: path
      name: nodeId
      required: true
      schema:
        type: string
    omitTotalItemsParam:
      description: >
        A boolean to control if the response provides the total numbers of items
        in the collection.

        If not supplied then the default value is false.
      in: query
      name: omitTotalItems
      required: false
      schema:
        type: boolean
        default: false
    orderByParam:
      description: >
        A string to control the order of the entities returned in a list. You
        can use the **orderBy** parameter to

        sort the list by one or more fields.


        Each field has a default sort order, which is normally ascending order. Read the API method implementation notes

        above to check if any fields used in this method have a descending default search order.


        To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.
      in: query
      name: orderBy
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    personIdParam:
      description: The identifier of a person.
      in: path
      name: personId
      required: true
      schema:
        type: string
    personMinimalEntryIncludeParam:
      description: >
        Returns additional information about the person. The following optional
        fields can be requested:

        * properties

        * aspectNames

        * capabilities
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    ratingIdParam:
      description: The identifier of a rating.
      in: path
      name: ratingId
      required: true
      schema:
        type: string
    relationsParam:
      description: Use the relations parameter to include one or more related entities
        in a single response.
      in: query
      name: relations
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    renditionIdParam:
      description: The name of a thumbnail rendition, for example *doclib*, or *pdf*.
      in: path
      name: renditionId
      required: true
      schema:
        type: string
    sharedIdParam:
      description: The identifier of a shared link to a file.
      in: path
      name: sharedId
      required: true
      schema:
        type: string
    sharedLinkEntryIncludeParam:
      description: >
        Returns additional information about the shared link, the following
        optional fields can be requested:

        * allowableOperations

        * path

        * properties

        * isFavorite

        * aspectNames
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    siteIdParam:
      description: The identifier of a site.
      in: path
      name: siteId
      required: true
      schema:
        type: string
    skipCountParam:
      description: >
        The number of entities that exist in the collection before those
        included in this list.

        If not supplied then the default value is 0.
      in: query
      name: skipCount
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    tagEntryIncludeParam:
      description: >
        Returns additional information about the tag. The following optional
        fields can be requested:

        * count
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    tagIdParam:
      description: The identifier of a tag.
      in: path
      name: tagId
      required: true
      schema:
        type: string
    versionIdParam:
      description: The identifier of a version, ie. version label, within the version
        history of a node.
      in: path
      name: versionId
      required: true
      schema:
        type: string
    versionMinimalEntryIncludeParam:
      description: >
        Returns additional information about the version node. The following
        optional fields can be requested:

        * properties

        * aspectNames
      in: query
      name: include
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    whereParam:
      description: A string to restrict the returned objects by using a predicate.
      in: query
      name: where
      required: false
      schema:
        type: string
  requestBodies:
    RenditionBodyCreate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RenditionBodyCreate"
      description: The rendition "id".
      required: true
    updateNodeContentContentbodyupdate:
      content:
        application/octet-stream:
          schema:
            format: binary
            type: string
      description: The binary content
      required: true
  securitySchemes:
    basicAuth:
      description: HTTP Basic Authentication
      type: http
      scheme: basic
  schemas:
    ActionBodyExec:
      properties:
        actionDefinitionId:
          type: string
        params:
          type: object
        targetId:
          description: The entity upon which to execute the action, typically a node ID or
            similar.
          type: string
      required:
        - actionDefinitionId
      type: object
    ActionDefinition:
      properties:
        applicableTypes:
          description: QNames of the types this action applies to
          items:
            type: string
          type: array
        description:
          description: describes the action definition, e.g. "This will move the matched
            item to another space."
          type: string
        id:
          description: Identifier of the action definition — used for example when
            executing an action
          type: string
        name:
          description: name of the action definition, e.g. "move"
          type: string
        parameterDefinitions:
          items:
            $ref: "#/components/schemas/ActionParameterDefinition"
          type: array
        title:
          description: title of the action definition, e.g. "Move"
          type: string
        trackStatus:
          description: whether the basic action definition supports action tracking or not
          type: boolean
      required:
        - id
        - applicableTypes
        - trackStatus
      type: object
    ActionDefinitionEntry:
      properties:
        entry:
          $ref: "#/components/schemas/ActionDefinition"
      required:
        - entry
      type: object
    ActionDefinitionList:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/ActionDefinition"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    ActionExecResult:
      properties:
        id:
          description: The unique identifier of the action pending execution
          type: string
      required:
        - id
      type: object
    ActionExecResultEntry:
      properties:
        entry:
          $ref: "#/components/schemas/ActionExecResult"
      required:
        - entry
      type: object
    ActionParameterDefinition:
      properties:
        displayLabel:
          type: string
        mandatory:
          type: boolean
        multiValued:
          type: boolean
        name:
          type: string
        type:
          type: string
      type: object
    Activity:
      description: |
        Activities describe any past activity in a site,
        for example creating an item of content, commenting on a node,
        liking an item of content.
      properties:
        activitySummary:
          additionalProperties:
            type: string
          description: An object summarizing the activity
          type: object
        activityType:
          description: The type of the activity posted
          type: string
        feedPersonId:
          description: The feed on which this activity was posted
          type: string
        id:
          description: The unique id of the activity
          format: int64
          type: integer
        postPersonId:
          description: The id of the person who performed the activity
          type: string
        postedAt:
          description: The date time at which the activity was performed
          format: date-time
          type: string
        siteId:
          description: The unique id of the site on which the activity was performed
          type: string
      required:
        - postPersonId
        - id
        - feedPersonId
        - activityType
      type: object
    ActivityEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Activity"
      required:
        - entry
      type: object
    ActivityPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/ActivityEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    Association:
      properties:
        assocType:
          type: string
        targetId:
          type: string
      required:
        - targetId
        - assocType
      type: object
    AssociationBody:
      properties:
        assocType:
          type: string
        targetId:
          type: string
      required:
        - targetId
        - assocType
      type: object
    AssociationEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Association"
      required:
        - entry
      type: object
    AssociationInfo:
      properties:
        assocType:
          type: string
      required:
        - assocType
      type: object
    AuditApp:
      properties:
        id:
          type: string
        isEnabled:
          default: true
          type: boolean
        maxEntryId:
          type: integer
        minEntryId:
          type: integer
        name:
          type: string
      required:
        - id
      type: object
    AuditAppEntry:
      properties:
        entry:
          $ref: "#/components/schemas/AuditApp"
      type: object
    AuditAppPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/AuditAppEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    AuditBodyUpdate:
      properties:
        isEnabled:
          type: boolean
      type: object
    AuditEntry:
      properties:
        auditApplicationId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: "#/components/schemas/UserInfo"
        id:
          type: string
        values:
          type: object
      required:
        - id
        - auditApplicationId
        - createdByUser
        - createdAt
      type: object
    AuditEntryEntry:
      properties:
        entry:
          $ref: "#/components/schemas/AuditEntry"
      type: object
    AuditEntryPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/AuditEntryEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Capabilities:
      properties:
        isAdmin:
          type: boolean
        isGuest:
          type: boolean
        isMutable:
          type: boolean
      type: object
    ChildAssociation:
      properties:
        assocType:
          type: string
        childId:
          type: string
      required:
        - childId
        - assocType
      type: object
    ChildAssociationBody:
      properties:
        assocType:
          type: string
        childId:
          type: string
      required:
        - childId
        - assocType
      type: object
    ChildAssociationEntry:
      properties:
        entry:
          $ref: "#/components/schemas/ChildAssociation"
      required:
        - entry
      type: object
    ChildAssociationInfo:
      properties:
        assocType:
          type: string
        isPrimary:
          type: boolean
      required:
        - assocType
        - isPrimary
      type: object
    ClientBody:
      properties:
        client:
          description: the client name
          type: string
      required:
        - client
      type: object
    Comment:
      properties:
        canDelete:
          type: boolean
        canEdit:
          type: boolean
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: "#/components/schemas/Person"
        edited:
          type: boolean
        id:
          type: string
        modifiedAt:
          format: date-time
          type: string
        modifiedBy:
          $ref: "#/components/schemas/Person"
        title:
          type: string
      required:
        - id
        - title
        - content
        - createdBy
        - createdAt
        - edited
        - modifiedBy
        - modifiedAt
        - canEdit
        - canDelete
      type: object
    CommentBody:
      properties:
        content:
          type: string
      required:
        - content
      type: object
    CommentEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Comment"
      required:
        - entry
      type: object
    CommentPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/CommentEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    Company:
      properties:
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        email:
          type: string
        fax:
          type: string
        organization:
          type: string
        postcode:
          type: string
        telephone:
          type: string
      type: object
    Constraint:
      properties:
        description:
          description: the human-readable constraint description
          type: string
        id:
          type: string
        parameters:
          additionalProperties:
            type: object
          type: object
        title:
          description: the human-readable constraint title
          type: string
        type:
          description: the type of the constraint
          type: string
      required:
        - id
      type: object
    ContentInfo:
      properties:
        encoding:
          type: string
        mimeType:
          type: string
        mimeTypeName:
          type: string
        sizeInBytes:
          format: int64
          type: integer
      required:
        - mimeType
      type: object
    Definition:
      properties:
        properties:
          description: List of property definitions effective for this node as the result
            of combining the type with all aspects.
          items:
            $ref: "#/components/schemas/Property"
          type: array
    DeletedNode:
      allOf:
        - $ref: "#/components/schemas/Node"
        - properties:
            archivedAt:
              format: date-time
              type: string
            archivedByUser:
              $ref: "#/components/schemas/UserInfo"
          required:
            - archivedByUser
            - archivedAt
          type: object
    DeletedNodeBodyRestore:
      properties:
        assocType:
          type: string
        targetParentId:
          type: string
      type: object
    DeletedNodeEntry:
      properties:
        entry:
          $ref: "#/components/schemas/DeletedNode"
      type: object
    DeletedNodesPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/DeletedNodeEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    DirectAccessUrlBodyCreate:
      properties:
        expiresAt:
          format: date-time
          type: string
        validFor:
          description: |
            The length of time in seconds that the url is valid for.
          minimum: 1
          type: integer
      type: object
    Download:
      properties:
        bytesAdded:
          default: 0
          description: number of bytes added so far in the zip
          type: integer
        filesAdded:
          default: 0
          description: number of files added so far in the zip
          type: integer
        id:
          description: the id of the download node
          type: string
        status:
          default: PENDING
          description: the current status of the download node creation
          enum:
            - PENDING
            - CANCELLED
            - IN_PROGRESS
            - DONE
            - MAX_CONTENT_SIZE_EXCEEDED
          type: string
        totalBytes:
          default: 0
          description: the total number of bytes to be added in the zip
          type: integer
        totalFiles:
          default: 0
          description: the total number of files to be added in the zip
          type: integer
      type: object
    DownloadBodyCreate:
      properties:
        nodeIds:
          items:
            type: string
          type: array
      required:
        - nodeIds
      type: object
    DownloadEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Download"
      required:
        - entry
      type: object
    Error:
      properties:
        error:
          properties:
            briefSummary:
              type: string
            descriptionURL:
              type: string
            errorKey:
              type: string
            logId:
              type: string
            stackTrace:
              type: string
            statusCode:
              format: int32
              type: integer
          type: object
      required:
        - error
      type: object
    Favorite:
      description: >
        A favorite describes an Alfresco entity that a person has marked as a
        favorite.

        The target can be a site, file or folder.
      properties:
        createdAt:
          description: The time the object was made a favorite.
          format: date-time
          type: string
        properties:
          description: A subset of the target favorite properties, system properties and
            properties already available in the target are excluded.
          type: object
        target:
          type: object
        targetGuid:
          description: The guid of the object that is a favorite.
          type: string
      required:
        - targetGuid
        - target
      type: object
    FavoriteBodyCreate:
      properties:
        target:
          type: object
      required:
        - target
      type: object
    FavoriteEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Favorite"
      required:
        - entry
      type: object
    FavoritePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/FavoriteEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    FavoriteSite:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    FavoriteSiteBodyCreate:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    FavoriteSiteEntry:
      properties:
        entry:
          $ref: "#/components/schemas/FavoriteSite"
      required:
        - entry
      type: object
    Group:
      properties:
        displayName:
          type: string
        id:
          type: string
        isRoot:
          default: true
          type: boolean
        parentIds:
          items:
            type: string
          type: array
        zones:
          items:
            type: string
          type: array
      required:
        - id
        - displayName
        - isRoot
      type: object
    GroupBodyCreate:
      properties:
        displayName:
          type: string
        id:
          type: string
        parentIds:
          items:
            type: string
          type: array
      required:
        - id
        - displayName
      type: object
    GroupBodyUpdate:
      properties:
        displayName:
          type: string
      required:
        - displayName
      type: object
    GroupEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Group"
      required:
        - entry
      type: object
    GroupMember:
      properties:
        displayName:
          type: string
        id:
          type: string
        memberType:
          enum:
            - GROUP
            - PERSON
          type: string
      required:
        - id
        - displayName
        - memberType
      type: object
    GroupMemberEntry:
      properties:
        entry:
          $ref: "#/components/schemas/GroupMember"
      required:
        - entry
      type: object
    GroupMemberPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/GroupMemberEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    GroupMembershipBodyCreate:
      properties:
        id:
          type: string
        memberType:
          enum:
            - GROUP
            - PERSON
          type: string
      required:
        - id
        - memberType
      type: object
    GroupPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/GroupEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    NetworkQuota:
      description: >
        Limits and usage of each quota. A network will have quotas for File
        space,

        the number of sites in the network, the number of people in the network,

        and the number of network administrators
      properties:
        id:
          type: string
        limit:
          format: int64
          type: integer
        usage:
          format: int64
          type: integer
      required:
        - id
        - limit
        - usage
      type: object
    Node:
      properties:
        allowableOperations:
          items:
            type: string
          type: array
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: "#/components/schemas/ContentInfo"
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: "#/components/schemas/UserInfo"
        definition:
          $ref: "#/components/schemas/Definition"
        id:
          type: string
        isFavorite:
          type: boolean
        isFile:
          type: boolean
        isFolder:
          type: boolean
        isLink:
          type: boolean
        isLocked:
          default: false
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: "#/components/schemas/UserInfo"
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        parentId:
          type: string
        path:
          $ref: "#/components/schemas/PathInfo"
        permissions:
          $ref: "#/components/schemas/PermissionsInfo"
        properties:
          type: object
      required:
        - id
        - name
        - nodeType
        - isFolder
        - isFile
        - createdAt
        - createdByUser
        - modifiedAt
        - modifiedByUser
      type: object
    NodeAssociation:
      allOf:
        - $ref: "#/components/schemas/Node"
        - properties:
            association:
              $ref: "#/components/schemas/AssociationInfo"
          type: object
    NodeAssociationEntry:
      properties:
        entry:
          $ref: "#/components/schemas/NodeAssociation"
      required:
        - entry
      type: object
    NodeAssociationPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/NodeAssociationEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
            source:
              $ref: "#/components/schemas/Node"
          type: object
      type: object
    NodeBodyCopy:
      properties:
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        targetParentId:
          type: string
      required:
        - targetParentId
      type: object
    NodeBodyCreate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        association:
          properties:
            assocType:
              type: string
          type: object
        definition:
          $ref: "#/components/schemas/Definition"
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        permissions:
          $ref: "#/components/schemas/PermissionsBody"
        properties:
          type: object
        relativePath:
          type: string
        secondaryChildren:
          items:
            $ref: "#/components/schemas/ChildAssociationBody"
          type: array
        targets:
          items:
            $ref: "#/components/schemas/AssociationBody"
          type: array
      required:
        - name
        - nodeType
      type: object
    NodeBodyLock:
      properties:
        lifetime:
          default: PERSISTENT
          enum:
            - PERSISTENT
            - EPHEMERAL
          type: string
        timeToExpire:
          minimum: 0
          type: integer
        type:
          default: ALLOW_OWNER_CHANGES
          enum:
            - ALLOW_OWNER_CHANGES
            - FULL
          type: string
      type: object
    NodeBodyMove:
      properties:
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        targetParentId:
          type: string
      required:
        - targetParentId
      type: object
    NodeBodyUpdate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        permissions:
          $ref: "#/components/schemas/PermissionsBody"
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    NodeChildAssociation:
      allOf:
        - $ref: "#/components/schemas/Node"
        - properties:
            association:
              $ref: "#/components/schemas/ChildAssociationInfo"
          type: object
    NodeChildAssociationEntry:
      properties:
        entry:
          $ref: "#/components/schemas/NodeChildAssociation"
      required:
        - entry
      type: object
    NodeChildAssociationPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/NodeChildAssociationEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
            source:
              $ref: "#/components/schemas/Node"
          type: object
      type: object
    NodeEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Node"
      required:
        - entry
      type: object
    NodePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/NodeEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
            source:
              $ref: "#/components/schemas/Node"
          type: object
      type: object
    Pagination:
      properties:
        count:
          description: |
            The number of objects in the entries array.
          format: int64
          type: integer
        hasMoreItems:
          description: >
            A boolean value which is **true** if there are more entities in the
            collection

            beyond those in this response. A true value means a request with a larger value

            for the **skipCount** or the **maxItems** parameter will return more entities.
          type: boolean
        maxItems:
          description: >
            The value of the **maxItems** parameter used to generate this list.

            If there was no **maxItems** parameter then the default value is 100.
          format: int64
          type: integer
        skipCount:
          description: >
            An integer describing how many entities exist in the collection
            before

            those included in this list. If there was no **skipCount** parameter then the

            default value is 0.
          format: int64
          type: integer
        totalItems:
          description: >
            An integer describing the total number of entities in the
            collection.

            The API might not be able to determine this value,

            in which case this property will not be present.
          format: int64
          type: integer
      type: object
    PasswordResetBody:
      properties:
        id:
          description: the workflow id provided in the reset password email
          type: string
        key:
          description: the workflow key provided in the reset password email
          type: string
        password:
          description: the new password
          type: string
      required:
        - password
        - id
        - key
      type: object
    PathElement:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        id:
          type: string
        name:
          type: string
        nodeType:
          type: string
      type: object
    PathInfo:
      properties:
        elements:
          items:
            $ref: "#/components/schemas/PathElement"
          type: array
        isComplete:
          type: boolean
        name:
          type: string
      type: object
    PermissionElement:
      properties:
        accessStatus:
          default: ALLOWED
          enum:
            - ALLOWED
            - DENIED
          type: string
        authorityId:
          type: string
        name:
          type: string
      type: object
    PermissionsBody:
      properties:
        isInheritanceEnabled:
          type: boolean
        locallySet:
          items:
            $ref: "#/components/schemas/PermissionElement"
          type: array
      type: object
    PermissionsInfo:
      properties:
        inherited:
          items:
            $ref: "#/components/schemas/PermissionElement"
          type: array
        isInheritanceEnabled:
          type: boolean
        locallySet:
          items:
            $ref: "#/components/schemas/PermissionElement"
          type: array
        settable:
          items:
            type: string
          type: array
      type: object
    Person:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        avatarId:
          type: string
        capabilities:
          $ref: "#/components/schemas/Capabilities"
        company:
          $ref: "#/components/schemas/Company"
        description:
          type: string
        displayName:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          default: true
          type: boolean
        enabled:
          default: true
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        id:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        statusUpdatedAt:
          format: date-time
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      required:
        - id
        - firstName
        - email
        - enabled
      type: object
    PersonBodyCreate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        company:
          $ref: "#/components/schemas/Company"
        description:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          default: true
          type: boolean
        enabled:
          default: true
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        id:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        password:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      required:
        - id
        - firstName
        - email
        - password
      type: object
    PersonBodyUpdate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        company:
          $ref: "#/components/schemas/Company"
        description:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          type: boolean
        enabled:
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        oldPassword:
          type: string
        password:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      type: object
    PersonEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Person"
      required:
        - entry
      type: object
    PersonNetwork:
      description: >
        A network is the group of users and sites that belong to an
        organization.

        Networks are organized by email domain. When a user signs up for an

        Alfresco account , their email domain becomes their Home Network.
      properties:
        createdAt:
          format: date-time
          type: string
        homeNetwork:
          description: Is this the home network?
          type: boolean
        id:
          description: This network's unique id
          type: string
        isEnabled:
          type: boolean
        paidNetwork:
          type: boolean
        quotas:
          items:
            $ref: "#/components/schemas/NetworkQuota"
          type: array
        subscriptionLevel:
          enum:
            - Free
            - Standard
            - Enterprise
          type: string
      required:
        - id
        - isEnabled
      type: object
    PersonNetworkEntry:
      properties:
        entry:
          $ref: "#/components/schemas/PersonNetwork"
      required:
        - entry
      type: object
    PersonNetworkPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/PersonNetworkEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    PersonPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/PersonEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    Preference:
      description: |
        A specific preference.
      properties:
        id:
          description: The unique id of the preference
          type: string
        value:
          description: The value of the preference. Note that this can be of any JSON type.
          type: string
      required:
        - id
      type: object
    PreferenceEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Preference"
      required:
        - entry
      type: object
    PreferencePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/PreferenceEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    ProbeEntry:
      properties:
        entry:
          properties:
            message:
              type: string
          type: object
      required:
        - entry
      type: object
    Property:
      properties:
        constraints:
          description: list of constraints defined for the property
          items:
            $ref: "#/components/schemas/Constraint"
          type: array
        dataType:
          description: the name of the property type (e.g. d:text)
          type: string
        defaultValue:
          description: the default value
          type: string
        description:
          description: the human-readable description
          type: string
        id:
          type: string
        isMandatory:
          description: define if the property is mandatory
          type: boolean
        isMandatoryEnforced:
          description: define if the presence of mandatory properties is enforced
          type: boolean
        isMultiValued:
          description: define if the property is multi-valued
          type: boolean
        isProtected:
          description: define if the property is system maintained
          type: boolean
        title:
          description: the human-readable title
          type: string
      required:
        - id
      type: object
    Rating:
      description: |
        A person can rate an item of content by liking it. They can also remove
        their like of an item of content. API methods exist to get a list of
        ratings and to add a new rating.
      properties:
        aggregate:
          properties:
            average:
              type: integer
            numberOfRatings:
              type: integer
          type: object
        id:
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean for
            the likes and an integer for the fiveStar.
          type: string
        ratedAt:
          format: date-time
          type: string
      required:
        - id
        - aggregate
      type: object
    RatingBody:
      properties:
        id:
          default: likes
          description: The rating scheme type. Possible values are likes and fiveStar.
          enum:
            - likes
            - fiveStar
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean for
            the likes and an integer for the fiveStar
          type: string
      required:
        - id
        - myRating
      type: object
    RatingEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Rating"
      required:
        - entry
      type: object
    RatingPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/RatingEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    Rendition:
      properties:
        content:
          $ref: "#/components/schemas/ContentInfo"
        id:
          type: string
        status:
          enum:
            - CREATED
            - NOT_CREATED
          type: string
      type: object
    RenditionBodyCreate:
      properties:
        id:
          type: string
      required:
        - id
      type: object
    RenditionEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Rendition"
      required:
        - entry
      type: object
    RenditionPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/RenditionEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    RevertBody:
      properties:
        comment:
          type: string
        majorVersion:
          type: boolean
      type: object
    SharedLink:
      properties:
        allowableOperations:
          description: >
            The allowable operations for the Quickshare link itself. See
            allowableOperationsOnTarget for the

            allowable operations pertaining to the linked content node.
          items:
            type: string
          type: array
        allowableOperationsOnTarget:
          description: |
            The allowable operations for the content node being shared.
          items:
            type: string
          type: array
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: "#/components/schemas/ContentInfo"
        description:
          type: string
        expiresAt:
          format: date-time
          type: string
        id:
          type: string
        isFavorite:
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: "#/components/schemas/UserInfo"
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeId:
          type: string
        path:
          $ref: "#/components/schemas/PathInfo"
        properties:
          description: >
            A subset of the target node's properties, system properties and
            properties already available in the SharedLink are excluded.
          type: object
        sharedByUser:
          $ref: "#/components/schemas/UserInfo"
        title:
          type: string
      type: object
    SharedLinkBodyCreate:
      properties:
        expiresAt:
          format: date-time
          type: string
        nodeId:
          type: string
      required:
        - nodeId
      type: object
    SharedLinkBodyEmail:
      properties:
        client:
          type: string
        locale:
          type: string
        message:
          type: string
        recipientEmails:
          items:
            type: string
          type: array
      type: object
    SharedLinkEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SharedLink"
      required:
        - entry
      type: object
    SharedLinkPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SharedLinkEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    Site:
      properties:
        description:
          type: string
        guid:
          type: string
        id:
          type: string
        preset:
          type: string
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
        title:
          type: string
        visibility:
          enum:
            - PRIVATE
            - MODERATED
            - PUBLIC
          type: string
      required:
        - id
        - guid
        - title
        - visibility
      type: object
    SiteBodyCreate:
      properties:
        description:
          type: string
        id:
          type: string
        title:
          type: string
        visibility:
          default: PUBLIC
          enum:
            - PUBLIC
            - PRIVATE
            - MODERATED
          type: string
      required:
        - title
        - visibility
      type: object
    SiteBodyUpdate:
      properties:
        description:
          type: string
        title:
          type: string
        visibility:
          enum:
            - PRIVATE
            - MODERATED
            - PUBLIC
          type: string
      type: object
    SiteContainer:
      properties:
        folderId:
          type: string
        id:
          type: string
      required:
        - id
        - folderId
      type: object
    SiteContainerEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteContainer"
      required:
        - entry
      type: object
    SiteContainerPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteContainerEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SiteEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Site"
      required:
        - entry
      type: object
    SiteGroup:
      properties:
        group:
          $ref: "#/components/schemas/GroupMember"
        id:
          type: string
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
      required:
        - id
        - group
        - role
      type: object
    SiteGroupEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteGroup"
      required:
        - entry
      type: object
    SiteGroupPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteGroupEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SiteMember:
      properties:
        id:
          type: string
        isMemberOfGroup:
          type: boolean
        person:
          $ref: "#/components/schemas/Person"
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
      required:
        - id
        - person
        - role
      type: object
    SiteMemberEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteMember"
      required:
        - entry
      type: object
    SiteMemberPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteMemberEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SiteMembershipApprovalBody:
      properties:
        role:
          type: string
      type: object
    SiteMembershipBodyCreate:
      properties:
        id:
          type: string
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
      required:
        - role
        - id
      type: object
    SiteMembershipBodyUpdate:
      properties:
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
      required:
        - role
      type: object
    SiteMembershipRejectionBody:
      properties:
        comment:
          type: string
      type: object
    SiteMembershipRequest:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        message:
          type: string
        site:
          $ref: "#/components/schemas/Site"
      required:
        - id
        - createdAt
        - site
      type: object
    SiteMembershipRequestBodyCreate:
      properties:
        client:
          description: >
            Optional client name used when sending an email to the end user,
            defaults to "share" if not provided.

            **Note:** The client must be registered before this API can send an email.

            **Note:** This is available in Alfresco 7.0.0 and newer versions.
          type: string
        id:
          type: string
        message:
          type: string
        title:
          type: string
      required:
        - id
      type: object
    SiteMembershipRequestBodyUpdate:
      properties:
        message:
          type: string
      type: object
    SiteMembershipRequestEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteMembershipRequest"
      required:
        - entry
      type: object
    SiteMembershipRequestPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteMembershipRequestEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SiteMembershipRequestWithPerson:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        message:
          type: string
        person:
          $ref: "#/components/schemas/Person"
        site:
          $ref: "#/components/schemas/Site"
      required:
        - id
        - createdAt
        - site
        - person
      type: object
    SiteMembershipRequestWithPersonEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteMembershipRequestWithPerson"
      required:
        - entry
      type: object
    SiteMembershipRequestWithPersonPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteMembershipRequestWithPersonEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SitePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    SiteRole:
      properties:
        guid:
          type: string
        id:
          type: string
        role:
          enum:
            - SiteConsumer
            - SiteCollaborator
            - SiteContributor
            - SiteManager
          type: string
        site:
          $ref: "#/components/schemas/Site"
      required:
        - site
        - id
        - guid
        - role
      type: object
    SiteRoleEntry:
      properties:
        entry:
          $ref: "#/components/schemas/SiteRole"
      required:
        - entry
      type: object
    SiteRolePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/SiteRoleEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    Tag:
      properties:
        count:
          type: number
        id:
          type: string
        tag:
          type: string
      required:
        - id
        - tag
      type: object
    TagBody:
      properties:
        tag:
          type: string
      required:
        - tag
      type: object
    TagEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Tag"
      required:
        - entry
      type: object
    TagPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/TagEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      required:
        - list
      type: object
    UserInfo:
      properties:
        displayName:
          type: string
        id:
          type: string
      required:
        - displayName
        - id
      type: object
    Version:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: "#/components/schemas/ContentInfo"
        id:
          type: string
        isFile:
          type: boolean
        isFolder:
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: "#/components/schemas/UserInfo"
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        properties:
          type: object
        versionComment:
          type: string
      required:
        - id
        - name
        - nodeType
        - isFolder
        - isFile
        - modifiedAt
        - modifiedByUser
      type: object
    VersionEntry:
      properties:
        entry:
          $ref: "#/components/schemas/Version"
      type: object
    VersionPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: "#/components/schemas/VersionEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
