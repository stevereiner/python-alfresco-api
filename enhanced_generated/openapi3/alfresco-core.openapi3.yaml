openapi: 3.0.0
info:
  description: '**Core API**
  
  
    Provides access to the core features of Alfresco Content Services.
  
    '
  title: Alfresco Content Services REST API
  version: '1'
servers:
  - url: /alfresco/api/-default-/public/alfresco/versions/1
security:
  - basicAuth: []
x-original-produces:
  - application/json
x-original-consumes:
  - application/json
components:
  schemas:
    ActionBodyExec:
      properties:
        actionDefinitionId:
          type: string
        params:
          type: object
        targetId:
          description: The entity upon which to execute the action, typically a node
            ID or similar.
          type: string
      required:
      - actionDefinitionId
      type: object
    ActionDefinition:
      properties:
        applicableTypes:
          description: QNames of the types this action applies to
          items:
            type: string
          type: array
        description:
          description: describes the action definition, e.g. "This will move the matched
            item to another space."
          type: string
        id:
          description: "Identifier of the action definition \u2014 used for example\
            \ when executing an action"
          type: string
        name:
          description: name of the action definition, e.g. "move"
          type: string
        parameterDefinitions:
          items:
            $ref: '#/components/schemas/ActionParameterDefinition'
          type: array
        title:
          description: title of the action definition, e.g. "Move"
          type: string
        trackStatus:
          description: whether the basic action definition supports action tracking
            or not
          type: boolean
      required:
      - id
      - applicableTypes
      - trackStatus
      type: object
    ActionDefinitionEntry:
      properties:
        entry:
          $ref: '#/components/schemas/ActionDefinition'
      required:
      - entry
      type: object
    ActionDefinitionList:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/ActionDefinition'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    ActionExecResult:
      properties:
        id:
          description: The unique identifier of the action pending execution
          type: string
      required:
      - id
      type: object
    ActionExecResultEntry:
      properties:
        entry:
          $ref: '#/components/schemas/ActionExecResult'
      required:
      - entry
      type: object
    ActionParameterDefinition:
      properties:
        displayLabel:
          type: string
        mandatory:
          type: boolean
        multiValued:
          type: boolean
        name:
          type: string
        type:
          type: string
      type: object
    Activity:
      description: 'Activities describe any past activity in a site,
  
        for example creating an item of content, commenting on a node,
  
        liking an item of content.
  
        '
      properties:
        activitySummary:
          additionalProperties:
            type: string
          description: An object summarizing the activity
          type: object
        activityType:
          description: The type of the activity posted
          type: string
        feedPersonId:
          description: The feed on which this activity was posted
          type: string
        id:
          description: The unique id of the activity
          format: int64
          type: integer
        postPersonId:
          description: The id of the person who performed the activity
          type: string
        postedAt:
          description: The date time at which the activity was performed
          format: date-time
          type: string
        siteId:
          description: The unique id of the site on which the activity was performed
          type: string
      required:
      - postPersonId
      - id
      - feedPersonId
      - activityType
      type: object
    ActivityEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Activity'
      required:
      - entry
      type: object
    ActivityPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/ActivityEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    Association:
      properties:
        assocType:
          type: string
        targetId:
          type: string
      required:
      - targetId
      - assocType
      type: object
    AssociationBody:
      properties:
        assocType:
          type: string
        targetId:
          type: string
      required:
      - targetId
      - assocType
      type: object
    AssociationEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Association'
      required:
      - entry
      type: object
    AssociationInfo:
      properties:
        assocType:
          type: string
      required:
      - assocType
      type: object
    AuditApp:
      properties:
        id:
          type: string
        isEnabled:
          default: true
          type: boolean
        maxEntryId:
          type: integer
        minEntryId:
          type: integer
        name:
          type: string
      required:
      - id
      type: object
    AuditAppEntry:
      properties:
        entry:
          $ref: '#/components/schemas/AuditApp'
      type: object
    AuditAppPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/AuditAppEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    AuditBodyUpdate:
      properties:
        isEnabled:
          type: boolean
      type: object
    AuditEntry:
      properties:
        auditApplicationId:
          type: string
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        id:
          type: string
        values:
          type: object
      required:
      - id
      - auditApplicationId
      - createdByUser
      - createdAt
      type: object
    AuditEntryEntry:
      properties:
        entry:
          $ref: '#/components/schemas/AuditEntry'
      type: object
    AuditEntryPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/AuditEntryEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    Capabilities:
      properties:
        isAdmin:
          type: boolean
        isGuest:
          type: boolean
        isMutable:
          type: boolean
      type: object
    ChildAssociation:
      properties:
        assocType:
          type: string
        childId:
          type: string
      required:
      - childId
      - assocType
      type: object
    ChildAssociationBody:
      properties:
        assocType:
          type: string
        childId:
          type: string
      required:
      - childId
      - assocType
      type: object
    ChildAssociationEntry:
      properties:
        entry:
          $ref: '#/components/schemas/ChildAssociation'
      required:
      - entry
      type: object
    ChildAssociationInfo:
      properties:
        assocType:
          type: string
        isPrimary:
          type: boolean
      required:
      - assocType
      - isPrimary
      type: object
    ClientBody:
      properties:
        client:
          description: the client name
          type: string
      required:
      - client
      type: object
    Comment:
      properties:
        canDelete:
          type: boolean
        canEdit:
          type: boolean
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/Person'
        edited:
          type: boolean
        id:
          type: string
        modifiedAt:
          format: date-time
          type: string
        modifiedBy:
          $ref: '#/components/schemas/Person'
        title:
          type: string
      required:
      - id
      - title
      - content
      - createdBy
      - createdAt
      - edited
      - modifiedBy
      - modifiedAt
      - canEdit
      - canDelete
      type: object
    CommentBody:
      properties:
        content:
          type: string
      required:
      - content
      type: object
    CommentEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Comment'
      required:
      - entry
      type: object
    CommentPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/CommentEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    Company:
      properties:
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        email:
          type: string
        fax:
          type: string
        organization:
          type: string
        postcode:
          type: string
        telephone:
          type: string
      type: object
    Constraint:
      properties:
        description:
          description: the human-readable constraint description
          type: string
        id:
          type: string
        parameters:
          additionalProperties:
            type: object
          type: object
        title:
          description: the human-readable constraint title
          type: string
        type:
          description: the type of the constraint
          type: string
      required:
      - id
      type: object
    ContentInfo:
      properties:
        encoding:
          type: string
        mimeType:
          type: string
        mimeTypeName:
          type: string
        sizeInBytes:
          format: int64
          type: integer
      required:
      - mimeType
      type: object
    Definition:
      properties:
        properties:
          description: List of property definitions effective for this node as the result
            of combining the type with all aspects.
          items:
            $ref: '#/components/schemas/Property'
          type: array
    DeletedNode:
      allOf:
      - $ref: '#/components/schemas/Node'
      - properties:
          archivedAt:
            format: date-time
            type: string
          archivedByUser:
            $ref: '#/components/schemas/UserInfo'
        required:
        - archivedByUser
        - archivedAt
        type: object
    DeletedNodeBodyRestore:
      properties:
        assocType:
          type: string
        targetParentId:
          type: string
      type: object
    DeletedNodeEntry:
      properties:
        entry:
          $ref: '#/components/schemas/DeletedNode'
      type: object
    DeletedNodesPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/DeletedNodeEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    DirectAccessUrlBodyCreate:
      properties:
        expiresAt:
          format: date-time
          type: string
        validFor:
          description: 'The length of time in seconds that the url is valid for.
  
            '
          minimum: 1
          type: integer
      type: object
    Download:
      properties:
        bytesAdded:
          default: 0
          description: number of bytes added so far in the zip
          type: integer
        filesAdded:
          default: 0
          description: number of files added so far in the zip
          type: integer
        id:
          description: the id of the download node
          type: string
        status:
          default: PENDING
          description: the current status of the download node creation
          enum:
          - PENDING
          - CANCELLED
          - IN_PROGRESS
          - DONE
          - MAX_CONTENT_SIZE_EXCEEDED
          type: string
        totalBytes:
          default: 0
          description: the total number of bytes to be added in the zip
          type: integer
        totalFiles:
          default: 0
          description: the total number of files to be added in the zip
          type: integer
      type: object
    DownloadBodyCreate:
      properties:
        nodeIds:
          items:
            type: string
          type: array
      required:
      - nodeIds
      type: object
    DownloadEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Download'
      required:
      - entry
      type: object
    Error:
      properties:
        error:
          properties:
            briefSummary:
              type: string
            descriptionURL:
              type: string
            errorKey:
              type: string
            logId:
              type: string
            stackTrace:
              type: string
            statusCode:
              format: int32
              type: integer
          type: object
      required:
      - error
      type: object
    Favorite:
      description: 'A favorite describes an Alfresco entity that a person has marked
        as a favorite.
  
        The target can be a site, file or folder.
  
        '
      properties:
        createdAt:
          description: The time the object was made a favorite.
          format: date-time
          type: string
        properties:
          description: A subset of the target favorite properties, system properties
            and properties already available in the target are excluded.
          type: object
        target:
          type: object
        targetGuid:
          description: The guid of the object that is a favorite.
          type: string
      required:
      - targetGuid
      - target
      type: object
    FavoriteBodyCreate:
      properties:
        target:
          type: object
      required:
      - target
      type: object
    FavoriteEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Favorite'
      required:
      - entry
      type: object
    FavoritePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/FavoriteEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    FavoriteSite:
      properties:
        id:
          type: string
      required:
      - id
      type: object
    FavoriteSiteBodyCreate:
      properties:
        id:
          type: string
      required:
      - id
      type: object
    FavoriteSiteEntry:
      properties:
        entry:
          $ref: '#/components/schemas/FavoriteSite'
      required:
      - entry
      type: object
    Group:
      properties:
        displayName:
          type: string
        id:
          type: string
        isRoot:
          default: true
          type: boolean
        parentIds:
          items:
            type: string
          type: array
        zones:
          items:
            type: string
          type: array
      required:
      - id
      - displayName
      - isRoot
      type: object
    GroupBodyCreate:
      properties:
        displayName:
          type: string
        id:
          type: string
        parentIds:
          items:
            type: string
          type: array
      required:
      - id
      - displayName
      type: object
    GroupBodyUpdate:
      properties:
        displayName:
          type: string
      required:
      - displayName
      type: object
    GroupEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Group'
      required:
      - entry
      type: object
    GroupMember:
      properties:
        displayName:
          type: string
        id:
          type: string
        memberType:
          enum:
          - GROUP
          - PERSON
          type: string
      required:
      - id
      - displayName
      - memberType
      type: object
    GroupMemberEntry:
      properties:
        entry:
          $ref: '#/components/schemas/GroupMember'
      required:
      - entry
      type: object
    GroupMemberPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/GroupMemberEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    GroupMembershipBodyCreate:
      properties:
        id:
          type: string
        memberType:
          enum:
          - GROUP
          - PERSON
          type: string
      required:
      - id
      - memberType
      type: object
    GroupPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/GroupEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    NetworkQuota:
      description: 'Limits and usage of each quota. A network will have quotas for File
        space,
  
        the number of sites in the network, the number of people in the network,
  
        and the number of network administrators
  
        '
      properties:
        id:
          type: string
        limit:
          format: int64
          type: integer
        usage:
          format: int64
          type: integer
      required:
      - id
      - limit
      - usage
      type: object
    Node:
      properties:
        allowableOperations:
          items:
            type: string
          type: array
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: '#/components/schemas/ContentInfo'
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        definition:
          $ref: '#/components/schemas/Definition'
        id:
          type: string
        isFavorite:
          type: boolean
        isFile:
          type: boolean
        isFolder:
          type: boolean
        isLink:
          type: boolean
        isLocked:
          default: false
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        parentId:
          type: string
        path:
          $ref: '#/components/schemas/PathInfo'
        permissions:
          $ref: '#/components/schemas/PermissionsInfo'
        properties:
          type: object
      required:
      - id
      - name
      - nodeType
      - isFolder
      - isFile
      - createdAt
      - createdByUser
      - modifiedAt
      - modifiedByUser
      type: object
    NodeAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - properties:
          association:
            $ref: '#/components/schemas/AssociationInfo'
        type: object
    NodeAssociationEntry:
      properties:
        entry:
          $ref: '#/components/schemas/NodeAssociation'
      required:
      - entry
      type: object
    NodeAssociationPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/NodeAssociationEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
            source:
              $ref: '#/components/schemas/Node'
          type: object
      type: object
    NodeBodyCopy:
      properties:
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        targetParentId:
          type: string
      required:
      - targetParentId
      type: object
    NodeBodyCreate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        association:
          properties:
            assocType:
              type: string
          type: object
        definition:
          $ref: '#/components/schemas/Definition'
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
        properties:
          type: object
        relativePath:
          type: string
        secondaryChildren:
          items:
            $ref: '#/components/schemas/ChildAssociationBody'
          type: array
        targets:
          items:
            $ref: '#/components/schemas/AssociationBody'
          type: array
      required:
      - name
      - nodeType
      type: object
    NodeBodyLock:
      properties:
        lifetime:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - EPHEMERAL
          type: string
        timeToExpire:
          minimum: 0
          type: integer
        type:
          default: ALLOW_OWNER_CHANGES
          enum:
          - ALLOW_OWNER_CHANGES
          - FULL
          type: string
      type: object
    NodeBodyMove:
      properties:
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        targetParentId:
          type: string
      required:
      - targetParentId
      type: object
    NodeBodyUpdate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    NodeChildAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - properties:
          association:
            $ref: '#/components/schemas/ChildAssociationInfo'
        type: object
    NodeChildAssociationEntry:
      properties:
        entry:
          $ref: '#/components/schemas/NodeChildAssociation'
      required:
      - entry
      type: object
    NodeChildAssociationPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/NodeChildAssociationEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
            source:
              $ref: '#/components/schemas/Node'
          type: object
      type: object
    NodeEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Node'
      required:
      - entry
      type: object
    NodePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/NodeEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
            source:
              $ref: '#/components/schemas/Node'
          type: object
      type: object
    Pagination:
      properties:
        count:
          description: 'The number of objects in the entries array.
  
            '
          format: int64
          type: integer
        hasMoreItems:
          description: 'A boolean value which is **true** if there are more entities
            in the collection
  
            beyond those in this response. A true value means a request with a larger
            value
  
            for the **skipCount** or the **maxItems** parameter will return more entities.
  
            '
          type: boolean
        maxItems:
          description: 'The value of the **maxItems** parameter used to generate this
            list.
  
            If there was no **maxItems** parameter then the default value is 100.
  
            '
          format: int64
          type: integer
        skipCount:
          description: 'An integer describing how many entities exist in the collection
            before
  
            those included in this list. If there was no **skipCount** parameter then
            the
  
            default value is 0.
  
            '
          format: int64
          type: integer
        totalItems:
          description: 'An integer describing the total number of entities in the collection.
  
            The API might not be able to determine this value,
  
            in which case this property will not be present.
  
            '
          format: int64
          type: integer
      type: object
    PasswordResetBody:
      properties:
        id:
          description: the workflow id provided in the reset password email
          type: string
        key:
          description: the workflow key provided in the reset password email
          type: string
        password:
          description: the new password
          type: string
      required:
      - password
      - id
      - key
      type: object
    PathElement:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        id:
          type: string
        name:
          type: string
        nodeType:
          type: string
      type: object
    PathInfo:
      properties:
        elements:
          items:
            $ref: '#/components/schemas/PathElement'
          type: array
        isComplete:
          type: boolean
        name:
          type: string
      type: object
    PermissionElement:
      properties:
        accessStatus:
          default: ALLOWED
          enum:
          - ALLOWED
          - DENIED
          type: string
        authorityId:
          type: string
        name:
          type: string
      type: object
    PermissionsBody:
      properties:
        isInheritanceEnabled:
          type: boolean
        locallySet:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
      type: object
    PermissionsInfo:
      properties:
        inherited:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
        isInheritanceEnabled:
          type: boolean
        locallySet:
          items:
            $ref: '#/components/schemas/PermissionElement'
          type: array
        settable:
          items:
            type: string
          type: array
      type: object
    Person:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        avatarId:
          type: string
        capabilities:
          $ref: '#/components/schemas/Capabilities'
        company:
          $ref: '#/components/schemas/Company'
        description:
          type: string
        displayName:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          default: true
          type: boolean
        enabled:
          default: true
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        id:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        statusUpdatedAt:
          format: date-time
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      required:
      - id
      - firstName
      - email
      - enabled
      type: object
    PersonBodyCreate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        company:
          $ref: '#/components/schemas/Company'
        description:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          default: true
          type: boolean
        enabled:
          default: true
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        id:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        password:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      required:
      - id
      - firstName
      - email
      - password
      type: object
    PersonBodyUpdate:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        company:
          $ref: '#/components/schemas/Company'
        description:
          type: string
        email:
          type: string
        emailNotificationsEnabled:
          type: boolean
        enabled:
          type: boolean
        firstName:
          type: string
        googleId:
          type: string
        instantMessageId:
          type: string
        jobTitle:
          type: string
        lastName:
          type: string
        location:
          type: string
        mobile:
          type: string
        oldPassword:
          type: string
        password:
          type: string
        properties:
          type: object
        skypeId:
          type: string
        telephone:
          type: string
        userStatus:
          type: string
      type: object
    PersonEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Person'
      required:
      - entry
      type: object
    PersonNetwork:
      description: 'A network is the group of users and sites that belong to an organization.
  
        Networks are organized by email domain. When a user signs up for an
  
        Alfresco account , their email domain becomes their Home Network.
  
        '
      properties:
        createdAt:
          format: date-time
          type: string
        homeNetwork:
          description: Is this the home network?
          type: boolean
        id:
          description: This network's unique id
          type: string
        isEnabled:
          type: boolean
        paidNetwork:
          type: boolean
        quotas:
          items:
            $ref: '#/components/schemas/NetworkQuota'
          type: array
        subscriptionLevel:
          enum:
          - Free
          - Standard
          - Enterprise
          type: string
      required:
      - id
      - isEnabled
      type: object
    PersonNetworkEntry:
      properties:
        entry:
          $ref: '#/components/schemas/PersonNetwork'
      required:
      - entry
      type: object
    PersonNetworkPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/PersonNetworkEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    PersonPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/PersonEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    Preference:
      description: 'A specific preference.
  
        '
      properties:
        id:
          description: The unique id of the preference
          type: string
        value:
          description: The value of the preference. Note that this can be of any JSON
            type.
          type: string
      required:
      - id
      type: object
    PreferenceEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Preference'
      required:
      - entry
      type: object
    PreferencePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/PreferenceEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    ProbeEntry:
      properties:
        entry:
          properties:
            message:
              type: string
          type: object
      required:
      - entry
      type: object
    Property:
      properties:
        constraints:
          description: list of constraints defined for the property
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        dataType:
          description: the name of the property type (e.g. d:text)
          type: string
        defaultValue:
          description: the default value
          type: string
        description:
          description: the human-readable description
          type: string
        id:
          type: string
        isMandatory:
          description: define if the property is mandatory
          type: boolean
        isMandatoryEnforced:
          description: define if the presence of mandatory properties is enforced
          type: boolean
        isMultiValued:
          description: define if the property is multi-valued
          type: boolean
        isProtected:
          description: define if the property is system maintained
          type: boolean
        title:
          description: the human-readable title
          type: string
      required:
      - id
      type: object
    Rating:
      description: 'A person can rate an item of content by liking it. They can also
        remove
  
        their like of an item of content. API methods exist to get a list of
  
        ratings and to add a new rating.
  
        '
      properties:
        aggregate:
          properties:
            average:
              type: integer
            numberOfRatings:
              type: integer
          type: object
        id:
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean
            for the likes and an integer for the fiveStar.
          type: string
        ratedAt:
          format: date-time
          type: string
      required:
      - id
      - aggregate
      type: object
    RatingBody:
      properties:
        id:
          default: likes
          description: The rating scheme type. Possible values are likes and fiveStar.
          enum:
          - likes
          - fiveStar
          type: string
        myRating:
          description: The rating. The type is specific to the rating scheme, boolean
            for the likes and an integer for the fiveStar
          type: string
      required:
      - id
      - myRating
      type: object
    RatingEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Rating'
      required:
      - entry
      type: object
    RatingPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/RatingEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    Rendition:
      properties:
        content:
          $ref: '#/components/schemas/ContentInfo'
        id:
          type: string
        status:
          enum:
          - CREATED
          - NOT_CREATED
          type: string
      type: object
    RenditionBodyCreate:
      properties:
        id:
          type: string
      required:
      - id
      type: object
    RenditionEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Rendition'
      required:
      - entry
      type: object
    RenditionPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/RenditionEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
    RevertBody:
      properties:
        comment:
          type: string
        majorVersion:
          type: boolean
      type: object
    SharedLink:
      properties:
        allowableOperations:
          description: 'The allowable operations for the Quickshare link itself. See
            allowableOperationsOnTarget for the
  
            allowable operations pertaining to the linked content node.
  
            '
          items:
            type: string
          type: array
        allowableOperationsOnTarget:
          description: 'The allowable operations for the content node being shared.
  
            '
          items:
            type: string
          type: array
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: '#/components/schemas/ContentInfo'
        description:
          type: string
        expiresAt:
          format: date-time
          type: string
        id:
          type: string
        isFavorite:
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeId:
          type: string
        path:
          $ref: '#/components/schemas/PathInfo'
        properties:
          description: 'A subset of the target node''s properties, system properties
            and properties already available in the SharedLink are excluded.
  
            '
          type: object
        sharedByUser:
          $ref: '#/components/schemas/UserInfo'
        title:
          type: string
      type: object
    SharedLinkBodyCreate:
      properties:
        expiresAt:
          format: date-time
          type: string
        nodeId:
          type: string
      required:
      - nodeId
      type: object
    SharedLinkBodyEmail:
      properties:
        client:
          type: string
        locale:
          type: string
        message:
          type: string
        recipientEmails:
          items:
            type: string
          type: array
      type: object
    SharedLinkEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SharedLink'
      required:
      - entry
      type: object
    SharedLinkPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SharedLinkEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    Site:
      properties:
        description:
          type: string
        guid:
          type: string
        id:
          type: string
        preset:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
        title:
          type: string
        visibility:
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
          type: string
      required:
      - id
      - guid
      - title
      - visibility
      type: object
    SiteBodyCreate:
      properties:
        description:
          type: string
        id:
          type: string
        title:
          type: string
        visibility:
          default: PUBLIC
          enum:
          - PUBLIC
          - PRIVATE
          - MODERATED
          type: string
      required:
      - title
      - visibility
      type: object
    SiteBodyUpdate:
      properties:
        description:
          type: string
        title:
          type: string
        visibility:
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
          type: string
      type: object
    SiteContainer:
      properties:
        folderId:
          type: string
        id:
          type: string
      required:
      - id
      - folderId
      type: object
    SiteContainerEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteContainer'
      required:
      - entry
      type: object
    SiteContainerPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteContainerEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SiteEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Site'
      required:
      - entry
      type: object
    SiteGroup:
      properties:
        group:
          $ref: '#/components/schemas/GroupMember'
        id:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - id
      - group
      - role
      type: object
    SiteGroupEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteGroup'
      required:
      - entry
      type: object
    SiteGroupPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteGroupEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SiteMember:
      properties:
        id:
          type: string
        isMemberOfGroup:
          type: boolean
        person:
          $ref: '#/components/schemas/Person'
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - id
      - person
      - role
      type: object
    SiteMemberEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteMember'
      required:
      - entry
      type: object
    SiteMemberPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteMemberEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SiteMembershipApprovalBody:
      properties:
        role:
          type: string
      type: object
    SiteMembershipBodyCreate:
      properties:
        id:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - role
      - id
      type: object
    SiteMembershipBodyUpdate:
      properties:
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
      required:
      - role
      type: object
    SiteMembershipRejectionBody:
      properties:
        comment:
          type: string
      type: object
    SiteMembershipRequest:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        message:
          type: string
        site:
          $ref: '#/components/schemas/Site'
      required:
      - id
      - createdAt
      - site
      type: object
    SiteMembershipRequestBodyCreate:
      properties:
        client:
          description: 'Optional client name used when sending an email to the end user,
            defaults to "share" if not provided.
  
            **Note:** The client must be registered before this API can send an email.
  
            **Note:** This is available in Alfresco 7.0.0 and newer versions.
  
            '
          type: string
        id:
          type: string
        message:
          type: string
        title:
          type: string
      required:
      - id
      type: object
    SiteMembershipRequestBodyUpdate:
      properties:
        message:
          type: string
      type: object
    SiteMembershipRequestEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequest'
      required:
      - entry
      type: object
    SiteMembershipRequestPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SiteMembershipRequestWithPerson:
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        message:
          type: string
        person:
          $ref: '#/components/schemas/Person'
        site:
          $ref: '#/components/schemas/Site'
      required:
      - id
      - createdAt
      - site
      - person
      type: object
    SiteMembershipRequestWithPersonEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequestWithPerson'
      required:
      - entry
      type: object
    SiteMembershipRequestWithPersonPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteMembershipRequestWithPersonEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SitePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    SiteRole:
      properties:
        guid:
          type: string
        id:
          type: string
        role:
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
          type: string
        site:
          $ref: '#/components/schemas/Site'
      required:
      - site
      - id
      - guid
      - role
      type: object
    SiteRoleEntry:
      properties:
        entry:
          $ref: '#/components/schemas/SiteRole'
      required:
      - entry
      type: object
    SiteRolePaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/SiteRoleEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    Tag:
      properties:
        count:
          type: number
        id:
          type: string
        tag:
          type: string
      required:
      - id
      - tag
      type: object
    TagBody:
      properties:
        tag:
          type: string
      required:
      - tag
      type: object
    TagEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Tag'
      required:
      - entry
      type: object
    TagPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/TagEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      required:
      - list
      type: object
    UserInfo:
      properties:
        displayName:
          type: string
        id:
          type: string
      required:
      - displayName
      - id
      type: object
    Version:
      properties:
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: '#/components/schemas/ContentInfo'
        id:
          type: string
        isFile:
          type: boolean
        isFolder:
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        name:
          description: 'The name must not contain spaces or the following special characters:
            * " < > \ / ? : and |.
  
            The character . must not be used at the end of the name.
  
            '
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        properties:
          type: object
        versionComment:
          type: string
      required:
      - id
      - name
      - nodeType
      - isFolder
      - isFile
      - modifiedAt
      - modifiedByUser
      type: object
    VersionEntry:
      properties:
        entry:
          $ref: '#/components/schemas/Version'
      type: object
    VersionPaging:
      properties:
        list:
          properties:
            entries:
              items:
                $ref: '#/components/schemas/VersionEntry'
              type: array
            pagination:
              $ref: '#/components/schemas/Pagination'
          type: object
      type: object
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
paths:
  /action-definitions:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets a list of all available actions
  
  
        The default sort order for the returned list is for actions to be sorted by
        ascending name.
  
        You can override the default by using the **orderBy** parameter.
  
  
        You can use any of the following fields to order the results:
  
        * name
  
        * title
  
        '
      operationId: listActions
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount** or **orderBy**
            is invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve list of available actions
      tags:
      - actions
      x-alfresco-since: 5.2.2
  /action-definitions/{actionDefinitionId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Retrieve the details of the action denoted by **actionDefinitionId**.
  
        '
      operationId: actionDetails
      parameters:
      - $ref: '#/parameters/actionDefinitionIdParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**actionDefinitionId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve the details of an action definition
      tags:
      - actions
      x-alfresco-since: 5.2.2
  /action-executions:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nExecutes an action\n\nAn action may be executed against a node specified by\
        \ **targetId**. For example:\n\n```\n{\n  \"actionDefinitionId\": \"copy\",\n\
        \  \"targetId\": \"4c4b3c43-f18b-43ff-af84-751f16f1ddfd\",\n  \"params\": {\n\
        \  \t\"destination-folder\": \"34219f79-66fa-4ebf-b371-118598af898c\"\n  }\n\
        }\n```\n\nPerforming a POST with the request body shown above will result in\
        \ the node identified by ```targetId```\nbeing copied to the destination folder\
        \ specified in the ```params``` object by the key ```destination-folder```.\n\
        \n**targetId** is optional, however, currently **targetId** must be a valid\
        \ node ID.\nIn the future, actions may be executed against different entity\
        \ types or\nexecuted without the need for the context of an entity.\n\n\nParameters\
        \ supplied to the action within the ```params``` object will be converted to\
        \ the expected type,\nwhere possible using the DefaultTypeConverter class. In\
        \ addition:\n\n* Node IDs may be supplied in their short form (implicit workspace://SpacesStore\
        \ prefix)\n* Aspect names may be supplied using their short form, e.g. cm:versionable\
        \ or cm:auditable\n\nIn this example, we add the aspect ```cm:versionable```\
        \ to a node using the QName resolution mentioned above:\n\n```\n{\n  \"actionDefinitionId\"\
        : \"add-features\",\n  \"targetId\": \"16349e3f-2977-44d1-93f2-73c12b8083b5\"\
        ,\n  \"params\": {\n  \t\"aspect-name\": \"cm:versionable\"\n  }\n}\n```\n\n\
        The ```actionDefinitionId``` is the ```id``` of an action definition as returned\
        \ by\nthe _list actions_ operations (e.g. GET /action-definitions).\n\nThe action\
        \ will be executed **asynchronously** with a `202` HTTP response signifying\
        \ that\nthe request has been accepted successfully. The response body contains\
        \ the unique ID of the action\npending execution. The ID may be used, for example\
        \ to correlate an execution with output in the server logs.\n"
      operationId: actionExec
      parameters:
      - description: Action execution details
        in: body
        name: actionBodyExec
        required: true
        schema:
          $ref: '#/components/schemas/ActionBodyExec'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionExecResultEntry'
          description: 'Action execution request accepted and pending execution.
  
            '
        '400':
          description: 'Invalid parameter: **actionDefinitionId** missing but required
            by the action
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**actionDefinitionId** or **targetId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Execute an action
      tags:
      - actions
      x-alfresco-since: 5.2.2
  /audit-applications:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets a list of audit applications in this repository.
  
  
        This list may include pre-configured audit applications, if enabled, such as:
  
  
        * alfresco-access
  
        * CMISChangeLog
  
        * Alfresco Tagging Service
  
        * Alfresco Sync Service (used by Enterprise Cloud Sync)
  
  
        You must have admin rights to retrieve audit information.
  
        '
      operationId: listAuditApps
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditAppPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to retrieve audit information
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit applications
      tags:
      - audit
      x-alfresco-since: 5.2.2
  /audit-applications/{auditApplicationId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Get status of an audit application **auditApplicationId**.
  
  
        You must have admin rights to retrieve audit information.
  
  
        You can use the **include** parameter to return the minimum and/or maximum audit
        record id for the application.
  
        '
      operationId: getAuditApp
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/auditApplicationIncludeParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
          description: Successful response
        '400':
          description: 'Invalid parameter: invalid **auditApplicationId**
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to retrieve audit information
        '404':
          description: '**applicationId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get audit application info
      tags:
      - audit
      x-alfresco-since: 5.2.2
    put:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Disable or re-enable the audit application **auditApplicationId**.
  
  
        New audit entries will not be created for a disabled audit application until
  
        it is re-enabled (and system-wide auditing is also enabled).
  
  
        Note, it is still possible to query &/or delete any existing audit entries even
  
        if auditing is disabled for the audit application.
  
  
        You must have admin rights to update audit application.
  
        '
      operationId: updateAuditApp
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The audit application to update.
        in: body
        name: auditAppBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/AuditBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
          description: Successful response
        '400':
          description: 'Invalid parameter: **auditApplicationId** is not a valid format
            or **auditAppBodyUpdate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update audit application
        '404':
          description: '**auditApplicationId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update audit application info
      tags:
      - audit
      x-alfresco-since: 5.2.2
  /audit-applications/{auditApplicationId}/audit-entries:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Permanently delete audit entries for an audit application **auditApplicationId**.
  
  
        The **where** clause must be specified, either with an inclusive time period
        or for
  
        an inclusive range of ids. The delete is within the context of the given audit
        application.
  
  
        For example:
  
  
        *   ```where=(createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00'' , ''2017-06-04T10:05:16.536+01:00'')```
  
        *   ```where=(id BETWEEN (''1234'', ''4321'')```
  
  
        You must have admin rights to delete audit information.
  
        '
      operationId: deleteAuditEntriesForAuditApp
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - description: 'Audit entries to permanently delete for an audit application,
          given an inclusive time period or range of ids. For example:
  
  
          *   ```where=(createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00'' , ''2017-06-04T10:05:16.536+01:00'')```
  
          *   ```where=(id BETWEEN (''1234'', ''4321'')```
  
          '
        in: query
        name: where
        required: true
        type: string
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **auditApplicationId** is not a valid format
            or invalid **where**
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete audit information
        '404':
          description: '**auditApplicationId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete audit entries for an audit application
      tags:
      - audit
      x-alfresco-since: 5.2.2
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets a list of audit entries for audit application **auditApplicationId**.
  
  
        You can use the **include** parameter to return additional **values** information.
  
  
        The list can be filtered by one or more of:
  
        * **createdByUser** person id
  
        * **createdAt** inclusive time period
  
        * **id** inclusive range of ids
  
        * **valuesKey** audit entry values contains the exact matching key
  
        * **valuesValue** audit entry values contains the exact matching value
  
  
        The default sort order is **createdAt** ascending, but you can use an optional
        **ASC** or **DESC**
  
        modifier to specify an ascending or descending sort order.
  
  
        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in
        descending **createdAt** order.
  
  
        You must have admin rights to retrieve audit information.
  
        '
      operationId: listAuditEntriesForAuditApp
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/omitTotalItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/maxItemsParam'
      - description: 'Optionally filter the list. Here are some examples:
  
  
          *   ```where=(createdByUser=''jbloggs'')```
  
  
          *   ```where=(id BETWEEN (''1234'', ''4321'')```
  
  
          *   ```where=(createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00'' , ''2017-06-04T10:05:16.536+01:00'')```
  
  
          *   ```where=(createdByUser=''jbloggs'' and createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00''
          , ''2017-06-04T10:05:16.536+01:00'')```
  
  
          *   ```where=(valuesKey=''/alfresco-access/login/user'')```
  
  
          *   ```where=(valuesKey=''/alfresco-access/transaction/action'' and valuesValue=''DELETE'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/auditMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: *auditApplicationId** is not a valid format,
            value of **maxItems** or **skipCount** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to retrieve audit information
        '404':
          description: '**applicationId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit entries for an audit application
      tags:
      - audit
      x-alfresco-since: 5.2.2
  /audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Permanently delete a single audit entry **auditEntryId**.
  
  
        You must have admin rights to delete audit information.
  
        '
      operationId: deleteAuditEntry
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - $ref: '#/parameters/auditEntryIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **auditApplicationId** or **auditEntryId**
            is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete audit information
        '404':
          description: '**auditApplicationId** or **auditEntryId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete an audit entry
      tags:
      - audit
      x-alfresco-since: 5.2.2
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets audit entry **auditEntryId**.
  
  
        You must have admin rights to access audit information.
  
        '
      operationId: getAuditEntry
      parameters:
      - $ref: '#/parameters/auditApplicationIdParam'
      - $ref: '#/parameters/auditEntryIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **auditApplicationId** or **auditEntryId**
            is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to retrieve audit information
        '404':
          description: '**auditApplicationId** or **auditEntryId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get audit entry
      tags:
      - audit
      x-alfresco-since: 5.2.2
  /deleted-nodes:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of deleted nodes for the current user.
  
  
        If the current user is an administrator deleted nodes for all users will be
        returned.
  
  
        The list of deleted nodes will be ordered with the most recently deleted node
        at the top of the list.
  
        '
      operationId: listDeletedNodes
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/nodeMinimalEntryIncludeParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodesPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List deleted nodes
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Permanently deletes the deleted node **nodeId**.
  
        '
      operationId: deleteDeletedNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to permanently delete the deleted
            node
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Permanently delete a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the specific deleted node **nodeId**.
  
        '
      operationId: getDeletedNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to view the deleted node
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the content of the deleted node with identifier **nodeId**.
  
        '
      operationId: getDeletedNodeContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to retrieve content of
            **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get deleted node content
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}/renditions:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nGets a list of the rendition information for each rendition of the file **nodeId**,\
        \ including the rendition id.\n\nEach\_rendition returned has a **status**:\
        \ CREATED means it is available\_to view or download, NOT_CREATED means the\
        \ rendition can be requested.\n\nYou can use the **where** parameter to filter\
        \ the returned renditions by **status**. For example, the following **where**\n\
        clause will return just the CREATED renditions:\n\n```\n(status='CREATED')\n\
        ```\n"
      operationId: listDeletedNodeRenditions
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/whereParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionPaging'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, is not
            a file, or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: List renditions for a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}/renditions/{renditionId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the rendition information for **renditionId** of file **nodeId**.
  
        '
      operationId: getArchivedNodeRendition
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/renditionIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionEntry'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Get rendition information for a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the rendition content for **renditionId** of file **nodeId**.
  
        '
      operationId: getArchivedNodeRenditionContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/renditionIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      - default: false
        description: 'If **true** and there is no rendition for this **nodeId** and
          **renditionId**,
  
          then the placeholder image for the mime type of this rendition is returned,
          rather
  
          than a 404 response.
  
          '
        in: query
        name: placeholder
        required: false
        type: boolean
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content of a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /deleted-nodes/{nodeId}/restore:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Attempts to restore the deleted node **nodeId** to its original location or
        to a new location.
  
  
        If the node is successfully restored to its former primary parent, then only
        the
  
        primary child association will be restored, including recursively for any primary
  
        children. It should be noted that no other secondary child associations or peer
  
        associations will be restored, for any of the nodes within the primary parent-child
  
        hierarchy of restored nodes, irrespective of whether these associations were
        to
  
        nodes within or outside of the restored hierarchy.
  
  
        Also, any previously shared link will not be restored since it is deleted at
        the time
  
        of delete of each node.
  
        '
      operationId: restoreDeletedNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The targetParentId if the node is restored to a new location.
        in: body
        name: deletedNodeBodyRestore
        required: false
        schema:
          $ref: '#/components/schemas/DeletedNodeBodyRestore'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** or **targetNodeId** is not a valid
            format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to restore the deleted node or
            user does not have permission to the target node
        '404':
          description: '**nodeId** does not exist or the restore destination parent
            node does not exists
  
            '
        '409':
          description: Node name already exists in the restore destination
        '422':
          description: Model integrity exception trying to restore the node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Restore a deleted node
      tags:
      - trashcan
      x-alfresco-since: '5.2'
  /downloads:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nCreates a new download node asynchronously, the content of which\
        \ will be the zipped content of the **nodeIds** specified in the JSON body like\
        \ this:\n\n```JSON\n{\n    \"nodeIds\":\n     [\n       \"c8bb482a-ff3c-4704-a3a3-de1c83ccd84c\"\
        ,\n       \"cffa62db-aa01-493d-9594-058bc058eeb1\"\n     ]\n}\n```\n\n**Note:**\
        \ The content of the download node can be obtained using the **GET /nodes/{downloadId}/content**\
        \ endpoint\n"
      operationId: createDownload
      parameters:
      - $ref: '#/parameters/fieldsParam'
      - description: The nodeIds the content of which will be zipped, which zip will
          be set as the content of our download node.
        in: body
        name: DownloadBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/DownloadBodyCreate'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
          description: The request to create a download node was accepted
        '400':
          description: 'Invalid parameter: **DownloadBodyCreate** is invalid due to
            incorrect syntax, or **nodeIds** is empty, or **nodeIds** contains a duplicate
            **nodeId**
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to add a certain **nodeId**
            to the zip
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
  /downloads/{downloadId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Cancels the creation of a download request.
  
  
        **Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}**
        endpoint
  
  
        By default, if the download node is not deleted it will be picked up by a cleaner
        job which removes download nodes older than a configurable amount of time (default
        is 1 hour)
  
  
        Information about the existing progress at the time of cancelling can be retrieved
        by calling the **GET /downloads/{downloadId}** endpoint
  
  
        The cancel operation is done asynchronously.
  
        '
      operationId: cancelDownload
      parameters:
      - $ref: '#/parameters/downloadIdParam'
      responses:
        '202':
          description: The request to cancel a download was accepted
        '400':
          description: 'Invalid parameter: **downloadId** is invalid, or **downloadId**
            does not point to a node of download type
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission cancel the **downloadId**
            node
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Cancel a download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Retrieve status information for download node **downloadId**
  
        '
      operationId: getDownload
      parameters:
      - $ref: '#/parameters/downloadIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
          description: Download node information
        '400':
          description: 'Invalid parameter: **downloadId** is invalid, or **downloadId**
            does not point to a node of download type
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to get information about
            **downloadId** node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a download
      tags:
      - downloads
      x-alfresco-since: 5.2.1
  /groups:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nGets a list of groups.\n\nYou can use the **include** parameter\
        \ to return additional information.\n\nYou can use the **where** parameter to\
        \ filter the returned groups by **isRoot**. For example, the following **where**\n\
        clause will return just the root groups:\n\n```\n(isRoot=true)\n```\n\nThe **where**\
        \ parameter can also be used to filter by ***zone*** and ***displayName***.\n\
        They may be combined with isRoot to narrow a result set even further. \nFor\
        \ example, the following where clause will only return groups belonging to the\
        \ `MY.ZONE` zone.\n\n```\nwhere=(zones in ('MY.ZONE'))\n```\n\nThis may be combined\
        \ with the isRoot filter, as shown below:\n\n```\nwhere=(isRoot=false AND zones\
        \ in ('MY.ZONE'))\n```\nThe following where clause will only return groups with\
        \ displayName `MY.GROUP.NAME`. \n\n```\nwhere=(displayName in ('MY.GROUP.NAME'))\n\
        ```\nThis may be combined with the isRoot and zones filter, as shown below:\n\
        \n```\nwhere=(isRoot=false AND displayName in ('MY.GROUP.NAME'))\n```\n\n```\n\
        where=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n```\n\n```\n\
        where=(isRoot=false AND zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n\
        ```\n\n***Note:*** restrictions include\n* `AND` is the only supported operator\
        \ when combining `isRoot`, `zones` and `displayName` filters\n* Only one zone\
        \ is supported by the filter\n* Only one displayName is supported by the filter\n\
        * The quoted zone name and displayName must be placed in parenthesis \u2014\
        \ a 400 error will result if these are omitted.\n\nThe default sort order for\
        \ the returned list is for groups to be sorted by ascending displayName.\nYou\
        \ can override the default by using the **orderBy** parameter. You can specify\
        \ one of the following fields in the **orderBy** parameter:\n* id\n* displayName\n"
      operationId: listGroups
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/groupEntryIncludeParam'
      - $ref: '#/parameters/whereParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount**, or
            **orderBy**, or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List groups
      tags:
      - groups
      x-alfresco-since: 5.2.1
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Create a group.
  
  
        The group id must start with "GROUP\_". If this is omitted it will be added
        automatically.
  
        This format is also returned when listing groups or group memberships. It should
        be noted
  
        that the other group-related operations also expect the id to start with "GROUP\_".
  
  
        If one or more parentIds are specified then the group will be created and become
        a member
  
        of each of the specified parent groups.
  
  
        If no parentIds are specified then the group will be created as a root group.
  
  
        The group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.
  
  
        You must have admin rights to create a group.
  
        '
      operationId: createGroup
      parameters:
      - $ref: '#/parameters/groupEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The group to create.
        in: body
        name: groupBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/GroupBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: invalid **groupBodyCreate**
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to create a group
        '404':
          description: '**parentIds** does not exist
  
            '
        '409':
          description: '**id** clashes with an existing group
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
  /groups/{groupId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Delete group **groupId**.
  
  
        The option to cascade delete applies this recursively to any hierarchy of group
        members.
  
        In this case, removing a group member does not delete the person or sub-group
        itself.
  
        If a removed sub-group no longer has any parent groups then it becomes a root
        group.
  
  
        You must have admin rights to delete a group.
  
        '
      operationId: deleteGroup
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - default: false
        description: 'If **true** then the delete will be applied in cascade to sub-groups.
  
          '
        in: query
        name: cascade
        required: false
        type: boolean
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **groupId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to delete a group member
        '404':
          description: '**groupId** does not exist
  
            '
        '409':
          description: 'Trying to delete a pre-defined system group, such as GROUP_EVERYONE.
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Get details for group **groupId**.
  
  
        You can use the **include** parameter to return additional information.
  
        '
      operationId: getGroup
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/groupEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: invalid **groupId**
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**groupId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get group details
      tags:
      - groups
      x-alfresco-since: 5.2.1
    put:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Update details (displayName) for group **groupId**.
  
  
        You must have admin rights to update a group.
  
        '
      operationId: updateGroup
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/groupEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The group information to update.
        in: body
        name: groupBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/GroupBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **groupId** or **groupBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to update a group
        '404':
          description: '**groupId** does not exist
  
            '
        '409':
          description: 'Trying to modify a pre-defined system group, such as GROUP_EVERYONE
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update group details
      tags:
      - groups
      x-alfresco-since: 5.2.1
  /groups/{groupId}/members:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Gets a list of the group memberships for the group **groupId**.
  
  
        You can use the **where** parameter to filter the returned groups by **memberType**.
  
  
        Example to filter by **memberType**, use any one of:
  
  
        ```
  
        (memberType=''GROUP'')
  
        (memberType=''PERSON'')
  
        ```
  
  
        The default sort order for the returned list is for group members to be sorted
        by ascending displayName.
  
        You can override the default by using the **orderBy** parameter. You can specify
        one of the following fields in the **orderBy** parameter:
  
        * id
  
        * displayName
  
        '
      operationId: listGroupMemberships
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/whereParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**,
            or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**groupId** does not exist
  
            '
        '405':
          description: 'Trying to list all members of a pre-defined system group, such
            as GROUP_EVERYONE
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List memberships of a group
      tags:
      - groups
      x-alfresco-since: 5.2.1
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Create a group membership (for an existing person or group) within a group **groupId**.
  
  
        If the added group was previously a root group then it becomes a non-root group
        since it now has a parent.
  
  
        It is an error to specify an **id** that does not exist.
  
  
        You must have admin rights to create a group membership.
  
        '
      operationId: createGroupMembership
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The group membership to add (person or sub-group).
        in: body
        name: groupMembershipBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/GroupMembershipBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **groupId** or **groupMembershipBodyCreate**
            is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to create a group membership
        '404':
          description: '**groupId** or *id* (of group or person) does not exist
  
            '
        '409':
          description: 'Trying to modify a pre-defined system group, such as GROUP_EVERYONE.
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a group membership
      tags:
      - groups
      x-alfresco-since: 5.2.1
  /groups/{groupId}/members/{groupMemberId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.1 and newer
        versions.
  
  
        Delete group member **groupMemberId** (person or sub-group) from group **groupId**.
  
  
        Removing a group member does not delete the person or sub-group itself.
  
  
        If a removed sub-group no longer has any parent groups then it becomes a root
        group.
  
  
        You must have admin rights to delete a group membership.
  
        '
      operationId: deleteGroupMembership
      parameters:
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/groupMemberIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **groupId**, or **groupMemberId**
            is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to delete a group membership
        '404':
          description: '**groupId** or **groupMemberId** does not exist
  
            '
        '409':
          description: 'Trying to delete a member of a pre-defined system group, such
            as GROUP_EVERYONE
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group membership
      tags:
      - groups
      x-alfresco-since: 5.2.1
  /networks/{networkId}:
    get:
      description: Gets information for a network **networkId**.
      operationId: getNetwork
      parameters:
      - $ref: '#/parameters/networkIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**networkId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a network
      tags:
      - networks
  /nodes/{nodeId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Deletes the node **nodeId**.
  
  
        If **nodeId** is a folder, then its children are also deleted.
  
  
        Deleted nodes move to the trashcan unless the **permanent** query parameter
        is **true** and the current user is the owner of the node or an admin.
  
  
        Deleting a node deletes it from its primary parent and also from any secondary
        parents. Peer associations are also deleted, where the deleted
  
        node is either a source or target of an association. This applies recursively
        to any hierarchy of primary children of the deleted node.
  
  
        **Note:** If the node is not permanently deleted, and is later successfully
        restored to its former primary parent, then the primary
  
        child association is restored. This applies recursively for any primary children.
        No other secondary child associations or
  
        peer associations are restored for any of the nodes in the primary parent-child
        hierarchy of restored nodes, regardless of whether the original
  
        associations were to nodes inside or outside the restored hierarchy.
  
        '
      operationId: deleteNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - default: false
        description: 'If **true** then the node is deleted permanently, without moving
          to the trashcan.
  
          Only the owner of the node or an admin can permanently delete the node.
  
          '
        in: query
        name: permanent
        required: false
        type: boolean
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: '**nodeId** is locked and cannot be deleted
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Get information for node **nodeId**.
  
  
        You can use the **include** parameter to return additional information.
  
        '
      operationId: getNode
      parameters:
      - $ref: '#/parameters/nodeIdWithAliasParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - description: 'A path relative to the **nodeId**. If you set this,
  
          information is returned on the node resolved by this path.
  
          '
        in: query
        name: relativePath
        required: false
        type: string
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to retrieve **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
    put:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nUpdates the node **nodeId**. For example, you can rename a file or folder:\n\
        ```JSON\n{\n  \"name\":\"My new name\"\n}\n```\nYou can also set or update one\
        \ or more properties:\n```JSON\n{\n  \"properties\":\n  {\n    \"cm:title\"\
        :\"Folder title\"\n  }\n}\n```\nYou can update multi-value properties of a node\
        \ which supports properties of type multiple.\n ```JSON\n{\n  \"name\":\"My\
        \ Other Folder\",\n  \"nodeType\":\"custom:destination\",\n  \"properties\"\
        :\n  {\n    \"cm:title\":\"Folder title\",\n    \"cm:description\":\"This is\
        \ an important folder\",\n    \"custom:locations\": [\n                    \
        \     \"location NewX\",\n                         \"location NewY\"\n     \
        \                   ]\n  }\n}\n```\n\n**Note:** setting properties of type d:content\
        \ and d:category are not supported.\n\n**Note:** if you want to add or remove\
        \ aspects, then you must use **GET /nodes/{nodeId}** first to get the complete\
        \ set of *aspectNames*.\n\nYou can add (or remove) *locallySet* permissions,\
        \ if any, in addition to any inherited permissions.\nYou can also optionally\
        \ disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:\n\
        ```JSON\n{\n  \"permissions\":\n    {\n      \"isInheritanceEnabled\": false,\n\
        \      \"locallySet\":\n        [\n          {\"authorityId\": \"GROUP_special\"\
        , \"name\": \"Read\", \"accessStatus\":\"DENIED\"},\n          {\"authorityId\"\
        : \"testuser\", \"name\": \"Contributor\", \"accessStatus\":\"ALLOWED\"}\n \
        \       ]\n    }\n}\n```\n**Note:** if you want to add or remove locally set\
        \ permissions then you must use **GET /nodes/{nodeId}** first to get the complete\
        \ set of *locallySet* permissions.\n\n**Note:** Currently there is no optimistic\
        \ locking for updates, so they are applied in \"last one wins\" order.\n"
      operationId: updateNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The node information to update.
        in: body
        name: nodeBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/NodeBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: the update request is invalid or **nodeId**
            is not a valid format or **nodeBodyUpdate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: Updated name clashes with an existing node in the current parent
            folder
        '422':
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/action-definitions:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Retrieve the list of actions that may be executed against the given **nodeId**.
  
  
        The default sort order for the returned list is for actions to be sorted by
        ascending name.
  
        You can override the default by using the **orderBy** parameter.
  
  
        You can use any of the following fields to order the results:
  
        * name
  
        * title
  
        '
      operationId: nodeActions
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount** or **orderBy**
            is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve actions for a node
      tags:
      - actions
      x-alfresco-since: 5.2.2
  /nodes/{nodeId}/audit-entries:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets a list of audit entries for node **nodeId**.
  
  
        The list can be filtered by **createdByUser** and for a given inclusive time
        period.
  
  
        The default sort order is **createdAt** ascending, but you can use an optional
        **ASC** or **DESC**
  
        modifier to specify an ascending or descending sort order.
  
  
        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in
        descending **createdAt** order.
  
  
        This relies on the pre-configured ''alfresco-access'' audit application.
  
        '
      operationId: listAuditEntriesForNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/maxItemsParam'
      - description: 'Optionally filter the list. Here are some examples:
  
  
          *   ```where=(createdByUser=''-me-'')```
  
  
          *   ```where=(createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00'' , ''2017-06-04T10:05:16.536+01:00'')```
  
  
          *   ```where=(createdByUser=''jbloggs'' and createdAt BETWEEN (''2017-06-02T12:13:51.593+01:00''
          , ''2017-06-04T10:05:16.536+01:00'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/auditMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: *nodeId** is not a valid format, value of
            **maxItems** or **skipCount** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to retrieve audit information
        '404':
          description: '**nodeId** does not exist
  
            '
        '501':
          description: Audit is disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List audit entries for a node
      tags:
      - audit
      x-alfresco-since: 5.2.2
  /nodes/{nodeId}/children:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of children of the parent node **nodeId**.
  
  
        Minimal information for each child is returned by default.
  
  
        You can use the **include** parameter to return additional information.
  
  
        The list of child nodes includes primary children and secondary children, if
        there are any.
  
  
        You can use the **include** parameter (include=association) to return child
        association details
  
        for each child, including the **assocTyp**e and the **isPrimary** flag.
  
  
        The default sort order for the returned list is for folders to be sorted before
        files, and by ascending name.
  
  
        You can override the default using **orderBy** to specify one or more fields
        to sort by. The default order is always ascending, but
  
        you can use an optional **ASC** or **DESC** modifier to specify an ascending
        or descending sort order.
  
  
        For example, specifying ```orderBy=name DESC``` returns a mixed folder/file
        list in descending **name** order.
  
  
        You can use any of the following fields to order the results:
  
        * isFolder
  
        * name
  
        * mimeType
  
        * nodeType
  
        * sizeInBytes
  
        * modifiedAt
  
        * createdAt
  
        * modifiedByUser
  
        * createdByUser
  
        '
      operationId: listNodeChildren
      parameters:
      - $ref: '#/parameters/nodeIdWithAliasParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - description: 'Optionally filter the list. Here are some examples:
  
  
          *   ```where=(isFolder=true)```
  
  
          *   ```where=(isFile=true)```
  
  
          *   ```where=(nodeType=''my:specialNodeType'')```
  
  
          *   ```where=(nodeType=''my:specialNodeType INCLUDESUBTYPES'')```
  
  
          *   ```where=(isPrimary=true)```
  
  
          *   ```where=(assocType=''my:specialAssocType'')```
  
  
          *   ```where=(isPrimary=false and assocType=''my:specialAssocType'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/nodeMinimalEntryIncludeParam'
      - description: Return information on children in the folder resolved by this path.
          The path is relative to **nodeId**.
        in: query
        name: relativePath
        required: false
        type: string
      - description: "Also include **source** in addition to **entries** with folder\
          \ information on the parent node \u2013 either the specified parent **nodeId**,\
          \ or as resolved by **relativePath**."
        in: query
        name: includeSource
        required: false
        type: boolean
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, **nodeId**
            is not a folder or **orderBy** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to retrieve children of
            **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List node children
      tags:
      - nodes
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreate a node and add it as a primary child of node **nodeId**.\n\nThis endpoint\
        \ supports both JSON and multipart/form-data (file upload).\n\n**Using multipart/form-data**\n\
        \nUse the **filedata** field to represent the content to upload, for example,\
        \ the following curl command will\ncreate a node with the contents of test.txt\
        \ in the test user's home folder.\n\n```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children\
        \ -F filedata=@test.txt```\n\nYou can use the **name** field to give an alternative\
        \ name for the new file.\n\nYou can use the **nodeType** field to create a specific\
        \ type. The default is cm:content.\n\nYou can use the **renditions** field to\
        \ create renditions (e.g. doclib) asynchronously upon upload.\nAlso, as requesting\
        \ rendition is a background process,\nany rendition failure (e.g. No transformer\
        \ is currently available) will not fail the whole upload and has the potential\
        \ to silently fail.\n\nUse **overwrite** to overwrite an existing file, matched\
        \ by name. If the file is versionable,\nthe existing content is replaced.\n\n\
        When you overwrite existing content, you can set the **majorVersion** boolean\
        \ field to **true** to indicate a major version\nshould be created. The default\
        \ for **majorVersion** is **false**.\nSetting  **majorVersion** enables versioning\
        \ of the node, if it is not already versioned.\n\nWhen you overwrite existing\
        \ content, you can use the **comment** field to add a version comment that appears\
        \ in the\nversion history. This also enables versioning of this node, if it\
        \ is not already versioned.\n\nYou can set the **autoRename** boolean field\
        \ to automatically resolve name clashes. If there is a name clash, then\nthe\
        \ API method tries to create a unique name using an integer suffix.\n\nYou can\
        \ use the **relativePath** field to specify the folder structure to create relative\
        \ to the node **nodeId**.\nFolders in the **relativePath** that do not exist\
        \ are created before the node is created.\n\nAny other field provided will be\
        \ treated as a property to set on the newly created node.\n\n**Note:** setting\
        \ properties of type d:content and d:category are not supported.\n\n**Note:**\
        \ When creating a new node using multipart/form-data by default versioning is\
        \ enabled and set to MAJOR Version.\nSince Alfresco 6.2.3 **versioningEnabled**\
        \ flag was introduced offering better control over the new node Versioning.\n\
        \n| **versioningEnabled** | **majorVersion** | **Version Type** |\n|-----------------------|------------------|------------------|\n\
        |        unset          |        unset     |    MAJOR         |\n|        unset\
        \          |        true      |    MAJOR         |\n|        unset         \
        \ |        false     |    MINOR         |\n|        true           |       \
        \ unset     |    MAJOR         |\n|        true           |        true    \
        \  |    MAJOR         |\n|        true           |        false     |    MINOR\
        \         |\n|        false          |        true      |    Unversioned   |\n\
        |        false          |        false     |    Unversioned   |\n|        false\
        \          |        true      |    Unversioned   |\n<br>\n\n**Using JSON**\n\
        \nYou must specify at least a **name** and **nodeType**. For example, to create\
        \ a folder:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"nodeType\":\"cm:folder\"\
        \n}\n```\n\nYou can create an empty file like this:\n```JSON\n{\n  \"name\"\
        :\"My text file.txt\",\n  \"nodeType\":\"cm:content\"\n}\n```\nYou can update\
        \ binary content using the ```PUT /nodes/{nodeId}``` API method.\n\nYou can\
        \ create a folder, or other node, inside a folder hierarchy:\n```JSON\n{\n \
        \ \"name\":\"My Special Folder\",\n  \"nodeType\":\"cm:folder\",\n  \"relativePath\"\
        :\"X/Y/Z\"\n}\n```\nThe **relativePath** specifies the folder structure to create\
        \ relative to the node **nodeId**. Folders in the\n**relativePath** that do\
        \ not exist are created before the node is created.\n\nYou can set properties\
        \ when you create a new node:\n```JSON\n{\n  \"name\":\"My Other Folder\",\n\
        \  \"nodeType\":\"cm:folder\",\n  \"properties\":\n  {\n    \"cm:title\":\"\
        Folder title\",\n    \"cm:description\":\"This is an important folder\"\n  }\n\
        }\n```\n\nYou can set multi-value properties when you create a new node which\
        \ supports properties of type multiple.\n ```JSON\n{\n  \"name\":\"My Other\
        \ Folder\",\n  \"nodeType\":\"custom:destination\",\n  \"properties\":\n  {\n\
        \    \"cm:title\":\"Folder title\",\n    \"cm:description\":\"This is an important\
        \ folder\",\n    \"custom:locations\": [\n                         \"location\
        \ X\",\n                         \"location Y\"\n                        ]\n\
        \  }\n}\n```\n\nAny missing aspects are applied automatically. For example,\
        \ **cm:titled** in the JSON shown above. You can set aspects\nexplicitly, if\
        \ needed, using an **aspectNames** field.\n\n**Note:** setting properties of\
        \ type d:content and d:category are not supported.\n\nYou can also optionally\
        \ disable (or enable) inherited permissions via *isInheritanceEnabled* flag:\n\
        ```JSON\n{\n  \"permissions\":\n    {\n      \"isInheritanceEnabled\": false,\n\
        \      \"locallySet\":\n        [\n          {\"authorityId\": \"GROUP_special\"\
        , \"name\": \"Read\", \"accessStatus\":\"DENIED\"},\n          {\"authorityId\"\
        : \"testuser\", \"name\": \"Contributor\", \"accessStatus\":\"ALLOWED\"}\n \
        \       ]\n    }\n}\n```\n\nTypically, for files and folders, the primary children\
        \ are created within the parent folder using the default \"cm:contains\" assocType.\n\
        If the content model allows then it is also possible to create primary children\
        \ with a different assoc type. For example:\n```JSON\n{\n  \"name\":\"My Node\"\
        ,\n  \"nodeType\":\"my:specialNodeType\",\n  \"association\":\n  {\n    \"assocType\"\
        :\"my:specialAssocType\"\n  }\n}\n```\n\nAdditional associations can be added\
        \ after creating a node. You can also add associations at the time the node\
        \ is created. This is\nrequired, for example, if the content model specifies\
        \ that a node has mandatory associations to one or more existing nodes. You\
        \ can optionally\nspecify an array of **secondaryChildren** to create one or\
        \ more secondary child associations, such that the newly created node acts as\
        \ a parent node.\nYou can optionally specify an array of **targets** to create\
        \ one or more peer associations such that the newly created node acts as a source\
        \ node.\nFor example, to associate one or more secondary children at time of\
        \ creation:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"nodeType\":\"cm:folder\"\
        ,\n  \"secondaryChildren\":\n    [ {\"childId\":\"abcde-01234-...\", \"assocType\"\
        :\"my:specialChildAssocType\"} ]\n}\n```\nFor example, to associate one or more\
        \ targets at time of creation:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"\
        nodeType\":\"cm:folder\",\n  \"targets\":\n    [ {\"targetId\":\"abcde-01234-...\"\
        , \"assocType\":\"my:specialPeerAssocType\"} ]\n}\n```\n\n**Note:** You can\
        \ create more than one child by\nspecifying a list of nodes in the JSON body.\
        \ For example, the following JSON\nbody creates two folders inside the specified\
        \ **nodeId**, if the **nodeId** identifies\na folder:\n\n```JSON\n[\n  {\n \
        \   \"name\":\"My Folder 1\",\n    \"nodeType\":\"cm:folder\"\n  },\n  {\n \
        \   \"name\":\"My Folder 2\",\n    \"nodeType\":\"cm:folder\"\n  }\n]\n```\n\
        If you specify a list as input, then a paginated list rather than an entry is\
        \ returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n\
        \    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n\
        \      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n\
        \    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n\
        \        }\n      },\n      {\n        \"entry\": {\n          ...\n       \
        \ }\n      }\n    ]\n  }\n}\n```\n**Note:** When creating a new node using JSON\
        \ by default versioning is disabled.\nSince Alfresco 6.2.3 **versioningEnabled**\
        \ flag was introduced offering better control over the new node Versioning.\n\
        \n| **versioningEnabled** | **majorVersion** | **Version Type** |\n|-----------------------|------------------|------------------|\n\
        |        unset          |        unset     |    Unversioned   |\n|        unset\
        \          |        true      |    MAJOR         |\n|        unset         \
        \ |        false     |    MINOR         |\n|        true           |       \
        \ unset     |    MAJOR         |\n|        true           |        true    \
        \  |    MAJOR         |\n|        true           |        false     |    MINOR\
        \         |\n|        false          |        true      |    Unversioned   |\n\
        |        false          |        false     |    Unversioned   |\n|        false\
        \          |        true      |    Unversioned   |\n<br>\n"
      operationId: createNode
      parameters:
      - $ref: '#/parameters/nodeIdWithAliasParam'
      - description: If true, then  a name clash will cause an attempt to auto rename
          by finding a unique name using an integer suffix.
        in: query
        name: autoRename
        required: false
        type: boolean
      - description: If true, then created node will be version *1.0 MAJOR*. If false,
          then created node will be version *0.1 MINOR*.
        in: query
        name: majorVersion
        required: false
        type: boolean
      - description: If true, then created node will be versioned. If false, then created
          node will be unversioned and auto-versioning disabled.
        in: query
        name: versioningEnabled
        required: false
        type: boolean
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCreate'
          multipart/form-data:
            schema:
              properties:
                filedata:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format or **nodeBodyCreate**
            is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to create children of **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        '409':
          description: New name clashes with an existing node in the current parent
            folder
        '413':
          description: Content exceeds individual file size limit configured for the
            network or system
        '415':
          description: Content Type is not supported
        '422':
          description: Model integrity exception including a file name containing invalid
            characters
        '507':
          description: Content exceeds overall storage quota limit configured for the
            network or system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/comments:
    get:
      description: Gets a list of comments for the node **nodeId**, sorted chronologically
        with the newest comment first.
      operationId: listComments
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** exists but does not identify a
            file or a folder,
  
            or the value of **maxItems** is invalid, or the value of **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission read comments on the node
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List comments
      tags:
      - comments
    post:
      description: "Creates a comment on node **nodeId**. You specify the comment in\
        \ a JSON body like this:\n\n```JSON\n{\n  \"content\": \"This is a comment\"\
        \n}\n```\n\n**Note:** You can create more than one comment by\nspecifying a\
        \ list of comments in the JSON body like this:\n\n```JSON\n[\n  {\n    \"content\"\
        : \"This is a comment\"\n  },\n  {\n    \"content\": \"This is another comment\"\
        \n  }\n]\n```\nIf you specify a list as input, then a paginated list rather\
        \ than an entry is returned in the response body. For example:\n\n```JSON\n\
        {\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\"\
        : false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\"\
        : 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n         \
        \ ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n \
        \       }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createComment
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The comment text. Note that you can also provide a list of comments.
        in: body
        name: commentBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/CommentBody'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **commentBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to create a comment
        '404':
          description: '**nodeId** does not exist
  
            '
        '405':
          description: Cannot comment on a node of this type
        '409':
          description: '**nodeId** is locked and you are not the lock owner
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a comment
      tags:
      - comments
  /nodes/{nodeId}/comments/{commentId}:
    delete:
      description: Deletes the comment **commentId** from node **nodeId**.
      operationId: deleteComment
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/commentIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to delete a comment
        '404':
          description: '**nodeId** or **commentId** does not exist
  
            '
        '409':
          description: '**nodeId** is locked and you are not the lock owner
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a comment
      tags:
      - comments
    put:
      description: Updates an existing comment **commentId** on node **nodeId**.
      operationId: updateComment
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/commentIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The JSON representing the comment to be updated.
        in: body
        name: commentBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/CommentBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **commentBodyUpdate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to update a comment
        '404':
          description: '**nodeId** or **commentId** does not exist
  
            '
        '409':
          description: '**nodeId** is locked and you are not the lock owner
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a comment
      tags:
      - comments
  /nodes/{nodeId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the content of the node with identifier **nodeId**.
  
        '
      operationId: getNodeContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to retrieve content of
            **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '416':
          description: 'Range Not Satisfiable
  
            '
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get node content
      tags:
      - nodes
      x-alfresco-since: '5.2'
    put:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Updates the content of the node with identifier **nodeId**.
  
  
        The request body for this endpoint can be any text or binary stream.
  
  
        The **majorVersion** and **comment** parameters can be used to control versioning
        behaviour. If the content is versionable,
  
        a new minor version is created by default.
  
  
        Optionally a new **name** parameter can also be specified that must be unique
        within the parent folder. If specified and valid then this
  
        will rename the node. If invalid then an error is returned and the content is
        not updated.
  
  
        **Note:** This API method accepts any content type, but for testing with this
        tool text based content can be provided.
  
        This is because the OpenAPI Specification does not allow a wildcard to be provided
        or the ability for
  
        tooling to accept an arbitrary file.
  
        '
      operationId: updateNodeContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - default: false
        description: 'If **true**, create a major version.
  
          Setting this parameter also enables versioning of this node, if it is not
          already versioned.
  
          '
        in: query
        name: majorVersion
        required: false
        type: boolean
      - description: 'Add a version comment which will appear in version history.
  
          Setting this parameter also enables versioning of this node, if it is not
          already versioned.
  
          '
        in: query
        name: comment
        required: false
        type: string
      - description: "Optional new name. This should include the file\_extension.\n\
          The name must not contain spaces or the following special characters: * \"\
          \ < > \\ / ? : and |.\nThe character `.` must not be used at the end of the\
          \ name.\n"
        in: query
        name: name
        pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
        required: false
        type: string
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: Optional new name clashes with an existing node in the current
            parent folder
        '413':
          description: Content exceeds individual file size limit (configured for network/system)
        '422':
          description: Model integrity exception including a file name containing invalid
            characters
        '507':
          description: Content exceeds overall storage quota limit configured for the
            network/system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update node content
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/copy:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Copies the node **nodeId** to the parent folder node **targetParentId**. You
        specify the **targetParentId** in the request body.
  
  
        The new node has the same name as the source node unless you specify a new **name**
        in the request body.
  
  
        If the source **nodeId** is a folder, then all of its children are also copied.
  
  
        If the source **nodeId** is a file, it''s properties, aspects and tags are copied,
        it''s ratings, comments and locks are not.
  
        '
      operationId: copyNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCopy'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format or **nodeBodyCopy**
            is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to copy **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: New name clashes with an existing node in the destination parent
            folder
        '422':
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Copy a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/lock:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Places a lock on node **nodeId**.
  
  
        **Note:** you can only lock files. More specifically, a node can only be locked
        if it is
  
        of type `cm:content` or a subtype of `cm:content`.
  
  
        The lock is owned by the current user, and prevents other users or processes
        from making updates to the node until the lock is released.
  
  
        If the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise,
        the **timeToExpire** is the number of seconds before the lock expires.
  
  
        When a lock expires, the lock is released.
  
  
        If the node is already locked, and the user is the lock owner, then the lock
        is renewed with the new **timeToExpire**.
  
  
        By default, a lock is applied that allows the owner to update or delete the
        node.
  
        You can use **type** to change the lock type to one of the following:
  
        * **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by
        the lock owner. This enum is the same value as the deprecated WRITE_LOCK described
        in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.
        This is the default value.
  
        * **FULL** no changes by any user are allowed. This enum is the same value as
        the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType`
        in the Alfresco Public Java API.
  
  
        By default, a lock is persisted in the database. You can create a volatile in-memory
        lock by setting the **lifetime** property to EPHEMERAL.
  
        You might choose use EPHEMERAL locks, for example, if you are taking frequent
        short-term locks that you don''t need
  
        to be kept over a restart of the repository. In this case you don''t need the
  
        overhead of writing the locks to the database.
  
  
        If a lock on the node cannot be taken, then an error is returned.
  
        '
      operationId: lockNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyLock'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or **nodeBodyLock**
            is invalid,
  
            or a lock was attempted on a node that is not a file
  
            '
        '401':
          description: Authentication failed
        '403':
          description: 'Current user does not have permission to lock **nodeId**
  
            '
        '404':
          description: '**nodeId** does not exist
  
            '
        '422':
          description: '**nodeId** could not be locked
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Lock a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/move:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Move the node **nodeId** to the parent folder node **targetParentId**.
  
  
        The **targetParentId** is specified in the in request body.
  
  
        The moved node retains its name unless you specify a new **name** in the request
        body.
  
  
        If the source **nodeId** is a folder, then its children are also moved.
  
  
        The move will effectively change the primary parent.
  
        '
      operationId: moveNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyMove'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or **targetParentId**
            is not a folder,
  
            or **nodeBodyMove** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to move **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: New name clashes with an existing node in the destination parent
            folder
        '422':
          description: Model integrity exception including a file name containing invalid
            characters
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Move a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/parents:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of parent nodes that are associated with the current child **nodeId**.
  
  
        The list includes both the primary parent and any secondary parents.
  
        '
      operationId: listParents
      parameters:
      - $ref: '#/parameters/nodeChildIdWithAliasParam'
      - description: 'Optionally filter the list by **assocType** and/or **isPrimary**.
          Here are some example filters:
  
  
          *   ```where=(assocType=''my:specialAssocType'')```
  
  
          *   ```where=(isPrimary=true)```
  
  
          *   ```where=(isPrimary=false and assocType=''my:specialAssocType'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/includeSourceParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown or the **nodeId**
            is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Child **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List parents
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/ratings:
    get:
      description: Gets a list of ratings for node **nodeId**.
      operationId: listRatings
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List ratings
      tags:
      - ratings
    post:
      description: Create a rating for the node with identifier **nodeId**
      operationId: createRating
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: "For \"myRating\" the type is specific to the rating scheme, boolean\
          \ for the likes and an integer for the fiveStar.\n\nFor example, to \"like\"\
          \ a file the following body would be used:\n\n```JSON\n  {\n    \"id\": \"\
          likes\",\n    \"myRating\": true\n  }\n```\n"
        in: body
        name: ratingBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/RatingBody'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **ratingBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**nodeId** does not exist
  
            '
        '405':
          description: Cannot rate a node of this type
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a rating
      tags:
      - ratings
  /nodes/{nodeId}/ratings/{ratingId}:
    delete:
      description: Deletes rating **ratingId** from node **nodeId**.
      operationId: deleteRating
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/ratingIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: unknown rating scheme specified
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a rating
      tags:
      - ratings
    get:
      description: Get the specific rating **ratingId** on node **nodeId**.
      operationId: getRating
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/ratingIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: unknown rating scheme specified
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a rating
      tags:
      - ratings
  /nodes/{nodeId}/renditions:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nGets a list of the rendition information for each rendition of the the file\
        \ **nodeId**, including the rendition id.\n\nEach\_rendition returned has a\
        \ **status**: CREATED means it is available\_to view or download, NOT_CREATED\
        \ means the rendition can be requested.\n\nYou can use the **where** parameter\
        \ to filter the returned renditions by **status**. For example, the following\
        \ **where**\nclause will return just the CREATED renditions:\n\n```\n(status='CREATED')\n\
        ```\n"
      operationId: listRenditions
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/whereParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionPaging'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, is not
            a file, or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: List renditions
      tags:
      - renditions
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nAn asynchronous request to create a rendition for file **nodeId**.\n\nThe\
        \ rendition is specified by name **id** in the request body:\n```JSON\n{\n \
        \ \"id\":\"doclib\"\n}\n```\n Multiple names may be specified as a comma separated\
        \ list or using a list format:\n```JSON\n[\n  {\n     \"id\": \"doclib\"\n \
        \ },\n  {\n     \"id\": \"avatar\"\n  }\n]\n```\n"
      operationId: createRendition
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        required: true
      responses:
        '202':
          description: Request accepted
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format or is not
            a file
  
            or **renditionBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        '409':
          description: All requested renditions already exist
        '501':
          description: Renditions/thumbnails are disabled for the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Create rendition
      tags:
      - renditions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/renditions/{renditionId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the rendition information for **renditionId** of file **nodeId**.
  
        '
      operationId: getRendition
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/renditionIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionEntry'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Get rendition information
      tags:
      - renditions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the rendition content for **renditionId** of file **nodeId**.
  
        '
      operationId: getRenditionContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/renditionIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      - default: false
        description: 'If **true** and there is no rendition for this **nodeId** and
          **renditionId**,
  
          then the placeholder image for the mime type of this rendition is returned,
          rather
  
          than a 404 response.
  
          '
        in: query
        name: placeholder
        required: false
        type: boolean
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **renditionId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content
      tags:
      - renditions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/secondary-children:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of secondary child nodes that are associated with the current parent
        **nodeId**, via a secondary child association.
  
        '
      operationId: listSecondaryChildren
      parameters:
      - $ref: '#/parameters/nodeParentIdWithAliasParam'
      - description: 'Optionally filter the list by assocType. Here''s an example:
  
  
          *   ```where=(assocType=''my:specialAssocType'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/includeSourceParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown or the **nodeId**
            is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Parent **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List secondary children
      tags:
      - nodes
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreate a secondary child association, with the given association type, between\
        \ the parent **nodeId** and a child node.\n\n**Note:** You can create more than\
        \ one secondary child association by\nspecifying a list of associations in the\
        \ JSON body like this:\n\n```JSON\n[\n  {\n    \"childId\": \"string\",\n  \
        \  \"assocType\": \"string\"\n  },\n  {\n    \"childId\": \"string\",\n    \"\
        assocType\": \"string\"\n  }\n]\n```\nIf you specify a list as input, then a\
        \ paginated list rather than an entry is returned in the response body. For\
        \ example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\"\
        : 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\"\
        : 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n       \
        \ \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\"\
        : {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createSecondaryChildAssociation
      parameters:
      - $ref: '#/parameters/nodeParentIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The child node id and assoc type.
        in: body
        name: secondaryChildAssociationBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/ChildAssociationBody'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildAssociationEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown, or the **nodeId**
            is not a valid format,
  
            or **secondaryChildAssociationBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to create secondary children
            of **nodeId**
        '404':
          description: Parent **nodeId** or **childId** does not exist
        '409':
          description: An association of this assoc type already exists between these
            two nodes
        '422':
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create secondary child
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/secondary-children/{childId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Delete secondary child associations between the parent **nodeId** and child
        nodes for the given association type.
  
  
        If the association type is **not** specified, then all secondary child associations,
        of any type in the direction
  
        from parent to secondary child, will be deleted. The child will still have a
        primary parent and may still be
  
        associated as a secondary child with other secondary parents.
  
        '
      operationId: deleteSecondaryChildAssociation
      parameters:
      - $ref: '#/parameters/nodeParentIdParam'
      - description: The identifier of a child node.
        in: path
        name: childId
        required: true
        type: string
      - description: Only delete associations of this type.
        in: query
        name: assocType
        required: false
        type: string
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown or you are trying
            to delete a primary **assocType**.
  
            Use delete node instead
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Parent **nodeId** or **childId** does not exist (with given assocType,
            if specified)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete secondary child or children
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/sources:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of source nodes that are associated with the current target **nodeId**.
  
        '
      operationId: listSourceAssociations
      parameters:
      - $ref: '#/parameters/nodeTargetIdParam'
      - description: 'Optionally filter the list by **assocType**. Here''s an example:
  
  
          *   ```where=(assocType=''my:specialAssocType'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format or **assocType**
            is unknown
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Target **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List source associations
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/tags:
    get:
      description: Gets a list of tags for node **nodeId**.
      operationId: listTagsForNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to read tags on the node
        '404':
          description: '**nodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List tags for a node
      tags:
      - tags
    post:
      description: "Creates a tag on the node **nodeId**. You specify the tag in a JSON\
        \ body like this:\n\n```JSON\n{\n  \"tag\":\"test-tag-1\"\n}\n```\n\n**Note:**\
        \ You can create more than one tag by\nspecifying a list of tags in the JSON\
        \ body like this:\n\n```JSON\n[\n  {\n    \"tag\":\"test-tag-1\"\n  },\n  {\n\
        \    \"tag\":\"test-tag-2\"\n  }\n]\n```\nIf you specify a list as input, then\
        \ a paginated list rather than an entry is returned in the response body. For\
        \ example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\"\
        : 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\"\
        : 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n       \
        \ \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\"\
        : {\n         ...\n        }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createTagForNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The new tag
        in: body
        name: tagBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/TagBody'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **tagBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to create tags on the node
        '404':
          description: '**nodeId** does not exist
  
            '
        '405':
          description: Cannot tag a node of this type
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a tag for a node
      tags:
      - tags
  /nodes/{nodeId}/tags/{tagId}:
    delete:
      description: Deletes tag **tagId** from node **nodeId**.
      operationId: deleteTagFromNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/tagIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to delete the tag
        '404':
          description: '**nodeId** or **tagId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a tag from a node
      tags:
      - tags
  /nodes/{nodeId}/targets:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of target nodes that are associated with the current source **nodeId**.
  
        '
      operationId: listTargetAssociations
      parameters:
      - $ref: '#/parameters/nodeSourceIdParam'
      - description: 'Optionally filter the list by **assocType**. Here''s an example:
  
  
          *   ```where=(assocType=''my:specialAssocType'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown or the **nodeId**
            is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Source **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List target associations
      tags:
      - nodes
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreate an association, with the given association type, between the source\
        \ **nodeId** and a target node.\n\n**Note:** You can create more than one association\
        \ by\nspecifying a list of associations in the JSON body like this:\n\n```JSON\n\
        [\n  {\n     \"targetId\": \"string\",\n     \"assocType\": \"string\"\n  },\n\
        \  {\n    \"targetId\": \"string\",\n    \"assocType\": \"string\"\n  }\n]\n\
        ```\nIf you specify a list as input, then a paginated list rather than an entry\
        \ is returned in the response body. For example:\n\n```JSON\n{\n  \"list\":\
        \ {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n\
        \      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n\
        \    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n\
        \        }\n      },\n      {\n        \"entry\": {\n          ...\n       \
        \ }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createAssociation
      parameters:
      - $ref: '#/parameters/nodeSourceIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The target node id and assoc type.
        in: body
        name: associationBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/AssociationBody'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown, or the **nodeId**
            is not a valid format,
  
            or **associationBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Source **nodeId** or **targetId** does not exist
        '409':
          description: An association of this assoc type already exists between these
            two nodes
        '422':
          description: Model integrity exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create node association
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/targets/{targetId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Delete an association, or associations, from the source **nodeId* to a target
        node for the given association type.
  
  
        If the association type is **not** specified, then all peer associations, of
        any type, in the direction
  
        from source to target, are deleted.
  
  
        **Note:** After removal of the peer association, or associations, from source
        to target, the two nodes may still have peer associations
  
        in the other direction.
  
        '
      operationId: deleteAssociation
      parameters:
      - $ref: '#/parameters/nodeSourceIdParam'
      - description: The identifier of a target node.
        in: path
        name: targetId
        required: true
        type: string
      - description: Only delete associations of this type.
        in: query
        name: assocType
        required: false
        type: string
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **assocType** is unknown, or the **nodeId**
            is not a valid format, or **targetId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Source **nodeId** or **targetId** does not exist (with given
            assocType, if specified)
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete node association(s)
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/unlock:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Deletes a lock on node **nodeId**.
  
  
        The current user must be the owner of the locks or have admin rights, otherwise
        an error is returned.
  
  
        If a lock on the node cannot be released, then an error is returned.
  
        '
      operationId: unlockNode
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/nodeEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: 'Current user does not have permission to unlock **nodeId**
  
            '
        '404':
          description: '**nodeId** does not exist
  
            '
        '422':
          description: '**nodeId** could not be unlocked
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Unlock a node
      tags:
      - nodes
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/versions:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the version history as an ordered list of versions for the specified **nodeId**.
  
  
        The list is ordered in descending modified order. So the most recent version
        is first and
  
        the original version is last in the list.
  
        '
      operationId: listVersionHistory
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: Target **nodeId** does not exist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List version history
      tags:
      - versions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/versions/{versionId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Delete the version identified by **versionId** and **nodeId*.
  
  
        If the version is successfully deleted then the content and metadata for that
        versioned node
  
        will be deleted and will no longer appear in the version history. This operation
        cannot be undone.
  
  
        If the most recent version is deleted the live node will revert to the next
        most recent version.
  
  
        We currently do not allow the last version to be deleted. If you wish to clear
        the history then you
  
        can remove the "cm:versionable" aspect (via update node) which will also disable
        versioning. In this
  
        case, you can re-enable versioning by adding back the "cm:versionable" aspect
        or using the version
  
        params (majorVersion and comment) on a subsequent file content update.
  
        '
      operationId: deleteVersion
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or exists
            but does not identify a file, or **versionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete the versioned
            node
        '404':
          description: '**nodeId** or **versionId** does not exist
  
            '
        '422':
          description: Cannot delete the last remaining version
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a version
      tags:
      - versions
      x-alfresco-since: '5.2'
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the version information for **versionId** of file node **nodeId**.
  
        '
      operationId: getVersion
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/VersionEntry'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or it exists
            but does not identify a file, or **versionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Get version information
      tags:
      - versions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/versions/{versionId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the version content for **versionId** of file node **nodeId**.
  
        '
      operationId: getVersionContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **versionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get version content
      tags:
      - versions
      x-alfresco-since: '5.2'
  /nodes/{nodeId}/versions/{versionId}/renditions:
    get:
      description: "**Note:** this endpoint is available in Alfresco 7.0.0 and newer\
        \ versions.\n\nGets a list of the rendition information for each rendition of\
        \ the version of file **nodeId** and **versionId**, including the rendition\
        \ id.\n\nEach\_rendition returned has a **status**: CREATED means it is available\_\
        to view or download, NOT_CREATED means the rendition can be requested.\n\nYou\
        \ can use the **where** parameter to filter the returned renditions by **status**.\
        \ For example, the following **where**\nclause will return just the CREATED\
        \ renditions:\n\n```\n(status='CREATED')\n```\n"
      operationId: listVersionRenditions
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      - $ref: '#/parameters/whereParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionPaging'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **versionId** is invalid, or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: List renditions for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
    post:
      description: "**Note:** this endpoint is available in Alfresco 7.0.0 and newer\
        \ versions.\n\nAn asynchronous request to create a rendition for version of\
        \ file **nodeId** and **versionId**.\n\nThe version rendition is specified by\
        \ name **id** in the request body:\n```JSON\n{\n  \"id\":\"doclib\"\n}\n```\n\
        \  Multiple names may be specified as a comma separated list or using a list\
        \ format:\n```JSON\n[\n  {\n      \"id\": \"doclib\"\n  },\n  {\n      \"id\"\
        : \"avatar\"\n  }\n]\n```\n"
      operationId: createVersionRendition
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        required: true
      responses:
        '202':
          description: Request accepted
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **versionId** is invalid,
  
            or **renditionBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** or **renditionId** does not exist
  
            '
        '409':
          description: All requested renditions already exist
        '501':
          description: Renditions/thumbnails are disabled for the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Create rendition for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Gets the rendition information for **renditionId** of version of file **nodeId**
        and **versionId**.
  
        '
      operationId: getVersionRendition
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      - $ref: '#/parameters/renditionIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionEntry'
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **versionId** is invalid, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** or **renditionId** does not exist
  
            '
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Get rendition information for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Gets the rendition content for **renditionId** of version of file **nodeId**
        and **versionId**.
  
        '
      operationId: getVersionRenditionContent
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      - $ref: '#/parameters/renditionIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      - default: false
        description: 'If **true** and there is no rendition for this **nodeId** and
          **renditionId**,
  
          then the placeholder image for the mime type of this rendition is returned,
          rather
  
          than a 404 response.
  
          '
        in: query
        name: placeholder
        required: false
        type: boolean
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or is not
            a file, or **versionId** is invalid, or **renditionId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission for **nodeId**
        '404':
          description: '**nodeId** or **versionId** or **renditionId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get rendition content for a file version
      tags:
      - versions
      x-alfresco-since: 7.0.0
  /nodes/{nodeId}/versions/{versionId}/revert:
    post:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Attempts to revert the version identified by **versionId** and **nodeId** to
        the live node.
  
  
        If the node is successfully reverted then the content and metadata for that
        versioned node
  
        will be promoted to the live node and a new version will appear in the version
        history.
  
        '
      operationId: revertVersion
      parameters:
      - $ref: '#/parameters/nodeIdParam'
      - $ref: '#/parameters/versionIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: Optionally, specify a version comment and whether this should be
          a major version, or not.
        in: body
        name: revertBody
        required: true
        schema:
          $ref: '#/components/schemas/RevertBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or it exists
  
            but does not identify a file, or **versionId** is invalid,
  
            or **revertBody** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to revert the versioned
            node
        '404':
          description: '**nodeId** or **versionId** does not exist
  
            '
        '422':
          description: Model integrity exception trying to revert the node
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Revert a version
      tags:
      - versions
      x-alfresco-since: '5.2'
  /people:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        List people.
  
  
        You can use the **include** parameter to return any additional information.
  
  
        The default sort order for the returned list is for people to be sorted by ascending
        id.
  
        You can override the default by using the **orderBy** parameter.
  
  
        You can use any of the following fields to order the results:
  
        * id
  
        * firstName
  
        * lastName
  
        '
      operationId: listPeople
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/personMinimalEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount** or **orderBy**
            is invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List people
      tags:
      - people
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreate a person.\n\nIf applicable, the given person's login access can also\
        \ be optionally disabled.\n\nYou must have admin rights to create a person.\n\
        \nYou can set custom properties when you create a person:\n```JSON\n{\n  \"\
        id\": \"abeecher\",\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Beecher\"\
        ,\n  \"displayName\": \"Alice Beecher\",\n  \"email\": \"abeecher@example.com\"\
        ,\n  \"password\": \"secret\",\n  \"properties\":\n  {\n    \"my:property\"\
        : \"The value\"\n  }\n}\n```\n**Note:** setting properties of type d:content\
        \ and d:category are not supported.\n"
      operationId: createPerson
      parameters:
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyCreate'
        required: true
      responses:
        '201':
          description: Successful response
          schema:
            $ref: '#/components/schemas/PersonEntry'
        '400':
          description: 'Invalid parameter: **personBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to create a person
        '409':
          description: Person within given *id* already exists
        '422':
          description: Model integrity exception
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Create person
      tags:
      - people
      x-alfresco-since: '5.2'
  /people/{personId}:
    get:
      description: 'Gets information for the person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a person
      tags:
      - people
    put:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nUpdate the given person's details.\n\nYou can use the `-me-` string in place\
        \ of `<personId>` to specify the currently authenticated user.\n\nIf applicable,\
        \ the given person's login access can also be optionally disabled or re-enabled.\n\
        \nYou must have admin rights to update a person \u2014 unless updating your\
        \ own details.\n\nIf you are changing your password, as a non-admin user, then\
        \ the existing password must also\nbe supplied (using the oldPassword field\
        \ in addition to the new password value).\n\nAdmin users cannot be disabled\
        \ by setting enabled to false.\n\nNon-admin users may not disable themselves.\n\
        \nYou can set custom properties when you update a person:\n```JSON\n{\n  \"\
        firstName\": \"Alice\",\n  \"properties\":\n  {\n    \"my:property\": \"The\
        \ value\"\n  }\n}\n```\n**Note:** setting properties of type d:content and d:category\
        \ are not supported.\n"
      operationId: updatePerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyUpdate'
        required: true
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/PersonEntry'
        '400':
          description: 'Invalid parameter: the update request is invalid or **personId**
            is not a valid format or **personBodyUpdate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update a person
        '404':
          description: '**personId** does not exist
  
            '
        '422':
          description: Model integrity exception
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Update person
      tags:
      - people
      x-alfresco-since: '5.2'
  /people/{personId}/activities:
    get:
      description: 'Gets a list of activities for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: listActivitiesForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - description: 'A filter to include the user''s activities only `me`, other user''s
          activities only `others`''
  
          '
        in: query
        name: who
        required: false
        type: string
      - description: Include only activity feed entries relating to this site.
        in: query
        name: siteId
        required: false
        type: string
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, or
            **who** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the activities for **personId**
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List activities
      tags:
      - activities
  /people/{personId}/avatar:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Deletes the avatar image related to person **personId**.
  
  
        You must be the person or have admin rights to update a person''s avatar.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteAvatarImage
      parameters:
      - $ref: '#/parameters/personIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete the avatar image
            for **personId**
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Gets the avatar image related to the person **personId**. If the person has
        no related avatar then
  
        the **placeholder** query parameter can be optionally used to request a placeholder
        image to be returned.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getAvatarImage
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - default: true
        description: 'If **true** and there is no avatar for this **personId**
  
          then the placeholder image is returned, rather than a 404 response.
  
          '
        in: query
        name: placeholder
        required: false
        type: boolean
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **personId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist or avatar does not exist (and no
            placeholder requested)
  
            '
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
    put:
      description: '**Note:** this endpoint is available in Alfresco 5.2.2 and newer
        versions.
  
  
        Updates the avatar image related to the person **personId**.
  
  
        The request body should be the binary stream for the avatar image. The content
        type of the file
  
        should be an image file. This will be used to generate an "avatar" thumbnail
        rendition.
  
  
        You must be the person or have admin rights to update a person''s avatar.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: updateAvatarImage
      parameters:
      - $ref: '#/parameters/personIdParam'
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
      responses:
        '200':
          description: Successful response
        '400':
          description: 'Invalid parameter: **personId** is not a valid format or the
            avatar cannot be uploaded
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update the avatar image
            for **personId**
        '404':
          description: '**personId** does not exist
  
            '
        '413':
          description: Content exceeds individual file size limit (configured for network/system)
        '501':
          description: Renditions/thumbnails are disabled for the system
        '507':
          description: Content exceeds overall storage quota limit configured for the
            network/system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update avatar image
      tags:
      - people
      x-alfresco-since: 5.2.2
  /people/{personId}/favorite-sites:
    get:
      deprecated: true
      description: '**Note:** this endpoint is deprecated as of Alfresco 4.2, and will
        be removed in the future.
  
        Use `/people/{personId}/favorites` instead.
  
  
        Gets a list of a person''s favorite sites.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: listFavoriteSitesForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the favorite sites for **personId**
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List favorite sites
      tags:
      - favorites
    post:
      deprecated: true
      description: "**Note:** this endpoint is deprecated as of Alfresco 4.2, and will\
        \ be removed in the future.\nUse `/people/{personId}/favorites` instead.\n\n\
        Create a site favorite for person **personId**.\n\nYou can use the `-me-` string\
        \ in place of `<personId>` to specify the currently authenticated user.\n\n\
        \ **Note:** You can favorite more than one site by\nspecifying a list of sites\
        \ in the JSON body like this:\n\n```JSON\n[\n  {\n    \"id\": \"test-site-1\"\
        \n  },\n  {\n    \"id\": \"test-site-2\"\n  }\n]\n```\nIf you specify a list\
        \ as input, then a paginated list rather than an entry is returned in the response\
        \ body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n \
        \     \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n\
        \      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\":\
        \ [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n   \
        \   {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n\
        }\n```\n"
      operationId: createSiteFavorite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The id of the site to favorite.
        in: body
        name: favoriteSiteBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/FavoriteSiteBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSiteEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **favoriteSiteBodyCreate** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the favorite sites for **personId**
        '404':
          description: '**personId** does not exist
  
            '
        '409':
          description: '**id** is already a site favorite
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site favorite
      tags:
      - favorites
  /people/{personId}/favorite-sites/{siteId}:
    delete:
      deprecated: true
      description: '**Note:** this endpoint is deprecated as of Alfresco 4.2, and will
        be removed in the future.
  
        Use `/people/{personId}/favorites/{favoriteId}` instead.
  
  
        Deletes site **siteId** from the favorite site list of person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteSiteFavorite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the favorite sites for **personId**
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site favorite
      tags:
      - favorites
    get:
      deprecated: true
      description: '**Note:** this endpoint is deprecated as of Alfresco 4.2, and will
        be removed in the future.
  
        Use `/people/{personId}/favorites/{favoriteId}` instead.
  
  
        Gets information on favorite site **siteId** of person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getFavoriteSite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the favorite sites for **personId**
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a favorite site
      tags:
      - favorites
  /people/{personId}/favorites:
    get:
      description: 'Gets a list of favorites for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
  
        The default sort order for the returned list of favorites is type ascending,
        createdAt descending.
  
        You can override the default by using the **orderBy** parameter.
  
  
        You can use any of the following fields to order the results:
  
        *   `type`
  
        *   `createdAt`
  
        *   `title`
  
  
        You can use the **where** parameter to restrict the list in the response
  
        to entries of a specific kind. The **where** parameter takes a value.
  
        The value is a single predicate that can include one or more **EXISTS**
  
        conditions. The **EXISTS** condition uses a single operand to limit the
  
        list to include entries that include that one property. The property values
        are:
  
  
        *   `target/file`
  
        *   `target/folder`
  
        *   `target/site`
  
  
        For example, the following **where** parameter restricts the returned list to
        the file favorites for a person:
  
  
        ```SQL
  
        (EXISTS(target/file))
  
        ```
  
        You can specify more than one condition using **OR**. The predicate must be
        enclosed in parentheses.
  
  
  
        For example, the following **where** parameter restricts the returned list to
        the file and folder favorites for a person:
  
  
        ```SQL
  
        (EXISTS(target/file) OR EXISTS(target/folder))
  
        ```
  
        '
      operationId: listFavorites
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/whereParam'
      - $ref: '#/parameters/favoriteEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**,
            or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist or the current user does not have
            permission to access the favorites of **personId**
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List favorites
      tags:
      - favorites
    post:
      description: "Favorite a **site**, **file**, or **folder** in the repository.\n\
        \nYou can use the `-me-` string in place of `<personId>` to specify the currently\
        \ authenticated user.\n\n**Note:** You can favorite more than one entity by\n\
        specifying a list of objects in the JSON body like this:\n\n```JSON\n[\n  {\n\
        \       \"target\": {\n          \"file\": {\n             \"guid\": \"abcde-01234-....\"\
        \n          }\n       }\n   },\n   {\n       \"target\": {\n          \"file\"\
        : {\n             \"guid\": \"abcde-09863-....\"\n          }\n       }\n  \
        \ },\n]\n```\nIf you specify a list as input, then a paginated list rather than\
        \ an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"\
        list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\"\
        : false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\"\
        : 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n         \
        \ ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n \
        \       }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createFavorite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/favoriteEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      - description: "An object identifying the entity to be favorited.\n\nThe object\
          \ consists of a single property which is an object with the name `site`, `file`,\
          \ or `folder`.\nThe content of that object is the `guid` of the target entity.\n\
          \nFor example, to favorite a file the following body would be used:\n\n```JSON\n\
          {\n   \"target\": {\n      \"file\": {\n         \"guid\": \"abcde-01234-....\"\
          \n      }\n   }\n}\n```\n"
        in: body
        name: favoriteBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/FavoriteBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **favoriteBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist, or the target entity does not exist,
  
            or a favorite already exists with the specified id, or an
  
            entity exists with the id of the posted object
  
            but is not of the same type of the posted object
  
            '
        '409':
          description: The target **guid** has already been favorited
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a favorite
      tags:
      - favorites
  /people/{personId}/favorites/{favoriteId}:
    delete:
      description: 'Deletes **favoriteId** as a favorite of person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteFavorite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/favoriteIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **favoriteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a favorite
      tags:
      - favorites
    get:
      description: 'Gets favorite **favoriteId** for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getFavorite
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/favoriteIdParam'
      - $ref: '#/parameters/favoriteEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **favoriteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a favorite
      tags:
      - favorites
  /people/{personId}/groups:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\n Gets a list of group membership information for person **personId**.\n\
        \n You can use the `-me-` string in place of `<personId>` to specify the currently\
        \ authenticated user.\n\n You can use the **include** parameter to return additional\
        \ information.\n\n You can use the **where** parameter to filter the returned\
        \ groups by **isRoot**. For example, the following **where**\n clause will return\
        \ just the root groups:\n\n ```\n (isRoot=true)\n ```\n\n The **where** parameter\
        \ can also be used to filter by ***zone***. This may be combined with isRoot\
        \ to narrow\n a result set even further. For example, the following where clause\
        \ will only return groups belonging to the\n `MY.ZONE` zone.\n\n ```\n where=(zones\
        \ in ('MY.ZONE'))\n ```\n\n This may be combined with the isRoot filter, as\
        \ shown below:\n\n ```\n where=(isRoot=false AND zones in ('MY.ZONE'))\n ```\n\
        \n ***Note:*** restrictions include\n * `AND` is the only supported operator\
        \ when combining `isRoot` and `zones` filters\n * Only one zone is supported\
        \ by the filter\n * The quoted zone name must be placed in parenthesis \u2014\
        \ a 400 error will result if these are omitted.\n\n\n The default sort order\
        \ for the returned list is for groups to be sorted by ascending displayName.\n\
        \ You can override the default by using the **orderBy** parameter. You can specify\
        \ one or more of the following fields in the **orderBy** parameter:\n * id\n\
        \ * displayName\n"
      operationId: listGroupMembershipsForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/groupEntryIncludeParam'
      - $ref: '#/parameters/whereParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**
            or **personId** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List group memberships
      tags:
      - groups
      x-alfresco-since: 5.2.1
  /people/{personId}/networks:
    get:
      description: 'Gets a list of network memberships for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: listNetworksForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List network membership
      tags:
      - networks
  /people/{personId}/networks/{networkId}:
    get:
      description: 'Gets network information on a single network specified by **networkId**
        for **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getNetworkForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/networkIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **networkId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get network information
      tags:
      - networks
  /people/{personId}/preferences:
    get:
      description: 'Gets a list of preferences for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        Note that each preference consists of an **id** and a **value**.
  
  
        The **value** can be of any JSON type.
  
        '
      operationId: listPreferences
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the preferences for **personId**
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List preferences
      tags:
      - preferences
  /people/{personId}/preferences/{preferenceName}:
    get:
      description: 'Gets a specific preference for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getPreference
      parameters:
      - $ref: '#/parameters/personIdParam'
      - description: The name of the preference.
        in: path
        name: preferenceName
        required: true
        type: string
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have access to the preferences for **personId**
        '404':
          description: '**personId** or **preferenceName** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a preference
      tags:
      - preferences
  /people/{personId}/request-password-reset:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nInitiates the reset password workflow to send an email with reset\
        \ password instruction to the user's registered email.\n\nThe client is mandatory\
        \ in the request body. For example:\n```JSON\n{\n  \"client\": \"myClient\"\n\
        }\n```\n**Note:** The client must be registered before this API can send an\
        \ email. See [server documentation]. However, out-of-the-box\nshare is registered\
        \ as a default client, so you could pass **share** as the client name:\n```JSON\n\
        {\n  \"client\": \"share\"\n}\n```\n**Note:** No authentication is required\
        \ to call this endpoint.\n"
      operationId: requestPasswordReset
      parameters:
      - $ref: '#/parameters/personIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientBody'
        required: true
      responses:
        '202':
          description: 'Successful response or even when the **personId** does not exist
            or the user is disabled by an Administrator
  
            '
        '404':
          description: '**client** is not registered
  
            '
      summary: Request password reset
      tags:
      - people
      x-alfresco-since: 5.2.1
  /people/{personId}/reset-password:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nResets user's password\n\nThe password, id and key properties\
        \ are mandatory in the request body. For example:\n```JSON\n{\n  \"password\"\
        :\"newPassword\",\n  \"id\":\"activiti$10\",\n  \"key\":\"4dad6d00-0daf-413a-b200-f64af4e12345\"\
        \n}\n```\n**Note:** No authentication is required to call this endpoint.\n"
      operationId: resetPassword
      parameters:
      - $ref: '#/parameters/personIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        required: true
      responses:
        '202':
          description: 'Successful response or even when no workflow instance is found
            with the given **id** or the workflow instance is
  
            invalid (already been used or expired) or the given **personId** does not
            match the person''s id requesting
  
            the password reset or the given workflow **key** does not match the recovered
            key.
  
            '
        '400':
          description: 'Invalid parameter: Value of **password**, **id** or **key**
            is invalid
  
            '
      summary: Reset password
      tags:
      - people
      x-alfresco-since: 5.2.1
  /people/{personId}/site-membership-requests:
    get:
      description: 'Gets a list of the current site membership requests for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: listSiteMembershipRequestsForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site membership requests
      tags:
      - sites
    post:
      description: "Create a site membership request for yourself on the site with the\
        \ identifier of **id**, specified in the JSON body.\nThe result of the request\
        \ differs depending on the type of site.\n\n* For a **public** site, you join\
        \ the site immediately as a SiteConsumer.\n* For a **moderated** site, your\
        \ request is added to the site membership request list. The request waits for\
        \ approval from the Site Manager.\n* You cannot request membership of a **private**\
        \ site. Members are invited by the site administrator.\n\nYou can use the `-me-`\
        \ string in place of `<personId>` to specify the currently authenticated user.\n\
        \n **Note:** You can create site membership requests for more than one site\
        \ by\nspecifying a list of sites in the JSON body like this:\n\n```JSON\n[\n\
        \  {\n    \"message\": \"Please can you add me\",\n    \"id\": \"test-site-1\"\
        ,\n    \"title\": \"Request for test site 1\",\n  },\n  {\n    \"message\":\
        \ \"Please can you add me\",\n    \"id\": \"test-site-2\",\n    \"title\": \"\
        Request for test site 2\",\n  }\n]\n```\nIf you specify a list as input, then\
        \ a paginated list rather than an entry is returned in the response body. For\
        \ example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\"\
        : 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\"\
        : 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n       \
        \ \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\"\
        : {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: Site membership request details
        in: body
        name: siteMembershipRequestBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/SiteMembershipRequestBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **id** is invalid, or the user is already
            invited,
  
            or **siteMembershipRequestBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **id** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership request
      tags:
      - sites
  /people/{personId}/site-membership-requests/{siteId}:
    delete:
      description: 'Deletes the site membership request to site **siteId** for person
        **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership request
      tags:
      - sites
    get:
      description: 'Gets the site membership request for site **siteId** for person
        **personId**, if one exists.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership request
      tags:
      - sites
    put:
      description: 'Updates the message for the site membership request to site **siteId**
        for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: updateSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRequestBodyUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **id** is invalid
  
            or **siteMembershipRequestBodyUpdate** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site membership request
      tags:
      - sites
  /people/{personId}/sites:
    get:
      description: 'Gets a list of site membership information for person **personId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
  
        You can use the **where** parameter to filter the returned sites by **visibility**
        or site **preset**.
  
  
        Example to filter by **visibility**, use any one of:
  
  
        ```
  
        (visibility=''PRIVATE'')
  
        (visibility=''PUBLIC'')
  
        (visibility=''MODERATED'')
  
        ```
  
  
        Example to filter by site **preset**:
  
  
        ```
  
        (preset=''site-dashboard'')
  
        ```
  
  
        The default sort order for the returned list is for sites to be sorted by ascending
        title.
  
        You can override the default by using the **orderBy** parameter. You can specify
        one or more of the following fields in the **orderBy** parameter:
  
        * id
  
        * title
  
        * role
  
        '
      operationId: listSiteMembershipsForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/relationsParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/whereParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRolePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**,
            or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site memberships
      tags:
      - sites
  /people/{personId}/sites/{siteId}:
    delete:
      description: 'Deletes person **personId** as a member of site **siteId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteSiteMembershipForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership
      tags:
      - sites
    get:
      description: 'Gets site membership information for person **personId** on site
        **siteId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getSiteMembershipForPerson
      parameters:
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/siteIdParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRoleEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**personId** or **siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership
      tags:
      - sites
  /probes/{probeId}:
    get:
      description: '**Note:** this endpoint is available in Alfresco 6.0 and newer versions.
  
  
        Returns a status of 200 to indicate success and 503 for failure.
  
  
        The readiness probe is normally only used to check repository startup.
  
  
        The liveness probe should then be used to check the repository is still responding
        to requests.
  
  
        **Note:** No authentication is required to call this endpoint.
  
        '
      operationId: getProbe
      parameters:
      - description: 'The name of the probe:
  
          * -ready-
  
          * -live-
  
          '
        in: path
        name: probeId
        required: true
        type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeEntry'
          description: Successful response
        '404':
          description: '**probeId** does not exist
  
            '
        '503':
          description: Service Unavailable - Probe failure status.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Check readiness and liveness of the repository
      tags:
      - probes
      x-alfresco-since: '6.0'
  /queries/nodes:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of nodes that match the given search criteria.
  
  
        The search term is used to look for nodes that match against name, title, description,
        full text content or tags.
  
  
        The search term:
  
        - must contain a minimum of 3 alphanumeric characters
  
        - allows "quoted term"
  
        - can optionally use ''*'' for wildcard matching
  
  
        By default, file and folder types will be searched unless a specific type is
        provided as a query parameter.
  
  
        By default, the search will be across the repository unless a specific root
        node id is provided to start the search from.
  
  
        You can sort the result list using the **orderBy** parameter. You can specify
        one or more of the following fields in the **orderBy** parameter:
  
        * name
  
        * modifiedAt
  
        * createdAt
  
        '
      operationId: findNodes
      parameters:
      - description: The term to search for.
        in: query
        name: term
        required: true
        type: string
      - description: 'The id of the node to start the search from.
  
  
          Supports the aliases -my-, -root- and -shared-.
  
          '
        in: query
        name: rootNodeId
        required: false
        type: string
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - description: 'Restrict the returned results to only those of the given node
          type and its sub-types
  
          '
        in: query
        name: nodeType
        required: false
        type: string
      - $ref: '#/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **nodeType** unknown, or **orderBy**
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**rootNodeId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find nodes
      tags:
      - queries
      x-alfresco-since: '5.2'
  /queries/people:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of people that match the given search criteria.
  
  
        The search term is used to look for matches against person id, firstname and
        lastname.
  
  
        The search term:
  
        - must contain a minimum of 2 alphanumeric characters
  
        - can optionally use ''*'' for wildcard matching within the term
  
  
        You can sort the result list using the **orderBy** parameter. You can specify
        one or more of the following fields in the **orderBy** parameter:
  
        * id
  
        * firstName
  
        * lastName
  
        '
      operationId: findPeople
      parameters:
      - description: 'The term to search for.
  
          '
        in: query
        name: term
        required: true
        type: string
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/orderByParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **orderBy** invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find people
      tags:
      - queries
      x-alfresco-since: '5.2'
  /queries/sites:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets a list of sites that match the given search criteria.
  
  
        The search term is used to look for sites that match against site id, title
        or description.
  
  
        The search term:
  
        - must contain a minimum of 2 alphanumeric characters
  
        - can optionally use ''*'' for wildcard matching within the term
  
  
        The default sort order for the returned list is for sites to be sorted by ascending
        id.
  
        You can override the default by using the **orderBy** parameter. You can specify
        one or more of the following fields in the **orderBy** parameter:
  
        * id
  
        * title
  
        * description
  
        '
      operationId: findSites
      parameters:
      - description: The term to search for.
        in: query
        name: term
        required: true
        type: string
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid, or search **term** too short, or **orderBy** invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find sites
      tags:
      - queries
      x-alfresco-since: '5.2'
  /shared-links:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Get a list of links that the current user has read permission on source node.
  
  
        The list is ordered in descending modified order.
  
  
        **Note:** The list of links is eventually consistent so newly created shared
        links may not appear immediately.
  
        '
      operationId: listSharedLinks
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - description: 'Optionally filter the list by "sharedByUser" userid of person
          who shared the link (can also use -me-)
  
  
          *   ```where=(sharedByUser=''jbloggs'')```
  
  
          *   ```where=(sharedByUser=''-me-'')```
  
          '
        in: query
        name: where
        required: false
        type: string
      - $ref: '#/parameters/sharedLinkEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List shared links
      tags:
      - shared-links
      x-alfresco-since: '5.2'
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreate a shared link to the file **nodeId** in the request body. Also, an\
        \ optional expiry date could be set,\nso the shared link would become invalid\
        \ when the expiry date is reached. For example:\n\n```JSON\n  {\n    \"nodeId\"\
        : \"1ff9da1a-ee2f-4b9c-8c34-3333333333\",\n    \"expiresAt\": \"2017-03-23T23:00:00.000+0000\"\
        \n  }\n```\n\n**Note:** You can create shared links to more than one file\n\
        specifying a list of **nodeId**s in the JSON body like this:\n\n```JSON\n[\n\
        \  {\n    \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-4444444444\"\n  },\n  {\n  \
        \  \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-5555555555\"\n  }\n]\n```\nIf you specify\
        \ a list as input, then a paginated list rather than an entry is returned in\
        \ the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\"\
        : {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\"\
        : 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\"\
        : [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n   \
        \   {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n\
        }\n```\n"
      operationId: createSharedLink
      parameters:
      - $ref: '#/parameters/sharedLinkEntryIncludeParam'
      - $ref: '#/parameters/fieldsParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **nodeId** is not a valid format, or does
            not identify a file,
  
            or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid.
            E.g. the expiry date
  
            has already passed
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to create **sharedId**
            (for example, no read permission)
        '404':
          description: '**nodeId** does not exist
  
            '
        '409':
          description: Shared link already exists for **nodeId**
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a shared link to a file
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Deletes the shared link with identifier **sharedId**.
  
        '
      operationId: deleteSharedLink
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      responses:
        '204':
          description: Successful response
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete **sharedId**
        '404':
          description: '**sharedId** does not exist
  
            '
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Deletes a shared link
      tags:
      - shared-links
      x-alfresco-since: '5.2'
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets minimal information for the file with shared link identifier **sharedId**.
  
  
        **Note:** No authentication is required to call this endpoint.
  
        '
      operationId: getSharedLink
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format
  
            '
        '404':
          description: '**sharedId** does not exist
  
            '
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a shared link
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the content of the file with shared link identifier **sharedId**.
  
  
        **Note:** No authentication is required to call this endpoint.
  
        '
      operationId: getSharedLinkContent
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format
  
            '
        '404':
          description: '**sharedId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get shared link content
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}/email:
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nSends email with app-specific url including identifier **sharedId**.\n\nThe\
        \ client and recipientEmails properties are mandatory in the request body. For\
        \ example, to email a shared link with minimum info:\n```JSON\n{\n    \"client\"\
        : \"myClient\",\n    \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"\
        ]\n}\n```\nA plain text message property can be optionally provided in the request\
        \ body to customise the sent email.\nAlso, a locale property can be optionally\
        \ provided in the request body to send the emails in a particular language (if\
        \ the locale is supported by Alfresco).\nFor example, to email a shared link\
        \ with a messages and a locale:\n```JSON\n{\n    \"client\": \"myClient\",\n\
        \    \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"],\n\
        \    \"message\": \"myMessage\",\n    \"locale\":\"en-GB\"\n}\n```\n**Note:**\
        \ The client must be registered before you can send a shared link email. See\
        \ [server documentation]. However, out-of-the-box\n share is registered as a\
        \ default client, so you could pass **share** as the client name:\n```JSON\n\
        {\n    \"client\": \"share\",\n    \"recipientEmails\": [\"john.doe@acme.com\"\
        ]\n}\n```\n"
      operationId: emailSharedLink
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyEmail'
        required: true
      responses:
        '202':
          description: Successful response
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format
  
            or **sharedLinkBodyEmail** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**sharedId** does not exist or **client** is not registered
  
            '
        '501':
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Email shared link
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}/renditions:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nGets a list of the rendition information for the file with shared link identifier\
        \ **sharedId**.\n\nThis API method returns rendition information, including\
        \ the rendition id, for each rendition\nwhere the rendition status is CREATED,\
        \ which means the rendition is available\_to view/download.\n\n**Note:** No\
        \ authentication is required to call this endpoint.\n"
      operationId: listSharedLinkRenditions
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionPaging'
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format
  
            '
        '404':
          description: '**sharedId** does not exist
  
            '
        '501':
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: List renditions for a shared link
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}/renditions/{renditionId}:
    get:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nGets rendition information for the file with shared link identifier **sharedId**.\n\
        \nThis API method returns rendition information where the rendition status is\
        \ CREATED,\nwhich means the rendition is available\_to view/download.\n\n**Note:**\
        \ No authentication is required to call this endpoint.\n"
      operationId: getSharedLinkRendition
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      - $ref: '#/parameters/renditionIdParam'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/components/schemas/RenditionEntry'
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format, or **renditionId**
            is invalid
  
            '
        '404':
          description: '**sharedId**  or **renditionId** does not exist (ie. not CREATED)
  
            '
        '501':
          description: Shared links are disabled for the system
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      summary: Get shared link rendition information
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /shared-links/{sharedId}/renditions/{renditionId}/content:
    get:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Gets the rendition content for file with shared link identifier **sharedId**.
  
  
        **Note:** No authentication is required to call this endpoint.
  
        '
      operationId: getSharedLinkRenditionContent
      parameters:
      - $ref: '#/parameters/sharedIdParam'
      - $ref: '#/parameters/renditionIdParam'
      - $ref: '#/parameters/attachmentParam'
      - $ref: '#/parameters/ifModifiedSinceHeader'
      - $ref: '#/parameters/RangeHeader'
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: file
          description: Successful response
        '206':
          description: Partial Content
        '304':
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
        '400':
          description: 'Invalid parameter: **sharedId** is not a valid format, or **renditionId**
            is invalid
  
            '
        '404':
          description: '**sharedId** does not exist
  
            '
        '416':
          description: Range Not Satisfiable
        '501':
          description: Shared links are disabled for the system
        default:
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get shared link rendition content
      tags:
      - shared-links
      x-alfresco-since: '5.2'
  /site-membership-requests:
    get:
      description: 'Get the list of site membership requests the user can action.
  
  
        You can use the **where** parameter to filter the returned site membership requests
        by **siteId**. For example:
  
  
        ```
  
        (siteId=mySite)
  
        ```
  
  
        The **where** parameter can also be used to filter by ***personId***. For example:
  
  
        ```
  
        where=(personId=person)
  
        ```
  
  
        This may be combined with the siteId filter, as shown below:
  
  
        ```
  
        where=(siteId=mySite AND personId=person))
  
        ```
  
        '
      operationId: getSiteMembershipRequests
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/whereParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestWithPersonPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get site membership requests
      tags:
      - sites
  /sites:
    get:
      description: 'Gets a list of sites in this repository.
  
  
        You can use the **where** parameter to filter the returned sites by **visibility**
        or site **preset**.
  
  
        Example to filter by **visibility**, use any one of:
  
  
        ```
  
        (visibility=''PRIVATE'')
  
        (visibility=''PUBLIC'')
  
        (visibility=''MODERATED'')
  
        ```
  
  
        Example to filter by site **preset**:
  
  
        ```
  
        (preset=''site-dashboard'')
  
        ```
  
  
        The default sort order for the returned list is for sites to be sorted by ascending
        title.
  
        You can override the default by using the **orderBy** parameter. You can specify
        one or more of the following fields in the **orderBy** parameter:
  
        * id
  
        * title
  
        * description
  
  
        You can use the **relations** parameter to include one or more related
  
        entities in a single response and so reduce network traffic.
  
  
        The entity types in Alfresco are organized in a tree structure.
  
        The **sites** entity has two children, **containers** and **members**.
  
        The following relations parameter returns all the container and member
  
        objects related to each site:
  
  
        ```
  
        containers,members
  
        ```
  
        '
      operationId: listSites
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/orderByParam'
      - $ref: '#/parameters/relationsParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/whereParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**,
            or **where** is invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List sites
      tags:
      - sites
    post:
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\
        \nCreates a default site with the given details.  Unless explicitly specified,\
        \ the site id will be generated\nfrom the site title. The site id must be unique\
        \ and only contain alphanumeric and/or dash characters.\n\nNote: the id of a\
        \ site cannot be updated once the site has been created.\n\nFor example, to\
        \ create a public site called \"Marketing\" the following body could be used:\n\
        ```JSON\n{\n  \"title\": \"Marketing\",\n  \"visibility\": \"PUBLIC\"\n}\n```\n\
        \nThe creation of the (surf) configuration files required by Share can be skipped\
        \ via the **skipConfiguration** query parameter.\n\n**Note:** if skipped then\
        \ such a site will **not** work within Share.\n\nThe addition of the site to\
        \ the user's site favorites can be skipped via the **skipAddToFavorites** query\
        \ parameter.\n\nThe creator will be added as a member with Site Manager role.\n\
        \nWhen you create a site, a container called **documentLibrary** is created\
        \ for you in the new site.\nThis container is the root folder for content stored\
        \ in the site.\n"
      operationId: createSite
      parameters:
      - default: false
        description: Flag to indicate whether the Share-specific (surf) configuration
          files for the site should not be created.
        in: query
        name: skipConfiguration
        type: boolean
      - default: false
        description: Flag to indicate whether the site should not be added to the user's
          site favorites.
        in: query
        name: skipAddToFavorites
        type: boolean
      - $ref: '#/parameters/fieldsParam'
      - description: The site details
        in: body
        name: siteBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/SiteBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **id**, **title**, or **description** exceed
            the maximum length;
  
            or **id** contains invalid characters; or **siteBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '409':
          description: Site with the given identifier already exists
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site
      tags:
      - sites
      x-alfresco-since: '5.2'
  /sites/{siteId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Deletes the site with **siteId**.
  
        '
      operationId: deleteSite
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - default: false
        description: Flag to indicate whether the site should be permanently deleted
          i.e. bypass the trashcan.
        in: query
        name: permanent
        type: boolean
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to delete the site that
            is visible to them.
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site
      tags:
      - sites
      x-alfresco-since: '5.2'
    get:
      description: 'Gets information for site **siteId**.
  
  
        You can use the **relations** parameter to include one or more related
  
        entities in a single response and so reduce network traffic.
  
  
        The entity types in Alfresco are organized in a tree structure.
  
        The **sites** entity has two children, **containers** and **members**.
  
        The following relations parameter returns all the container and member
  
        objects related to the site **siteId**:
  
  
        ```
  
        containers,members
  
        ```
  
        '
      operationId: getSite
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/relationsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site
      tags:
      - sites
    put:
      description: '**Note:** this endpoint is available in Alfresco 5.2 and newer versions.
  
  
        Update the details for the given site **siteId**. Site Manager or otherwise
        a
  
        (site) admin can update title, description or visibility.
  
  
        Note: the id of a site cannot be updated once the site has been created.
  
        '
      operationId: updateSite
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The site information to update.
        in: body
        name: siteBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/SiteBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **siteBodyUpdate** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to update the site that
            is visible to them.
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site
      tags:
      - sites
      x-alfresco-since: '5.2'
  /sites/{siteId}/containers:
    get:
      description: Gets a list of containers for the site **siteId**.
      operationId: listSiteContainers
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site containers
      tags:
      - sites
  /sites/{siteId}/containers/{containerId}:
    get:
      description: Gets information on the container **containerId** in site **siteId**.
      operationId: getSiteContainer
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - description: The unique identifier of a site container.
        in: path
        name: containerId
        required: true
        type: string
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **containerId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site container
      tags:
      - sites
  /sites/{siteId}/group-members:
    get:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Gets a list of group membership for site **siteId**.
  
        '
      operationId: listSiteGroups
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List group membership for site
      tags:
      - sites
    post:
      description: "**Note:** this endpoint is available in Alfresco 7.0.0 and newer\
        \ versions.\n\nCreates a site membership for group **groupId** on site **siteId**.\n\
        You can set the **role** to one of four types:\n* SiteConsumer\n* SiteCollaborator\n\
        * SiteContributor\n* SiteManager\n**Note:** You can create more than one site\
        \ membership by\nspecifying a list of group in the JSON body like this:\n\n\
        ```JSON\n  [\n   {\n     \"role\": \"SiteConsumer\",\n     \"id\": \"authorityId\"\
        \n   },\n   {\n     \"role\": \"SiteConsumer\",\n     \"id\": \"authorityId\"\
        \n   }\n  ]\n```\nIf you specify a list as input, then a paginated list rather\
        \ than an entry is returned in the response body. For example:\n```JSON\n  {\n\
        \    \"list\": {\n      \"pagination\": {\n        \"count\": 2,\n        \"\
        hasMoreItems\": false,\n        \"totalItems\": 2,\n        \"skipCount\": 0,\n\
        \        \"maxItems\": 100\n      },\n      \"entries\": [\n        {\n    \
        \      \"entry\": {\n            ...\n          }\n        },\n        {\n \
        \         \"entry\": {\n            ...\n          }\n        }\n      ]\n \
        \   }\n  }\n```\n"
      operationId: createSiteGroupMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The group to add and their role
        in: body
        name: siteMembershipBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/SiteMembershipBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **role** or **id** is invalid
  
            or **siteMembershipBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to invite a Group
        '404':
          description: '**siteId** or **groupId** does not exist
  
            '
        '409':
          description: Group with this **id** is already a member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership for group
      tags:
      - sites
  /sites/{siteId}/group-members/{groupId}:
    delete:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Deletes group **groupId** as a member of site **siteId**.
  
        '
      operationId: deleteSiteGroupMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/groupIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **groupId** does not exist
  
            '
        '422':
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete groupId
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a group membership for site
      tags:
      - sites
    get:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Gets site membership information for group **groupId** on site **siteId**.
  
        '
      operationId: getSiteGroupMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **groupId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get information about site membership of group
      tags:
      - sites
    put:
      description: '**Note:** this endpoint is available in Alfresco 7.0.0 and newer
        versions.
  
  
        Update the membership of person **groupId** in site **siteId**.
  
        You can set the **role** to one of four types:
  
        * SiteConsumer
  
        * SiteCollaborator
  
        * SiteContributor
  
        * SiteManager
  
        '
      operationId: updateSiteGroupMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/groupIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The groupId new role
        in: body
        name: siteMembershipBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/SiteMembershipBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **role** does not exist
  
            or **siteMembershipBodyUpdate** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **groupId** does not exist
  
            '
        '422':
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update group
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update site membership of group
      tags:
      - sites
  /sites/{siteId}/members:
    get:
      description: Gets a list of site memberships for site **siteId**.
      operationId: listSiteMemberships
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      - description: 'Optionally filter the list.
  
          *   ```where=(isMemberOfGroup=false|true)```
  
          '
        in: query
        name: where
        required: false
        type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List site memberships
      tags:
      - sites
    post:
      description: "Creates a site membership for person **personId** on site **siteId**.\n\
        \nYou can set the **role** to one of four types:\n\n* SiteConsumer\n* SiteCollaborator\n\
        * SiteContributor\n* SiteManager\n\n**Note:** You can create more than one site\
        \ membership by\nspecifying a list of people in the JSON body like this:\n\n\
        ```JSON\n[\n  {\n    \"role\": \"SiteConsumer\",\n    \"id\": \"joe\"\n  },\n\
        \  {\n    \"role\": \"SiteConsumer\",\n    \"id\": \"fred\"\n  }\n]\n```\nIf\
        \ you specify a list as input, then a paginated list rather than an entry is\
        \ returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n\
        \    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n\
        \      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n\
        \    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n\
        \        }\n      },\n      {\n        \"entry\": {\n          ...\n       \
        \ }\n      }\n    ]\n  }\n}\n```\n"
      operationId: createSiteMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The person to add and their role
        in: body
        name: siteMembershipBodyCreate
        required: true
        schema:
          $ref: '#/components/schemas/SiteMembershipBodyCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **role** or **id** is invalid
  
            or **siteMembershipBodyCreate** invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: User does not have permission to invite a person
        '404':
          description: '**siteId** or **personId** does not exist
  
            '
        '409':
          description: Person with this **id** is already a member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a site membership
      tags:
      - sites
  /sites/{siteId}/members/{personId}:
    delete:
      description: 'Deletes person **personId** as a member of site **siteId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: deleteSiteMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/personIdParam'
      responses:
        '204':
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **personId** does not exist
  
            '
        '422':
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a site membership
      tags:
      - sites
    get:
      description: 'Gets site membership information for person **personId** on site
        **siteId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
        '
      operationId: getSiteMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **personId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a site membership
      tags:
      - sites
    put:
      description: 'Update the membership of person **personId** in site **siteId**.
  
  
        You can use the `-me-` string in place of `<personId>` to specify the currently
        authenticated user.
  
  
        You can set the **role** to one of four types:
  
  
        * SiteConsumer
  
        * SiteCollaborator
  
        * SiteContributor
  
        * SiteManager
  
        '
      operationId: updateSiteMembership
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/personIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The persons new role
        in: body
        name: siteMembershipBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/SiteMembershipBodyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **role** does not exist
  
            or **siteMembershipBodyUpdate** invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**siteId** or **personId** does not exist
  
            '
        '422':
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update member
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a site membership
      tags:
      - sites
  /sites/{siteId}/site-membership-requests/{inviteeId}/approve:
    post:
      description: 'Approve a site membership request.
  
        '
      operationId: approveSiteMembershipRequest
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/inviteeIdParam'
      - description: 'Accepting a request to join, optionally, allows assignment of
          a role to the user.
  
          '
        in: body
        name: siteMembershipApprovalBody
        required: false
        schema:
          $ref: '#/components/schemas/SiteMembershipApprovalBody'
      responses:
        '200':
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **siteId** or **inviteeId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to approve membership request
        '404':
          description: '**siteId** or **inviteeId** does not exist
  
            '
        '422':
          description: 'Integrity exception or not allowed to approve membership request.
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Approve a site membership request
      tags:
      - sites
  /sites/{siteId}/site-membership-requests/{inviteeId}/reject:
    post:
      description: 'Reject a site membership request.
  
        '
      operationId: rejectSiteMembershipRequest
      parameters:
      - $ref: '#/parameters/siteIdParam'
      - $ref: '#/parameters/inviteeIdParam'
      - description: 'Rejecting a request to join, optionally, allows the inclusion
          of comment.
  
          '
        in: body
        name: siteMembershipRejectionBody
        required: false
        schema:
          $ref: '#/components/schemas/SiteMembershipRejectionBody'
      responses:
        '200':
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **siteId** or **inviteeId** is invalid
  
            '
        '401':
          description: Authentication failed
        '403':
          description: Current user does not have permission to reject membership request
        '404':
          description: '**siteId** or **inviteeId** does not exist
  
            '
        '422':
          description: 'Integrity exception or not allowed to reject membership request.
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Reject a site membership request
      tags:
      - sites
  /tags:
    get:
      description: 'Gets a list of tags in this repository.
  
  
        You can use the **include** parameter to return additional **values** information.
  
        '
      operationId: listTags
      parameters:
      - $ref: '#/parameters/skipCountParam'
      - $ref: '#/parameters/maxItemsParam'
      - $ref: '#/parameters/fieldsParam'
      - $ref: '#/parameters/tagEntryIncludeParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
          description: Successful response
        '400':
          description: 'Invalid parameter: value of **maxItems** or **skipCount** is
            invalid
  
            '
        '401':
          description: Authentication failed
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List tags
      tags:
      - tags
  /tags/{tagId}:
    get:
      description: Get a specific tag with **tagId**.
      operationId: getTag
      parameters:
      - $ref: '#/parameters/tagIdParam'
      - $ref: '#/parameters/fieldsParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
          examples:
            application/json:
              id: ed2444b5-d0c1-440b-b5b8-34a53e578091
              tag: test tag 1
        '401':
          description: Authentication failed
        '404':
          description: '**tagId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get a tag
      tags:
      - tags
    put:
      description: Updates the tag **tagId**.
      operationId: updateTag
      parameters:
      - $ref: '#/parameters/tagIdParam'
      - $ref: '#/parameters/fieldsParam'
      - description: The updated tag
        in: body
        name: tagBodyUpdate
        required: true
        schema:
          $ref: '#/components/schemas/TagBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
          description: Successful response
        '400':
          description: 'Invalid parameter: **tagBodyUpdate** is invalid
  
            '
        '401':
          description: Authentication failed
        '404':
          description: '**tagId** does not exist
  
            '
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update a tag
      tags:
      - tags
