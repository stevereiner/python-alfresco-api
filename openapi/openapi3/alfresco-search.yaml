openapi: 3.0.0
info:
  description: |
    **Search API**

    Provides access to the search features of Alfresco Content Services.
  title: Alfresco Content Services REST API
  version: "1"
paths:
  /search:
    post:
      description: >
        **Note**: this endpoint is available in Alfresco 5.2 and newer versions.


        **You specify all the parameters in this API in a JSON body**, URL parameters are not supported.

        A basic query looks like this:


        ```JSON

        {
          "query": {
            "query": "foo"
          }
        }

        ```


        **Note:** These are the minimum possible query parameters.


        The default search language is **afts** ([Alfresco Full Text Search](http://docs.alfresco.com/5.1/concepts/rm-searchsyntax-intro.html)), but you can also specify **cmis**, and **lucene**.


        A basic CMIS query looks like this:


        ```JSON

        {
          "query": {
            "query": "select * from cmis:folder",
            "language": "cmis"
          }
        }

        ```


        By default, **results are limited to the first 100.**

        Results can be restricted using "paging". For example:

        ```JSON

        "paging": {
          "maxItems": "50",
          "skipCount": "28"
        }

        ```

        This example would ensure that results are **limited by Final Size**, skipping the first 28 results and returning the next 50.


        Alternatively, you can limit the results by using the **limits JSON body parameter**. For example,

        ```JSON

        "limits": {
          "permissionEvaluationTime": 20000,
          "permissionEvaluationCount": 2000
        }

        ```


        You can use the **include JSON body parameter** to return additional information.

        This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example:

        ```JSON

        "include": ["aspectNames", "properties", "isLink"]

        ```


        You can use the **fields JSON body parameter** to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.

        This works in the same way as in the /nodes/{nodeId}/children method in the core API. For example:

        ```JSON

        "fields": ["id", "name", "search"]

        ```


        You can sort the results using the **sort JSON body parameter**, for example:

        ```JSON

        "sort": [{"type":"FIELD", "field":"cm:description", "ascending":"true"}]

        ```

        **Note:** the **sort** parameter is not supported for CMIS queries.


        By default, search uses the **"nodes" location**, which is the **content store known as workspace://SpacesStore**.

        To change the scope to another location you can use the **locations JSON body parameter**.

        You can specify either **nodes** (the default), **versions** or **deleted-nodes**. For example:

        ```JSON

        "scope": {
            "locations": ["deleted-nodes"]
        }

        ```

        You can specify templates using the **templates JSON body parameter**, for example:

        ```JSON

        "templates": [{"name": "_PERSON","template": "|%firstName OR |%lastName OR |%userName"},
                      {"name": "mytemplate","template": "%cm:content"}]
        ```


        **Note: Spell checking only works on Search Services (Solr 6) if you have already enabled suggestions.**


        For **spell checking** you can use a query like this:

        ```JSON

        {
          "query": {
            "query": "cm:title:alfrezco"
          },
          "spellcheck": {"query": "alfrezco"}
        }

        ```


        If you are already specifying "userQuery" then the following may be easier and produces the same result :

        ```JSON

        {
          "query": {
            "query": "cm:title:alfrezco",
            "userQuery": "alfrezco"
          },
          "spellcheck": {}
        }

        ```


        The spellcheck response includes a spellCheck context like this:

        ```JSON

        "context": {
          "spellCheck": {
            "type": "searchInsteadFor",
            "suggestions": ["alfresco"]
          }
        },

        ```


        To specify defaults, you  use a **defaults JSON body parameter**, for example:

        ```JSON

        "defaults": {
          "textAttributes": [
            "cm:content", "cm:name"
          ],
          "defaultFTSOperator": "AND",
          "defaultFTSFieldOperator": "OR",
          "namespace": "cm",
          "defaultFieldName": "PATH"
        }

        ```


        You can specify several filter queries using the **filterQueries JSON body parameter**, for example:

        ```JSON

        "filterQueries": [{"query": "TYPE:'cm:folder'"},{"query": "cm:creator:mjackson"}]

        ```


        You can specify several facet queries using the **facetQueries JSON body parameter**, for example:

        ```JSON

        "facetQueries": [{"query": "created:2016","label": "CreatedThisYear"}]

        ```

        The response will contain a matching "context" section, the "label" will match the facet query.

        ```JSON

        "context": {
          "facetQueries": [
            {"label": "CreatedThisYear","count": 3}
          ]
        },

        ```


        A complete query for facetting via the content.size field looks this:

        ```JSON

        {
          "query": {
            "query": "presentation",
            "language": "afts"
          },
            "facetQueries": [
                {"query": "content.size:[0 TO 10240]", "label": "xtra small"},
                {"query": "content.size:[10240 TO 102400]", "label": "small"},
                {"query": "content.size:[102400 TO 1048576]", "label": "medium"},
                {"query": "content.size:[1048576 TO 16777216]", "label": "large"},
                {"query": "content.size:[16777216 TO 134217728]", "label": "xtra large"},
                {"query": "content.size:[134217728 TO MAX]", "label": "XX large"}
          ],
            "facetFields": {"facets": [{"field": "'content.size'"}]}
        }

        ```


        The response will contain a matching "context" section, the "label" will match the facet query.

        ```JSON

        "context": {
          "facetQueries": [
            { "label": "small","count": 2 },
            { "label": "large","count": 0 },
            { "label": "xtra small","count": 5 },
            { "label": "xtra large","count": 56},
            { "label": "medium","count": 4 },
            { "label": "XX large", "count": 1 }
          ]
        },

        ```


        You can specify several facet fields using the **facetFields JSON body parameter**, for example:

        ```JSON

        "facetFields": {"facets": [{"field": "creator", "mincount": 1}, {"field": "modifier", "mincount": 1}]}

        ```

        The response will contain a matching "context" section, the "label" will match the facet field.

        ```JSON

        "context": {
           "facetsFields": [
             {  "label": "creator",
                "buckets": [
                  { "label": "System", "count": 75 },
                  { "label": "mjackson", "count": 5 }
                ]},
             {  "label": "modifier",
                "buckets": [
                  { "label": "System", "count": 72 },
                  { "label": "mjackson", "count": 5 },
                  { "label": "admin", "count": 3 }
                ]}
           ]
        },

        ```


        Grouping facet queries that go together can be done by specifying the group label in the fact queries as follow:

        ```JSON
            {
                "query": {
                    "query": "presentation"
                },
                "facetQueries": [
                    {"query": "content.size:[0 TO 102400]", "label": "small", "group":"foo"},
                    {"query": "content.size:[102400 TO 1048576]", "label": "medium","group":"foo"},
                    {"query": "content.size:[1048576 TO 16777216]", "label": "large","group":"foo"}
                ]
            }
        ```

        The above query returns the results a faceted field grouped under the label foo:

        ```JSON

        {
            "context": {"facetsFields": [{
                "label": "foo",
                "buckets": [
                    {
                        "count": 109,
                        "label": "small",
                        "filterQuery": "content.size:[0 TO 102400]"
                    },
                    {
                        "count": 0,
                        "label": "large",
                        "filterQuery": "content.size:[1048576 TO 16777216]"
                    },
                    {
                        "count": 0,
                        "label": "medium",
                        "filterQuery": "content.size:[102400 TO 1048576]"
                    }
                ]
            }]
        }

        ```

        Range Faceting is supported by the **ranges JSON body parameter**, for example:

        ```JSON
            {
                "query": {
                    "query": "presentation"
                },
                "ranges": [
                {
                    "field": "content.size",
                     "start": "0",
                     "end": "100",
                     "gap": "20",
                     "hardend": true
                },
                {
                    "field": "created",
                    "start": "2015-09-29T10:45:15.729Z",
                    "end": "2016-09-29T10:45:15.729Z",
                    "gap": "+100DAY"
                }]
            }
        ```

        An example query for **search highlighting** could look like this:

        ```JSON

        {
          "query": {
            "query": "description:workflow",
            "userQuery":"workflow"
          },
          "highlight": {
            "prefix": "¿",
            "postfix": "?",
            "mergeContiguous": true,
            "fields": [
              {
                "field": "cm:title"
              },
              {
                "field": "description",
                "prefix": "(",
                "postfix": ")"
              }

            ]
          }
        }

        ```

        The example above changes the highlighting prefix and postfix from the default `<em>` for all fields to ¿? and just for the "description" field to ().

        The hightlight information is added in each node entry response; here is an example partial response:

        ```

        "entry": {
                "createdAt": "2016-10-12T15:24:31.202+0000",
                "isFolder": true,
                "search": {
                  "score": 1,
                  "highlight": [
                    {
                      "field": "cm:title",
                      "snippets": [
                        "Customized ¿Workflow? Process Definitions"
                      ]
                    },
                    {
                      "field": "description",
                      "snippets": [
                        "Customized (Workflow) Process Definitions"
                      ]
                    }
                  ]
              },
        ```

        **Note**: after the migration to Swagger UI 3, this API definition was triggering some warnings, more info in [this StackOverflow Q&A](https://stackoverflow.com/q/65584131/1654265).
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: |
          Generic query API
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPaging"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      summary: Searches Alfresco
      tags:
        - search
      x-alfresco-since: "5.2"
security:
  - basicAuth: []
servers:
  - url: /alfresco/api/-default-/public/search/versions/1
components:
  securitySchemes:
    basicAuth:
      description: HTTP Basic Authentication
      type: http
      scheme: basic
  schemas:
    ContentInfo:
      properties:
        encoding:
          type: string
        mimeType:
          type: string
        mimeTypeGroup:
          type: string
        mimeTypeName:
          type: string
        sizeInBytes:
          type: integer
      required:
        - mimeType
        - mimeTypeName
        - sizeInBytes
      type: object
    Error:
      properties:
        error:
          properties:
            briefSummary:
              type: string
            descriptionURL:
              type: string
            errorKey:
              type: string
            logId:
              type: string
            stackTrace:
              type: string
            statusCode:
              format: int32
              type: integer
          type: object
      required:
        - error
      type: object
    GenericBucket:
      description: A bucket of facet results
      properties:
        bucketInfo:
          description: Additional information of nested facet
          properties:
            end:
              description: The end of range
              type: string
            endInclusive:
              description: Includes values less than or equal to "end"
              type: boolean
            start:
              description: The start of range
              type: string
            startInclusive:
              description: Includes values greater or equal to "start"
              type: boolean
          type: object
        display:
          description: An optional field for additional display information
          type: object
        facets:
          description: Additional list of nested facets
          items:
            type: object
          type: array
        filterQuery:
          description: The filter query you can use to apply this facet
          type: string
        label:
          description: The bucket label
          type: string
        metrics:
          description: An array of buckets and values
          items:
            $ref: "#/components/schemas/GenericMetric"
          type: array
      type: object
    GenericFacetResponse:
      properties:
        buckets:
          description: An array of buckets and values
          items:
            $ref: "#/components/schemas/GenericBucket"
          type: array
        label:
          description: The field name or its explicit label, if provided on the request
          type: string
        type:
          description: The facet type, eg. interval, range, pivot, stats
          type: string
      type: object
    GenericMetric:
      description: A metric used in faceting
      properties:
        type:
          description: The type of metric, e.g. count
          type: string
        value:
          description: |
            The metric value, e.g. {"count": 34}
          type: object
      type: object
    Node:
      properties:
        allowableOperations:
          items:
            type: string
          type: array
        aspectNames:
          items:
            type: string
          type: array
        content:
          $ref: "#/components/schemas/ContentInfo"
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: "#/components/schemas/UserInfo"
        id:
          type: string
        isFile:
          type: boolean
        isFolder:
          type: boolean
        isLink:
          type: boolean
        isLocked:
          default: false
          type: boolean
        modifiedAt:
          format: date-time
          type: string
        modifiedByUser:
          $ref: "#/components/schemas/UserInfo"
        name:
          description: >
            The name must not contain spaces or the following special
            characters: * " < > \ / ? : and |.

            The character . must not be used at the end of the name.
          pattern: ^(?!(.*[\"\*\\\>\<\?\/\:\|]+.*)|(.*[\.]?.*[\.]+$)|(.*[ ]+$))
          type: string
        nodeType:
          type: string
        parentId:
          type: string
        path:
          $ref: "#/components/schemas/PathInfo"
        properties:
          type: object
      required:
        - id
        - name
        - nodeType
        - isFolder
        - isFile
        - createdAt
        - createdByUser
        - modifiedAt
        - modifiedByUser
      type: object
    Pagination:
      properties:
        count:
          description: |
            The number of objects in the entries array.
          format: int64
          type: integer
        hasMoreItems:
          description: >
            A boolean value which is **true** if there are more entities in the
            collection

            beyond those in this response. A true value means a request with a larger value

            for the **skipCount** or the **maxItems** parameter will return more entities.
          type: boolean
        maxItems:
          description: |
            The value of the **maxItems** parameter used to generate this list,
            or if there was no **maxItems** parameter the default value is 100
          format: int64
          type: integer
        skipCount:
          description: >
            An integer describing how many entities exist in the collection
            before

            those included in this list.
          format: int64
          type: integer
        totalItems:
          description: >
            An integer describing the total number of entities in the
            collection.

            The API might not be able to determine this value,

            in which case this property will not be present.
          format: int64
          type: integer
      required:
        - count
        - hasMoreItems
        - skipCount
        - maxItems
      type: object
    PathElement:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    PathInfo:
      properties:
        elements:
          items:
            $ref: "#/components/schemas/PathElement"
          type: array
        isComplete:
          type: boolean
        name:
          type: string
      type: object
    RequestDefaults:
      description: Common query defaults
      properties:
        defaultFTSFieldOperator:
          default: AND
          description: >
            The default way to combine query parts in field query groups when
            AND or OR is not explicitly stated - includes ! - +

            FIELD:(one two three)
          enum:
            - AND
            - OR
          type: string
        defaultFTSOperator:
          default: AND
          description: >
            The default way to combine query parts when AND or OR is not
            explicitly stated - includes ! - +

            one two three

            (one two three)
          enum:
            - AND
            - OR
          type: string
        defaultFieldName:
          default: TEXT
          type: string
        namespace:
          default: cm
          description: The default name space to use if one is not provided
          type: string
        textAttributes:
          description: >
            A list of query fields/properties used to expand TEXT: queries.

            The default is cm:content.

            You could include all content properties using d:content or list all individual content properties or types.

            As more terms are included the query size, complexity, memory impact and query time will increase.
          items:
            default: cm:content
            type: string
          type: array
      type: object
    RequestFacetField:
      description: A simple facet field
      properties:
        excludeFilters:
          description: >
            Filter Queries with tags listed here will not be included in facet
            counts.

            This is used for multi-select facetting.
          items:
            type: string
          type: array
        facetEnumCacheMinDf:
          type: integer
        field:
          description: The facet field
          type: string
        label:
          description: A label to include in place of the facet field
          type: string
        limit:
          type: integer
        method:
          enum:
            - ENUM
            - FC
          type: string
        mincount:
          default: 1
          description: The minimum count required for a facet field to be included in the
            response.
          type: integer
        missing:
          default: false
          description: When true, count results that match the query but which have no
            facet value for the field (in addition to the Term-based
            constraints).
          type: boolean
        offset:
          type: integer
        prefix:
          description: Restricts the possible constraints to only indexed values with a
            specified prefix.
          type: string
        sort:
          enum:
            - COUNT
            - INDEX
          type: string
      type: object
    RequestFacetFields:
      description: >
        Simple facet fields to include

        The Properties reflect the global properties related to field facts in SOLR.

        They are descripbed in detail by the SOLR documentation
      properties:
        facets:
          description: >
            Define specifc fields on which to facet (adds SOLR facet.field and
            f.<field>.facet.* options)
          items:
            $ref: "#/components/schemas/RequestFacetField"
          type: array
      type: object
    RequestFacetIntervals:
      description: Facet Intervals
      properties:
        intervals:
          description: Specifies the fields to facet by interval.
          items:
            properties:
              field:
                description: The field to facet on
                type: string
              label:
                description: A label to use to identify the field facet
                type: string
              sets:
                description: Sets the intervals for all fields.
                items:
                  $ref: "#/components/schemas/RequestFacetSet"
                type: array
            type: object
          type: array
        sets:
          description: Sets the intervals for all fields.
          items:
            $ref: "#/components/schemas/RequestFacetSet"
          type: array
      type: object
    RequestFacetQueries:
      description: Facet queries to include
      items:
        properties:
          label:
            description: A label to include in place of the facet query
            type: string
          query:
            description: A facet query
            type: string
        type: object
      type: array
    RequestFacetSet:
      description: The interval to Set
      properties:
        end:
          description: The end of the range
          type: string
        endInclusive:
          default: true
          description: When true, the set will include values less than or equal to "end"
          type: boolean
        label:
          description: A label to use to identify the set
          type: string
        start:
          description: The start of the range
          type: string
        startInclusive:
          default: true
          description: When true, the set will include values greater or equal to "start"
          type: boolean
      type: object
    RequestFields:
      description: >-
        A list of field names.

        You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.

        The list applies to a returned individual entity or entries within a collection.

        If the **include** parameter is used aswell then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.
      items:
        type: string
      type: array
    RequestFilterQueries:
      description: Filter Queries. Constraints that apply to the results set but do
        not affect the score of each entry.
      items:
        properties:
          query:
            description: |
              The filter query expression.
              For multi-select facets selected facets must be order together
            type: string
          tags:
            description: Tags used exclude the filters from facet evaluation for
              multi-select facet support
            items:
              type: string
            type: array
        type: object
      type: array
    RequestHighlight:
      description: |
        Request that highlight fragments to be added to result set rows
        The properties reflect SOLR highlighting parameters.
      properties:
        fields:
          description: The fields to highlight and field specific configuration properties
            for each field
          items:
            properties:
              field:
                description: The name of the field to highlight.
                type: string
              fragmentSize:
                type: integer
              mergeContiguous:
                type: boolean
              postfix:
                type: string
              prefix:
                type: string
              snippetCount:
                type: integer
            type: object
          type: array
        fragmentSize:
          description: The character length of each snippet.
          type: integer
        maxAnalyzedChars:
          description: The number of characters to be considered for highlighting. Matches
            after this count will not be shown.
          type: integer
        mergeContiguous:
          description: If fragments over lap they can be  merged into one larger fragment
          type: boolean
        postfix:
          description: The string used to mark the end of a highlight in a fragment.
          type: string
        prefix:
          description: The string used to mark the start of a highlight in a fragment.
          type: string
        snippetCount:
          description: The maximum number of distinct highlight snippets to return for
            each highlight field.
          type: integer
        usePhraseHighlighter:
          description: Should phrases be identified.
          type: boolean
      type: object
    RequestInclude:
      description: >
        Returns additional information about the node. The following optional
        fields can be requested:
         * properties
         * aspectNames
         * path
         * isLink
         * allowableOperations
         * association
      items:
        enum:
          - allowableOperations
          - aspectNames
          - isLink
          - isLocked
          - path
          - properties
        type: string
      type: array
    RequestLimits:
      description: Limit the time and resources used for query execution
      properties:
        permissionEvaluationCount:
          default: 2000
          description: Maximum count of post query permission evaluations
          type: integer
        permissionEvaluationTime:
          default: 20000
          description: Maximum time for post query permission evaluation
          type: integer
      type: object
    RequestLocalization:
      description: Localization settings
      properties:
        locales:
          description: A list of Locales definied by IETF BCP 47.  The ordering is
            significant.  The first locale (leftmost) is used for sort and query
            localization, whereas the remaining locales are used for query only.
          items:
            type: string
          type: array
        timezone:
          description: A valid timezone id supported by @see java.time.ZoneId
          type: string
      type: object
    RequestPagination:
      properties:
        maxItems:
          default: 100
          description: The maximum number of items to return in the query results
          minimum: 1
          type: integer
        skipCount:
          default: 0
          description: The number of items to skip from the start of the query set
          minimum: 0
          type: integer
      type: object
    RequestPivot:
      description: A list of pivots.
      example:
        key: MyKey
        pivots:
          - key: AnotherKey
            pivots: []
      properties:
        key:
          description: A key corresponding to a matching field facet label or stats.
          type: string
        pivots:
          items:
            $ref: "#/components/schemas/RequestPivot"
          type: array
      type: object
    RequestQuery:
      description: Query.
      properties:
        language:
          default: afts
          description: The query language in which the query is written.
          enum:
            - afts
            - lucene
            - cmis
          type: string
        query:
          description: The query which may have been generated in some way from the
            userQuery
          type: string
        userQuery:
          description: The exact search request typed in by the user
          type: string
      required:
        - query
      type: object
    RequestRange:
      description: Facet range
      properties:
        end:
          description: The end of the range
          type: string
        excludeFilters:
          description: Filter queries to exclude when calculating statistics
          items:
            type: string
          type: array
        field:
          description: The name of the field to perform range
          type: string
        gap:
          description: Bucket size
          type: string
        hardend:
          description: If true means that the last bucket will end at “end” even if it is
            less than “gap” wide.
          type: boolean
        include:
          description: lower, upper, edge, outer, all
          items:
            type: string
          type: array
        label:
          description: A label to include as a pivot reference
          type: string
        other:
          description: before, after, between, non, all
          items:
            type: string
          type: array
        start:
          description: The start of the range
          type: string
      type: object
    RequestScope:
      description: Scope
      properties:
        locations:
          description: |
            The locations to include in the query
          enum:
            - nodes
            - versions
            - deleted-nodes
          type: string
      type: object
    RequestSortDefinition:
      description: How to sort the rows? An array of sort specifications. The array
        order defines the ordering precedence.
      items:
        properties:
          ascending:
            default: false
            description: The sort order. (The ordering of nulls is determined by the SOLR
              configuration)
            type: boolean
          field:
            description: The name of the field
            type: string
          type:
            default: FIELD
            description: How to order - using a field, when position of the document in the
              index, score/relevence.
            enum:
              - FIELD
              - DOCUMENT
              - SCORE
            type: string
        type: object
      type: array
    RequestSpellcheck:
      description: |
        Request that spellcheck fragments to be added to result set rows
        The properties reflect SOLR spellcheck parameters.
      properties:
        query:
          type: string
      type: object
    RequestStats:
      description: A list of stats request.
      properties:
        cardinality:
          default: false
          description: A statistical approximation of the number of distinct values
          type: boolean
        cardinalityAccuracy:
          default: 0.3
          description: Number between 0.0 and 1.0 indicating how aggressively the
            algorithm should try to be accurate. Used with boolean cardinality
            flag.
          format: float
          type: number
        countDistinct:
          default: false
          description: The number of distinct values  (This can be very expensive to
            calculate)
          type: boolean
        countValues:
          default: true
          description: The number which have a value for this field
          type: boolean
        distinctValues:
          default: false
          description: The set of all distinct values for the field (This can be very
            expensive to calculate)
          type: boolean
        excludeFilters:
          description: A list of filters to exclude
          items:
            type: string
          type: array
        field:
          description: The stats field
          type: string
        label:
          description: A label to include for reference the stats field
          type: string
        max:
          default: true
          description: The maximum value of the field
          type: boolean
        mean:
          default: true
          description: The average
          type: boolean
        min:
          default: true
          description: The minimum value of the field
          type: boolean
        missing:
          default: true
          description: The number which do not have a value for this field
          type: boolean
        percentiles:
          description: A list of percentile values, e.g. "1,99,99.9"
          items:
            format: float
            type: number
          type: array
        stddev:
          default: true
          description: Standard deviation
          type: boolean
        sum:
          default: true
          description: The sum of all values of the field
          type: boolean
        sumOfSquares:
          default: true
          description: Sum of all values squared
          type: boolean
      type: object
    RequestTemplates:
      description: |
        Templates usewd for query expansion.
        A template called "WOOF" defined as "%(cm:name cm:title)" allows
        WOOF:example
        to generate
        cm:name:example cm:name:example
      items:
        properties:
          name:
            description: The template name
            type: string
          template:
            description: The template
            type: string
        type: object
      type: array
    ResponseConsistency:
      description: The consistency state of the index used to execute the query
      properties:
        lastTxId:
          description: The id of the last indexed transaction
          type: integer
      type: object
    ResultBuckets:
      properties:
        buckets:
          description: An array of buckets and values
          items:
            properties:
              count:
                description: The count for the bucket
                type: integer
              display:
                description: An optional field for additional display information
                type: object
              filterQuery:
                description: The filter query you can use to apply this facet
                type: string
              label:
                description: The bucket label
                type: string
            type: object
          type: array
        label:
          description: The field name or its explicit label, if provided on the request
          type: string
      type: object
    ResultNode:
      allOf:
        - $ref: "#/components/schemas/Node"
        - properties:
            archivedAt:
              format: date-time
              type: string
            archivedByUser:
              $ref: "#/components/schemas/UserInfo"
            search:
              $ref: "#/components/schemas/SearchEntry"
            versionComment:
              type: string
            versionLabel:
              type: string
          type: object
    ResultSetContext:
      description: Context that applies to the whole result set
      properties:
        consistency:
          $ref: "#/components/schemas/ResponseConsistency"
        facetQueries:
          description: The counts from facet queries
          items:
            properties:
              count:
                type: integer
              filterQuery:
                description: The filter query you can use to apply this facet
                type: string
              label:
                type: string
            type: object
          type: array
        facets:
          description: The faceted response
          items:
            $ref: "#/components/schemas/GenericFacetResponse"
          type: array
        facetsFields:
          description: The counts from field facets
          items:
            $ref: "#/components/schemas/ResultBuckets"
          type: array
        request:
          $ref: "#/components/schemas/SearchRequest"
        spellcheck:
          description: >
            Suggested corrections


            If zero results were found for the original query then a single entry of type "searchInsteadFor" will be returned.

            If alternatives were found that return more results than the original query they are returned as "didYouMean" options.

            The highest quality suggestion is first.
          items:
            properties:
              suggestion:
                description: A suggested alternative query
                items:
                  type: string
                type: array
              type:
                enum:
                  - searchInsteadFor
                  - didYouMean
                type: string
            type: object
          type: array
      type: object
    ResultSetPaging:
      description: Query results
      properties:
        list:
          properties:
            context:
              $ref: "#/components/schemas/ResultSetContext"
            entries:
              items:
                $ref: "#/components/schemas/ResultSetRowEntry"
              type: array
            pagination:
              $ref: "#/components/schemas/Pagination"
          type: object
      type: object
    ResultSetRowEntry:
      description: A row in the result set
      properties:
        entry:
          $ref: "#/components/schemas/ResultNode"
      required:
        - entry
      type: object
    SearchEntry:
      properties:
        highlight:
          description: >
            Highlight fragments if requested and available. A match can happen
            in any of the requested field.
          items:
            properties:
              field:
                description: The field where a match occured (one of the fields defined on the
                  request)
                type: string
              snippets:
                description: Any number of snippets for the specified field highlighting the
                  matching text
                items:
                  description: The highlighted fragment for the field.
                  type: string
                type: array
            type: object
          type: array
        score:
          description: The score for this row
          format: float
          type: number
      type: object
    SearchRequest:
      properties:
        defaults:
          $ref: "#/components/schemas/RequestDefaults"
        facetFields:
          $ref: "#/components/schemas/RequestFacetFields"
        facetIntervals:
          $ref: "#/components/schemas/RequestFacetIntervals"
        facetQueries:
          $ref: "#/components/schemas/RequestFacetQueries"
        fields:
          $ref: "#/components/schemas/RequestFields"
        filterQueries:
          $ref: "#/components/schemas/RequestFilterQueries"
        highlight:
          $ref: "#/components/schemas/RequestHighlight"
        include:
          $ref: "#/components/schemas/RequestInclude"
        includeRequest:
          default: false
          description: When true, include the original request in the response
          type: boolean
        limits:
          $ref: "#/components/schemas/RequestLimits"
        localization:
          $ref: "#/components/schemas/RequestLocalization"
        paging:
          $ref: "#/components/schemas/RequestPagination"
        pivots:
          items:
            $ref: "#/components/schemas/RequestPivot"
          type: array
        query:
          $ref: "#/components/schemas/RequestQuery"
        ranges:
          items:
            $ref: "#/components/schemas/RequestRange"
          type: array
        scope:
          $ref: "#/components/schemas/RequestScope"
        sort:
          $ref: "#/components/schemas/RequestSortDefinition"
        spellcheck:
          $ref: "#/components/schemas/RequestSpellcheck"
        stats:
          items:
            $ref: "#/components/schemas/RequestStats"
          type: array
        templates:
          $ref: "#/components/schemas/RequestTemplates"
      required:
        - query
      type: object
    UserInfo:
      properties:
        displayName:
          type: string
        id:
          type: string
      required:
        - displayName
        - id
      type: object
